{"/home/travis/build/npmtest/node-npmtest-mysql2/test.js":"/* istanbul instrument in package npmtest_mysql2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql2/lib.npmtest_mysql2.js":"/* istanbul instrument in package npmtest_mysql2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mysql2 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mysql2 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql2/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mysql2 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mysql2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mysql2\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mysql2.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mysql2.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mysql2.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mysql2.__dirname + '/lib.npmtest_mysql2.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/index.js":"var SqlString = require('sqlstring');\n\nvar Connection = require('./lib/connection.js');\nvar ConnectionConfig = require('./lib/connection_config.js');\n\nmodule.exports.createConnection = function (opts) {\n  return new Connection({config: new ConnectionConfig(opts)});\n};\n\nmodule.exports.connect = module.exports.createConnection;\nmodule.exports.Connection = Connection;\n\nmodule.exports.createPool = function (config) {\n  var PoolConfig = require('./lib/pool_config.js');\n  var Pool = require('./lib/pool.js');\n  return new Pool({config: new PoolConfig(config)});\n};\n\nexports.createPoolCluster = function (config) {\n  var PoolCluster = require('./lib/pool_cluster.js');\n  return new PoolCluster(config);\n};\n\nmodule.exports.createServer = function (handler) {\n  var Server = require('./lib/server.js');\n  var s = new Server();\n  if (handler) {\n    s.on('connection', handler);\n  }\n  return s;\n};\n\nexports.escape = SqlString.escape;\nexports.escapeId = SqlString.escapeId;\nexports.format = SqlString.format;\n\nexports.__defineGetter__('createConnectionPromise', function () {\n  return require('./promise.js').createConnection;\n});\n\nexports.__defineGetter__('createPoolPromise', function () {\n  return require('./promise.js').createPool;\n});\n\nexports.__defineGetter__('createPoolClusterPromise', function () {\n  return require('./promise.js').createPoolCluster;\n});\n\nexports.__defineGetter__('Types', function () {\n  return require('./lib/constants/types.js');\n});\n\nexports.__defineGetter__('Charsets', function () {\n  return require('./lib/constants/charsets.js');\n});\n\nexports.__defineGetter__('CharsetToEncoding', function () {\n  return require('./lib/constants/charset_encodings.js');\n});\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/connection.js":"var Net = require('net');\nvar util = require('util');\nvar Tls = require('tls');\nvar Timers = require('timers');\nvar EventEmitter = require('events').EventEmitter;\nvar Queue = require('denque');\nvar SqlString = require('sqlstring');\nvar LRU = require('lru-cache');\n\nvar PacketParser = require('./packet_parser.js');\nvar Packet = require('./packets/packet.js');\nvar Packets = require('./packets/index.js');\nvar Commands = require('./commands/index.js');\nvar ConnectionConfig = require('./connection_config.js');\nvar CharsetToEncoding = require('./constants/charset_encodings.js');\nvar Buffer = require('safe-buffer').Buffer;\n\nvar _connectionId = 0;\nvar noop = function () {};\n\nfunction Connection (opts)\n{\n  EventEmitter.call(this);\n  this.config = opts.config;\n\n  // TODO: fill defaults\n  // if no params, connect to /var/lib/mysql/mysql.sock ( /tmp/mysql.sock on OSX )\n  // if host is given, connect to host:3306\n\n  // TODO: use `/usr/local/mysql/bin/mysql_config --socket` output? as default socketPath\n  // if there is no host/port and no socketPath parameters?\n\n  if (!opts.config.stream) {\n    if (opts.config.socketPath) {\n      this.stream = Net.connect(opts.config.socketPath);\n    } else {\n      this.stream = Net.connect(opts.config.port, opts.config.host);\n    }\n  } else {\n    // if stream is a function, treat it as \"stream agent / factory\"\n    if (typeof opts.config.stream == 'function') {\n      this.stream = opts.config.stream(opts);\n    } else {\n      this.stream = opts.config.stream;\n    }\n  }\n  this._internalId = _connectionId++;\n\n  this._commands = new Queue();\n  this._command = null;\n\n  this._paused = false;\n  this._paused_packets = new Queue();\n\n  this._statements = LRU({\n    max: this.config.maxPreparedStatements,\n    dispose: function (key, statement) { statement.close(); }\n  });\n\n  // TODO: make it lru cache\n  // https://github.com/mercadolibre/node-simple-lru-cache\n  // or https://github.com/rsms/js-lru\n  // or https://github.com/monsur/jscache\n  // or https://github.com/isaacs/node-lru-cache\n  //\n  // key is field.name + ':' + field.columnType + ':' field.flags + '/'\n  this.textProtocolParsers = {};\n\n  // TODO: not sure if cache should be separate (same key as with textProtocolParsers)\n  // or part of prepared statements cache (key is sql query)\n  this.binaryProtocolParsers = {};\n\n  this.serverCapabilityFlags = 0;\n  this.authorized = false;\n\n  var connection = this;\n\n  this.sequenceId = 0;\n  this.compressedSequenceId = 0;\n\n  this.threadId = null;\n  this._handshakePacket = null;\n  this._fatalError = null;\n  this._protocolError = null;\n  this._outOfOrderPackets = [];\n\n  this.clientEncoding = CharsetToEncoding[this.config.charsetNumber];\n\n  this.stream.once('error', connection._handleNetworkError.bind(this));\n\n  // see https://gist.github.com/khoomeister/4985691#use-that-instead-of-bind\n  this.packetParser = new PacketParser(function (p) {\n    connection.handlePacket(p);\n  });\n\n  this.stream.on('data', function (data) {\n    if (connection.connectTimeout) {\n      Timers.clearTimeout(connection.connectTimeout);\n      connection.connectTimeout = null;\n    }\n    connection.packetParser.execute(data);\n  });\n\n  this.stream.on('end', function () {\n    // we need to set this flag everywhere where we want connection to close\n    if (connection._closing) {\n      return;\n    }\n\n    if (!connection._protocolError) { // no particular error message before disconnect\n      connection._protocolError = new Error('Connection lost: The server closed the connection.');\n      connection._protocolError.fatal = true;\n      connection._protocolError.code = 'PROTOCOL_CONNECTION_LOST';\n    }\n\n    connection._notifyError(connection._protocolError);\n  });\n  var handshakeCommand;\n  if (!this.config.isServer) {\n    handshakeCommand = new Commands.ClientHandshake(this.config.clientFlags);\n    handshakeCommand.on('end', function () {\n      connection._handshakePacket = handshakeCommand.handshake;\n      connection.threadId = handshakeCommand.handshake.connectionId;\n      connection.emit('connect', handshakeCommand.handshake);\n    });\n    handshakeCommand.on('error', function (err) {\n      connection._notifyError(err);\n    });\n    this.addCommand(handshakeCommand);\n  }\n\n  // in case there was no initiall handshake but we need to read sting, assume it utf-8\n  // most common example: \"Too many connections\" error ( packet is sent immediately on connection attempt, we don't know server encoding yet)\n  // will be overwrittedn with actial encoding value as soon as server handshake packet is received\n  this.serverEncoding = 'utf8';\n\n  if (this.config.connectTimeout) {\n    var timeoutHandler = this._handleTimeoutError.bind(this);\n    this.connectTimeout = Timers.setTimeout(timeoutHandler, this.config.connectTimeout);\n  }\n}\nutil.inherits(Connection, EventEmitter);\n\nConnection.prototype._addCommandClosedState = function (cmd) {\n  var err = new Error('Can\\'t add new command when connection is in closed state');\n  err.fatal = true;\n  if (cmd.onResult) {\n    cmd.onResult(err);\n  } else {\n    this.emit('error', err);\n  }\n};\n\nConnection.prototype._handleFatalError = function (err) {\n  var connection = this;\n  err.fatal = true;\n  // stop receiving packets\n  connection.stream.removeAllListeners('data');\n  connection.addCommand = connection._addCommandClosedState;\n  connection.write = function () {\n    connection.emit('error', new Error('Can\\'t write in closed state'));\n  };\n  connection._notifyError(err);\n  connection._fatalError = err;\n};\n\nConnection.prototype._handleNetworkError = function (err) {\n  this._handleFatalError(err);\n};\n\nConnection.prototype._handleTimeoutError = function () {\n  if (this.connectTimeout) {\n    Timers.clearTimeout(this.connectTimeout);\n    this.connectTimeout = null;\n  }\n\n  this.stream.destroy && this.stream.destroy();\n\n  var err = new Error('connect ETIMEDOUT');\n  err.errorno = 'ETIMEDOUT';\n  err.code = 'ETIMEDOUT';\n  err.syscall = 'connect';\n\n  this._handleNetworkError(err);\n};\n\n// notify all commands in the queue and bubble error as connection \"error\"\n// called on stream error or unexpected termination\nConnection.prototype._notifyError = function (err) {\n  var connection = this;\n\n  // prevent from emitting 'PROTOCOL_CONNECTION_LOST' after EPIPE or ECONNRESET\n  if (connection._fatalError) {\n    return;\n  }\n\n  var command;\n\n  // if there is no active command, notify connection\n  // if there are commands and all of them have callbacks, pass error via callback\n  var bubbleErrorToConnection = !connection._command;\n  if (connection._command && connection._command.onResult) {\n    connection._command.onResult(err);\n    connection._command = null;\n  } else {\n    bubbleErrorToConnection = true;\n  }\n  while ((command = connection._commands.shift())) {\n    if (command.onResult) {\n      command.onResult(err);\n    } else {\n      bubbleErrorToConnection = true;\n    }\n  }\n  // notify connection if some comands in the queue did not have callbacks\n  // or if this is pool connection ( so it can be removed from pool )\n  if (bubbleErrorToConnection || connection._pool) {\n    connection.emit('error', err);\n  }\n};\n\nConnection.prototype.write = function (buffer) {\n  var connection = this;\n  this.stream.write(buffer, function (err) {\n    if (err) {\n      connection._handleNetworkError(err);\n    }\n  });\n};\n\n// http://dev.mysql.com/doc/internals/en/sequence-id.html\n//\n// The sequence-id is incremented with each packet and may wrap around.\n// It starts at 0 and is reset to 0 when a new command\n// begins in the Command Phase.\n// http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n\nConnection.prototype._resetSequenceId = function () {\n  this.sequenceId = 0;\n  this.compressedSequenceId = 0;\n};\n\nConnection.prototype._bumpCompressedSequenceId = function (numPackets) {\n  this.compressedSequenceId += numPackets;\n  this.compressedSequenceId %= 256;\n};\n\nConnection.prototype._bumpSequenceId = function (numPackets) {\n  this.sequenceId += numPackets;\n  this.sequenceId %= 256;\n};\n\nConnection.prototype.writePacket = function (packet) {\n  var MAX_PACKET_LENGTH = 16777215;\n  var length = packet.length();\n  var chunk, offset, header;\n\n  if (length < MAX_PACKET_LENGTH) {\n    packet.writeHeader(this.sequenceId);\n    if (this.config.debug) {\n      console.log(this._internalId + ' ' + this.connectionId + ' <== ' + this._command._commandName + '#' + this._command.stateName() + '(' + [this.sequenceId, packet._name, packet.length()].join(',') + ')');\n      console.log(this._internalId + ' ' + this.connectionId + ' <== ' + packet.buffer.toString('hex'));\n    }\n    this._bumpSequenceId(1);\n    this.write(packet.buffer);\n  } else {\n    if (this.config.debug) {\n      console.log(this._internalId + ' ' + this.connectionId + ' <== Writing large packet, raw content not written:');\n      console.log(this._internalId + ' ' + this.connectionId + ' <== ' + this._command._commandName + '#' + this._command.stateName() + '(' + [this.sequenceId, packet._name, packet.length()].join(',') + ')');\n    }\n    for (offset = 4; offset < 4 + length; offset += MAX_PACKET_LENGTH) {\n      chunk = packet.buffer.slice(offset, offset + MAX_PACKET_LENGTH);\n      if (chunk.length === MAX_PACKET_LENGTH) {\n        header = Buffer.from([0xff, 0xff, 0xff, this.sequenceId]);\n      } else {\n        header = Buffer.from([chunk.length & 0xff, (chunk.length >> 8) & 0xff, (chunk.length >> 16) & 0xff, this.sequenceId]);\n      }\n      this._bumpSequenceId(1);\n      this.write(header);\n      this.write(chunk);\n    }\n  }\n};\n\nif (Tls.TLSSocket) {\n  // 0.11+ environment\n  Connection.prototype.startTLS = function _startTLS (onSecure) {\n    if (this.config.debug) {\n      console.log('Upgrading connection to TLS');\n    }\n    var connection = this;\n    var stream = this.stream;\n    var secureContext = Tls.createSecureContext({\n      ca         : this.config.ssl.ca,\n      cert       : this.config.ssl.cert,\n      ciphers    : this.config.ssl.ciphers,\n      key        : this.config.ssl.key,\n      passphrase : this.config.ssl.passphrase\n    });\n\n    var rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    var secureEstablished = false;\n    var secureSocket = new Tls.TLSSocket(connection.stream, {\n      rejectUnauthorized : rejectUnauthorized,\n      requestCert        : true,\n      secureContext      : secureContext,\n      isServer           : false\n    });\n\n    // error handler for secure socket\n    secureSocket.on('_tlsError', function (err) {\n      if (secureEstablished) {\n        connection._handleNetworkError(err);\n      } else {\n        onSecure(err);\n      }\n    });\n\n    secureSocket.on('secure', function () {\n      secureEstablished = true;\n      onSecure(rejectUnauthorized ? this.ssl.verifyError() : null);\n    });\n    secureSocket.on('data', function (data) {\n      connection.packetParser.execute(data);\n    });\n    connection.write = function (buffer) {\n      secureSocket.write(buffer);\n    };\n    // start TLS communications\n    secureSocket._start();\n  };\n} else {\n  Connection.prototype.startTLS = function _startTLS (onSecure) {\n    if (this.config.debug) {\n      console.log('Upgrading connection to TLS');\n    }\n    var connection = this;\n    var crypto = require('crypto');\n    var config = this.config;\n    var stream = this.stream;\n    var rejectUnauthorized = this.config.ssl.rejectUnauthorized;\n    var credentials = crypto.createCredentials({\n      key        : config.ssl.key,\n      cert       : config.ssl.cert,\n      passphrase : config.ssl.passphrase,\n      ca         : config.ssl.ca,\n      ciphers    : config.ssl.ciphers\n    });\n    var securePair = Tls.createSecurePair(credentials, false, true, rejectUnauthorized);\n\n    if (stream.ondata) {\n      stream.ondata = null;\n    }\n    stream.removeAllListeners('data');\n    stream.pipe(securePair.encrypted);\n    securePair.encrypted.pipe(stream);\n    securePair.cleartext.on('data', function (data) {\n      connection.packetParser.execute(data);\n    });\n    connection.write = function (buffer) {\n      securePair.cleartext.write(buffer);\n    };\n    securePair.on('secure', function () {\n      onSecure(rejectUnauthorized ? this.ssl.verifyError() : null);\n    });\n  };\n}\n\nConnection.prototype.pipe = function () {\n  var connection = this;\n  if (this.stream instanceof Net.Stream) {\n    this.stream.ondata = function (data, start, end) {\n      connection.packetParser.execute(data, start, end);\n    };\n  } else {\n    this.stream.on('data', function (data) {\n      connection.packetParser.execute(data.parent, data.offset, data.offset + data.length);\n    });\n  }\n};\n\nConnection.prototype.protocolError = function (message, code) {\n  var err = new Error(message);\n  err.fatal = true;\n  err.code = code || 'PROTOCOL_ERROR';\n  this.emit('error', err);\n};\n\nConnection.prototype.handlePacket = function (packet) {\n  if (this._paused) {\n    this._paused_packets.push(packet);\n    return;\n  }\n  if (packet) {\n    if (this.sequenceId !== packet.sequenceId) {\n      console.error('Warning: got packets out of order. Expected ' +\n        this.sequenceId + ' but received ' + packet.sequenceId);\n    }\n    this._bumpSequenceId(packet.numPackets);\n  }\n\n  if (this.config.debug) {\n    if (packet) {\n      console.log(' raw: ' + packet.buffer.slice(packet.offset, packet.offset + packet.length()).toString('hex'));\n      console.trace();\n      var commandName = this._command ? this._command._commandName : '(no command)';\n      var stateName = this._command ? this._command.stateName() : '(no command)';\n      console.log(this._internalId + ' ' + this.connectionId + ' ==> ' + commandName + '#' + stateName + '(' + [packet.sequenceId, packet.type(), packet.length()].join(',') + ')');\n    }\n  }\n  if (!this._command) {\n    this.protocolError('Unexpected packet while no commands in the queue', 'PROTOCOL_UNEXPECTED_PACKET');\n    this.close();\n    return;\n  }\n\n  var done = this._command.execute(packet, this);\n  if (done) {\n\n    this._command = this._commands.shift();\n    if (this._command) {\n      this.sequenceId = 0;\n      this.compressedSequenceId = 0;\n      this.handlePacket();\n    }\n  }\n};\n\nConnection.prototype.addCommand = function (cmd) {\n\n  // this.compressedSequenceId = 0;\n  // this.sequenceId = 0;\n\n  if (this.config.debug) {\n    console.log('Add command: ' + arguments.callee.caller.name);\n    cmd._commandName = arguments.callee.caller.name;\n  }\n  if (!this._command) {\n    this._command = cmd;\n    this.handlePacket();\n  } else {\n    this._commands.push(cmd);\n  }\n  return cmd;\n};\n\nConnection.prototype.format = function (sql, values) {\n  if (typeof this.config.queryFormat == 'function') {\n    return this.config.queryFormat.call(this, sql, values, this.config.timezone);\n  }\n  var opts = {\n    sql: sql,\n    values: values\n  };\n  this._resolveNamedPlaceholders(opts);\n  return SqlString.format(opts.sql, opts.values, this.config.stringifyObjects, this.config.timezone);\n};\n\nConnection.prototype.escape = function (value) {\n  return SqlString.escape(value, false, this.config.timezone);\n};\n\nConnection.prototype.escapeId = function escapeId (value) {\n  return SqlString.escapeId(value, false);\n};\n\nvar convertNamedPlaceholders = null;\nConnection.prototype._resolveNamedPlaceholders = function (options) {\n  var unnamed;\n  if (this.config.namedPlaceholders || options.namedPlaceholders) {\n    if (convertNamedPlaceholders === null) {\n      convertNamedPlaceholders = require('named-placeholders')();\n    }\n    unnamed = convertNamedPlaceholders(options.sql, options.values);\n    options.sql = unnamed[0];\n    options.values = unnamed[1];\n  }\n};\n\nConnection.createQuery = function createQuery (sql, values, cb, config) {\n  var options = {\n    rowsAsArray: config.rowsAsArray\n  };\n  if (typeof sql === 'object') {\n    // query(options, cb)\n    options = sql;\n    if (typeof values === 'function') {\n      cb = values;\n    } else if (values !== undefined) {\n      options.values = values;\n    }\n  } else if (typeof values === 'function') {\n    // query(sql, cb)\n    cb = values;\n    options.sql = sql;\n    options.values = undefined;\n  } else {\n    // query(sql, values, cb)\n    options.sql = sql;\n    options.values = values;\n  }\n  return new Commands.Query(options, cb);\n};\n\nConnection.prototype.query = function query (sql, values, cb) {\n  var cmdQuery;\n  if (sql.constructor == Commands.Query) {\n    cmdQuery = sql;\n  } else {\n    cmdQuery = Connection.createQuery(sql, values, cb, this.config);\n  }\n  this._resolveNamedPlaceholders(cmdQuery);\n  var rawSql = this.format(cmdQuery.sql, cmdQuery.values || []);\n  cmdQuery.sql = rawSql;\n  return this.addCommand(cmdQuery);\n};\n\nConnection.prototype.pause = function pause () {\n  this._paused = true;\n  this.stream.pause();\n};\n\nConnection.prototype.resume = function resume () {\n  var packet;\n  this._paused = false;\n  while ((packet = this._paused_packets.shift())) {\n    this.handlePacket(packet);\n    // don't resume if packet hander paused connection\n    if (this._paused) {\n      return;\n    }\n  }\n  this.stream.resume();\n};\n\nConnection.prototype.keyFromFields = function keyFromFields (fields, options) {\n  var res = (typeof options.nestTables) + '/' + options.nestTables + '/' + options.rowsAsArray\n    + options.supportBigNumbers + '/' + options.bigNumberStrings + '/' + typeof options.typeCast;\n  for (var i = 0; i < fields.length; ++i) {\n    res += '/' + fields[i].name + ':' + fields[i].columnType + ':' + fields[i].flags;\n  }\n  return res;\n};\n\nConnection.statementKey = function (options) {\n  return (typeof options.nestTables) +\n    '/' + options.nestTables + '/' + options.rowsAsArray + options.sql;\n};\n\n// TODO: named placeholders support\nConnection.prototype.prepare = function prepare (options, cb) {\n  if (typeof options == 'string') {\n    options = {sql: options};\n  }\n  return this.addCommand(new Commands.Prepare(options, cb));\n};\n\nConnection.prototype.unprepare = function unprepare (sql) {\n  var options = {};\n  if (typeof sql === 'object') {\n    options = sql;\n  } else {\n    options.sql = sql;\n  }\n  var key = Connection.statementKey(options);\n  var stmt = this._statements.get(key);\n  if (stmt) {\n    this._statements.del(key);\n    stmt.close();\n  }\n  return stmt;\n};\n\nConnection.prototype.execute = function execute (sql, values, cb) {\n  var options = {};\n  if (typeof sql === 'object') {\n    // execute(options, cb)\n    options = sql;\n    if (typeof values === 'function') {\n      cb = values;\n    } else {\n      options.values = options.values || values;\n    }\n  } else if (typeof values === 'function') {\n    // execute(sql, cb)\n    cb = values;\n    options.sql = sql;\n    options.values = undefined;\n  } else {\n    // execute(sql, values, cb)\n    options.sql = sql;\n    options.values = values;\n  }\n  this._resolveNamedPlaceholders(options);\n\n  var executeCommand = new Commands.Execute(options, cb);\n  var prepareCommand = new Commands.Prepare(options, function (err, stmt) {\n    if (err) {\n      // skip execute command if prepare failed, we have main\n      // combined callback here\n      executeCommand.start = function () { return null; };\n\n      if (cb) {\n        cb(err);\n      } else {\n        executeCommand.emit('error', err);\n      }\n      return;\n    }\n\n    executeCommand.statement = stmt;\n  });\n\n  this.addCommand(prepareCommand);\n  this.addCommand(executeCommand);\n  return executeCommand;\n};\n\nConnection.prototype.changeUser = function changeUser (options, callback) {\n  if (!callback && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var charsetNumber = (options.charset) ? ConnectionConfig.getCharsetNumber(options.charset) : this.config.charsetNumber;\n\n  return this.addCommand(new Commands.ChangeUser({\n    user          : options.user || this.config.user,\n    password      : options.password || this.config.password,\n    passwordSha1  : options.passwordSha1 || this.config.passwordSha1,\n    database      : options.database || this.config.database,\n    timeout       : options.timeout,\n    charsetNumber : charsetNumber,\n    currentConfig : this.config\n  }, function (err) {\n    if (err) {\n      err.fatal = true;\n    }\n\n    if (callback) {\n      callback(err);\n    }\n  }));\n};\n\n// transaction helpers\nConnection.prototype.beginTransaction = function (cb) {\n  return this.query('START TRANSACTION', cb);\n};\n\nConnection.prototype.commit = function (cb) {\n  return this.query('COMMIT', cb);\n};\n\nConnection.prototype.rollback = function (cb) {\n  return this.query('ROLLBACK', cb);\n};\n\nConnection.prototype.ping = function ping (cb) {\n  return this.addCommand(new Commands.Ping(cb));\n};\n\nConnection.prototype._registerSlave = function registerSlave (opts, cb) {\n  return this.addCommand(new Commands.RegisterSlave(opts, cb));\n};\n\nConnection.prototype._binlogDump = function binlogDump (opts, cb) {\n  return this.addCommand(new Commands.BinlogDump(opts, cb));\n};\n\n// currently just alias to close\nConnection.prototype.destroy = function () {\n  this.close();\n};\n\nConnection.prototype.close = function () {\n  this._closing = true;\n  this.stream.end();\n  var connection = this;\n  connection.addCommand = connection._addCommandClosedState;\n};\n\nConnection.prototype.createBinlogStream = function (opts) {\n  // TODO: create proper stream class\n  // TODO: use through2\n  var test = 1;\n  var Readable = require('stream').Readable;\n  var stream = new Readable({objectMode: true});\n  stream._read = function () {\n    return {\n      data: test++\n    };\n  };\n  var connection = this;\n  connection._registerSlave(opts, function (err) {\n    var dumpCmd = connection._binlogDump(opts);\n    dumpCmd.on('event', function (ev) {\n      stream.push(ev);\n    });\n    dumpCmd.on('eof', function () {\n      stream.push(null);\n      // if non-blocking, then close stream to prevent errors\n      if (opts.flags && (opts.flags & 0x01)) {\n        connection.close();\n      }\n    });\n    // TODO: pipe errors as well\n  });\n  return stream;\n};\n\nConnection.prototype.connect = function (cb) {\n  if (!cb) {\n    return;\n  }\n  var connectCalled = 0;\n\n  function callbackOnce (isErrorHandler) {\n    return function (param) {\n      if (!connectCalled) {\n        if (isErrorHandler) {\n          cb(param);\n        } else {\n          cb(null, param);\n        }\n      }\n      connectCalled = 1;\n    };\n  }\n  this.once('error', callbackOnce(true));\n  this.once('connect', callbackOnce(false));\n};\n\n// ===================================\n// outgoing server connection methods\n// ===================================\n\nConnection.prototype.writeColumns = function (columns) {\n  var connection = this;\n  this.writePacket(Packets.ResultSetHeader.toPacket(columns.length));\n  columns.forEach(function (column) {\n    connection.writePacket(Packets.ColumnDefinition.toPacket(column, connection.serverConfig.encoding));\n  });\n  this.writeEof();\n};\n\n// row is array of columns, not hash\nConnection.prototype.writeTextRow = function (column) {\n  this.writePacket(Packets.TextRow.toPacket(column, this.serverConfig.encoding));\n};\n\nConnection.prototype.writeTextResult = function (rows, columns) {\n  var connection = this;\n  connection.writeColumns(columns);\n  rows.forEach(function (row) {\n    var arrayRow = new Array(columns.length);\n    columns.forEach(function (column) {\n      arrayRow.push(row[column.name]);\n    });\n    connection.writeTextRow(arrayRow);\n  });\n  connection.writeEof();\n};\n\nConnection.prototype.writeEof = function (warnings, statusFlags) {\n  this.writePacket(Packets.EOF.toPacket(warnings, statusFlags));\n};\n\nConnection.prototype.writeOk = function (args) {\n  if (!args) {\n    args = {affectedRows: 0};\n  }\n  this.writePacket(Packets.OK.toPacket(args, this.serverConfig.encoding));\n};\n\nConnection.prototype.writeError = function (args) {\n  // if we want to send error before initial hello was sent, use default encoding\n  var encoding = this.serverConfig ? this.serverConfig.encoding : 'cesu8';\n  this.writePacket(Packets.Error.toPacket(args, this.serverConfig.encoding));\n};\n\nConnection.prototype.serverHandshake = function serverHandshake (args) {\n  this.serverConfig = args;\n  this.serverConfig.encoding = CharsetToEncoding[this.serverConfig.characterSet];\n  return this.addCommand(new Commands.ServerHandshake(args));\n};\n\n// ===============================================================\n\nConnection.prototype.end = function (callback) {\n  var connection = this;\n\n  if (this.config.isServer) {\n    connection._closing = true;\n    var quitCmd = new EventEmitter();\n    setImmediate(function () {\n      connection.stream.end();\n      quitCmd.emit('end');\n    });\n    return quitCmd;\n  }\n\n  // trigger error if more commands enqueued after end command\n  var quitCmd = this.addCommand(new Commands.Quit(callback));\n  connection.addCommand = connection._addCommandClosedState;\n  return quitCmd;\n};\n\nmodule.exports = Connection;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packet_parser.js":"var Buffer = require('safe-buffer').Buffer;\nvar Packet = require('./packets/packet.js');\n\nfunction PacketParser (onPacket, packetHeaderLength)\n{\n  // 4 for normal packets, 7 for comprssed protocol packets\n  if (typeof packetHeaderLength == 'undefined') {\n    packetHeaderLength = 4;\n  }\n  // array of last payload chunks\n  // only used when current payload is not complete\n  this.buffer = [];\n  // total length of chunks on buffer\n  this.bufferLength = 0;\n  this.packetHeaderLength = packetHeaderLength;\n\n  // incomplete header state: number of header bytes received\n  this.headerLen = 0;\n\n  // expected payload length\n  this.length = 0;\n\n  this.largePacketParts = [];\n  this.firstPacketSequenceId = 0;\n\n  this.onPacket = onPacket;\n  this.execute = PacketParser.prototype.executeStart;\n  this._flushLargePacket = packetHeaderLength == 7 ?\n    this._flushLargePacket7 : this._flushLargePacket4;\n}\n\nfunction readPacketLength (b, off) {\n  var b0 = b[off];\n  var b1 = b[off + 1];\n  var b2 = b[off + 2];\n  if (b1 + b2 === 0) {\n    return b0;\n  }\n  return b0 + (b1 << 8) + (b2 << 16);\n}\n\nvar MAX_PACKET_LENGTH = 16777215;\n\nPacketParser.prototype._flushLargePacket4 = function _flushLargePacket () {\n  var numPackets = this.largePacketParts.length;\n  this.largePacketParts.unshift(Buffer.from([0, 0, 0, 0])); // insert header\n  var body = Buffer.concat(this.largePacketParts);\n  var packet = new Packet(this.firstPacketSequenceId, body, 0, body.length);\n  this.largePacketParts.length = 0;\n  packet.numPackets = numPackets;\n  this.onPacket(packet);\n};\n\nPacketParser.prototype._flushLargePacket7 = function _flushLargePacket () {\n  var numPackets = this.largePacketParts.length;\n  this.largePacketParts.unshift(Buffer.from([0, 0, 0, 0, 0, 0, 0])); // insert header\n  var body = Buffer.concat(this.largePacketParts);\n  this.largePacketParts.length = 0;\n  var packet = new Packet(this.firstPacketSequenceId, body, 0, body.length);\n  packet.numPackets = numPackets;\n  this.onPacket(packet);\n};\n\nPacketParser.prototype.executeStart = function executeStart (chunk) {\n  var start = 0;\n  var end = chunk.length;\n\n  while (end - start >= 3) {\n    this.length = readPacketLength(chunk, start);\n    if (end - start >= this.length + this.packetHeaderLength) { // at least one full packet\n      var sequenceId = chunk[start + 3];\n      if (this.length < MAX_PACKET_LENGTH && this.largePacketParts.length === 0) {\n        this.onPacket(new Packet(sequenceId, chunk, start, start + this.packetHeaderLength + this.length));\n      } else {\n        // first large packet - remember it's id\n        if (this.largePacketParts.length === 0) {\n          this.firstPacketSequenceId = sequenceId;\n        }\n        this.largePacketParts.push(chunk.slice(start + this.packetHeaderLength, start + this.packetHeaderLength + this.length));\n        if (this.length < MAX_PACKET_LENGTH) {\n          this._flushLargePacket();\n        }\n      }\n      start += this.packetHeaderLength + this.length;\n    } else { // payload is incomplete\n      this.buffer = [chunk.slice(start + 3, end)];\n      this.bufferLength = end - start - 3;\n      this.execute = PacketParser.prototype.executePayload;\n      return;\n    }\n  }\n  if (end - start > 0) { // there is start of length header, but it's not full 3 bytes\n    this.headerLen = end - start; // 1 or 2 bytes\n    this.length = chunk[start];\n    if (this.headerLen == 2) {\n      this.length = chunk[start] + (chunk[start + 1] << 8);\n      this.execute = PacketParser.prototype.executeHeader3;\n    } else {\n      this.execute = PacketParser.prototype.executeHeader2;\n    }\n  }\n};\n\nPacketParser.prototype.executePayload = function executePayload (chunk) {\n\n  var start = 0;\n  var end = chunk.length;\n  var remainingPayload = this.length - this.bufferLength + this.packetHeaderLength - 3;\n\n  if (end - start >= remainingPayload) { // last chunk for payload\n    var payload = Buffer.allocUnsafe(this.length + this.packetHeaderLength);\n    var offset = 3;\n    for (var i = 0; i < this.buffer.length; ++i) {\n      this.buffer[i].copy(payload, offset);\n      offset += this.buffer[i].length;\n    }\n    chunk.copy(payload, offset, start, start + remainingPayload);\n    var sequenceId = payload[3];\n    if (this.length < MAX_PACKET_LENGTH && this.largePacketParts.length === 0) {\n      this.onPacket(new Packet(sequenceId, payload, 0, this.length + this.packetHeaderLength));\n    } else {\n      // first large packet - remember it's id\n      if (this.largePacketParts.length === 0) {\n        this.firstPacketSequenceId = sequenceId;\n      }\n      this.largePacketParts.push(payload.slice(this.packetHeaderLength, this.packetHeaderLength + this.length));\n      if (this.length < MAX_PACKET_LENGTH) {\n        this._flushLargePacket();\n      }\n    }\n    this.buffer = [];\n    this.bufferLength = 0;\n    this.execute = PacketParser.prototype.executeStart;\n    start += remainingPayload;\n    if (end - start > 0) {\n      return this.execute(chunk.slice(start, end));\n    }\n  } else {\n    this.buffer.push(chunk);\n    this.bufferLength += chunk.length;\n  }\n  return null;\n};\n\nPacketParser.prototype.executeHeader2 = function executeHeader2 (chunk) {\n  this.length += chunk[0] << 8;\n  if (chunk.length > 1) {\n    this.length += chunk[1] << 16;\n    this.execute = PacketParser.prototype.executePayload;\n    return this.executePayload(chunk.slice(2));\n  } else {\n    this.execute = PacketParser.prototype.executeHeader3;\n  }\n  return null;\n};\n\nPacketParser.prototype.executeHeader3 = function executeHeader3 (chunk) {\n  this.length += chunk[0] << 16;\n  this.execute = PacketParser.prototype.executePayload;\n  return this.executePayload(chunk.slice(1));\n};\n\nmodule.exports = PacketParser;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/packet.js":"var ErrorCodeToName = require('../constants/errors.js');\n\nvar NativeBuffer = require('buffer').Buffer;\nvar Buffer = require('safe-buffer').Buffer;\nvar Long = require('long');\nvar StringParser = require('../parsers/string.js');\n\nfunction Packet (id, buffer, start, end)\n{\n  // hot path, enable checks when testing only\n  // if (!Buffer.isBuffer(buffer) || typeof start == 'undefined' || typeof end == 'undefined')\n  //  throw new Error('invalid packet');\n  this.sequenceId = id;\n  this.numPackets = 1;\n  this.buffer = buffer;\n  this.start = start;\n  this.offset = start + 4;\n  this.end = end;\n}\n\n// ==============================\n// readers\n// ==============================\n\nPacket.prototype.reset = function () {\n  this.offset = this.start + 4;\n};\n\nPacket.prototype.length = function () {\n  return this.end - this.start;\n};\n\nPacket.prototype.slice = function () {\n  return this.buffer.slice(this.start, this.end);\n};\n\nPacket.prototype.dump = function () {\n  console.log([this.buffer.asciiSlice(this.start, this.end)], this.buffer.slice(this.start, this.end), this.length(), this.sequenceId);\n};\n\nPacket.prototype.haveMoreData = function () {\n  return this.end > this.offset;\n};\n\nPacket.prototype.skip = function (num) {\n  this.offset += num;\n};\n\nPacket.prototype.readInt8 = function ()\n{\n  return this.buffer[this.offset++];\n};\n\nPacket.prototype.readInt16 = function ()\n{\n  this.offset += 2;\n  return this.buffer.readUInt16LE(this.offset - 2, true);\n};\n\nPacket.prototype.readInt24 = function () {\n  return this.readInt16() + (this.readInt8() << 16);\n};\n\nPacket.prototype.readInt32 = function ()\n{\n  this.offset += 4;\n  return this.buffer.readUInt32LE(this.offset - 4, true);\n};\n\nPacket.prototype.readSInt8 = function ()\n{\n  return this.buffer.readInt8(this.offset++, true);\n};\n\nPacket.prototype.readSInt16 = function ()\n{\n  this.offset += 2;\n  return this.buffer.readInt16LE(this.offset - 2, true);\n};\n\nPacket.prototype.readSInt32 = function ()\n{\n  this.offset += 4;\n  return this.buffer.readInt32LE(this.offset - 4, true);\n};\n\nPacket.prototype.readInt64JSNumber = function () {\n  var word0 = this.readInt32();\n  var word1 = this.readInt32();\n  var l = new Long(word0, word1, true);\n  return l.toNumber();\n};\n\nPacket.prototype.readSInt64JSNumber = function () {\n  var word0 = this.readInt32();\n  var word1 = this.readInt32();\n  if (!(word1 & 0x80000000)) {\n    return word0 + 0x100000000 * word1;\n  }\n  var l = new Long(word0, word1, false);\n  return l.toNumber();\n};\n\nPacket.prototype.readInt64String = function () {\n  var word0 = this.readInt32();\n  var word1 = this.readInt32();\n  var res = new Long(word0, word1, true);\n  return res.toString();\n};\n\nPacket.prototype.readSInt64String = function () {\n  var word0 = this.readInt32();\n  var word1 = this.readInt32();\n  var res = new Long(word0, word1, false);\n  return res.toString();\n};\n\nPacket.prototype.readInt64 = function () {\n  var word0 = this.readInt32();\n  var word1 = this.readInt32();\n  var res = new Long(word0, word1, true);\n  var resNumber = res.toNumber()\n    , resString = res.toString();\n\n  res = resNumber.toString() === resString\n          ? resNumber\n          : resString;\n\n  return res;\n};\n\nPacket.prototype.readSInt64 = function () {\n  var word0 = this.readInt32();\n  var word1 = this.readInt32();\n  var res = new Long(word0, word1, false);\n  var resNumber = res.toNumber()\n    , resString = res.toString();\n\n  res = resNumber.toString() === resString\n          ? resNumber\n          : resString;\n\n  return res;\n};\n\nPacket.prototype.isEOF = function () {\n  return this.buffer[this.offset] == 0xfe && this.length() < 13;\n};\n\nPacket.prototype.eofStatusFlags = function () {\n  return this.buffer.readInt16LE(this.offset + 3);\n};\n\nPacket.prototype.eofWarningCount = function () {\n  return this.buffer.readInt16LE(this.offset + 1);\n};\n\nPacket.prototype.readLengthCodedNumber = function (bigNumberStrings, signed) {\n  var byte1 = this.buffer[this.offset++];\n  if (byte1 < 251) {\n    return byte1;\n  }\n  return this.readLengthCodedNumberExt(byte1, bigNumberStrings, signed);\n};\n\nPacket.prototype.readLengthCodedNumberSigned = function (bigNumberStrings) {\n  return this.readLengthCodedNumber(bigNumberStrings, true);\n};\n\nPacket.prototype.readLengthCodedNumberExt = function (tag, bigNumberStrings, signed) {\n  var word0, word1;\n  var res;\n  if (tag == 0xfb) {\n    return null;\n  }\n\n  if (tag == 0xfc) {\n    return this.readInt8() + (this.readInt8() << 8);\n  }\n\n  if (tag == 0xfd) {\n    return this.readInt8() + (this.readInt8() << 8) + (this.readInt8() << 16);\n  }\n\n  if (tag == 0xfe) {\n     // TODO: check version\n     // Up to MySQL 3.22, 0xfe was followed by a 4-byte integer.\n    word0 = this.readInt32();\n    word1 = this.readInt32();\n    if (word1 === 0) {\n      return word0; // don't convert to float if possible\n    }\n\n    if (word1 < 2097152) { // max exact float point int, 2^52 / 2^32\n      return word1 * 0x100000000 + word0;\n    }\n\n    res = new Long(word0, word1, !signed); // Long need unsigned\n\n    var resNumber = res.toNumber()\n      , resString = res.toString();\n\n    res = resNumber.toString() === resString\n            ? resNumber\n            : resString;\n\n    return bigNumberStrings ? resString : res;\n  }\n\n  console.trace();\n  throw new Error('Should not reach here: ' + tag);\n};\n\nPacket.prototype.readFloat = function () {\n  var res = this.buffer.readFloatLE(this.offset);\n  this.offset += 4;\n  return res;\n};\n\nPacket.prototype.readDouble = function () {\n  var res = this.buffer.readDoubleLE(this.offset);\n  this.offset += 8;\n  return res;\n};\n\nPacket.prototype.readBuffer = function (len) {\n  if (typeof len == 'undefined') {\n    len = this.end - this.offset;\n  }\n  this.offset += len;\n  return this.buffer.slice(this.offset - len, this.offset);\n};\n\nvar INVALID_DATE = new Date(NaN);\n// DATE, DATETIME and TIMESTAMP\nPacket.prototype.readDateTime = function () {\n  var length = this.readInt8();\n  if (length == 0xfb) {\n    return null;\n  }\n  var y = 0;\n  var m = 0;\n  var d = 0;\n  var H = 0;\n  var M = 0;\n  var S = 0;\n  var ms = 0;\n  if (length > 3) {\n    y = this.readInt16();\n    m = this.readInt8();\n    d = this.readInt8();\n\n  }\n  if (length > 6) {\n    H = this.readInt8();\n    M = this.readInt8();\n    S = this.readInt8();\n  }\n  if (length > 10) {\n    ms = this.readInt32();\n  }\n  if ((y + m + d + H + M + S + ms) === 0) {\n    return INVALID_DATE;\n  }\n  return new Date(y, m - 1, d, H, M, S, ms);\n};\n\n// this is nearly duplicate of previous function so generated code is not slower\n// due to \"if (dateStrings)\" branching\nvar pad = '000000000000';\nfunction leftPad (num, value) {\n  var s = value.toString();\n  // if we don't need to pad\n  if (s.length >= num) {\n    return s;\n  }\n  return (pad + s).slice(-num);\n}\n\nPacket.prototype.readDateTimeString = function () {\n  var length = this.readInt8();\n  var y = 0;\n  var m = 0;\n  var d = 0;\n  var H = 0;\n  var M = 0;\n  var S = 0;\n  var ms = 0;\n  var str;\n  if (length > 3) {\n    y = this.readInt16();\n    m = this.readInt8();\n    d = this.readInt8();\n    str = [leftPad(4, y), leftPad(2, m), leftPad(2, d)].join('-');\n  }\n  if (length > 6) {\n    H = this.readInt8();\n    M = this.readInt8();\n    S = this.readInt8();\n    str += ' ' + [leftPad(2, H), leftPad(2, M), leftPad(2, S)].join(':');\n  }\n  /* in text protocol you don't see microseconds as DATETIME/TIMESTAMP result.\n     instead you need to use MICROSECOND() function\n  if (length > 10) {\n    ms = this.readInt32();\n  }\n  */\n  return str;\n};\n\n// TIME - value as a string, Can be negative\nPacket.prototype.readTimeString = function (convertTtoMs) {\n  var length = this.readInt8();\n  if (length === 0) {\n    return 0;\n  }\n\n  var result = 0;\n  var sign = this.readInt8() ? -1 : 1; // 'isNegative' flag byte\n  var d = 0;\n  var H = 0;\n  var M = 0;\n  var S = 0;\n  var ms = 0;\n  if (length > 6) {\n    d = this.readInt32();\n    H = this.readInt8();\n    M = this.readInt8();\n    S = this.readInt8();\n  }\n  if (length > 10) {\n    ms = this.readInt32();\n  }\n\n  if (convertTtoMs) {\n    H += d * 24;\n    M += H * 60;\n    S += M * 60;\n    ms += S * 1000;\n    ms *= sign;\n    return ms;\n  }\n  return (sign === -1 ? '-' : '') + [(d ? (d * 24) + H : H), leftPad(2, M), leftPad(2, S)].join(':') + (ms ? '.' + ms : '');\n};\n\nPacket.prototype.readLengthCodedString = function (encoding) {\n  var len = this.readLengthCodedNumber();\n  // TODO: check manually first byte here to avoid polymorphic return type?\n  if (len === null) {\n    return null;\n  }\n  this.offset += len;\n\n  // TODO: Use characterSetCode to get proper encoding\n  // https://github.com/sidorares/node-mysql2/pull/374\n  return StringParser.decode(this.buffer.slice(this.offset - len, this.offset), encoding);\n};\n\nPacket.prototype.readLengthCodedBuffer = function () {\n  var len = this.readLengthCodedNumber();\n  return this.readBuffer(len);\n};\n\nPacket.prototype.readNullTerminatedString = function (encoding) {\n  var start = this.offset;\n  var end = this.offset;\n  while (this.buffer[end]) {\n    end = end + 1; // TODO: handle OOB check\n  }\n  this.offset = end + 1;\n  return StringParser.decode(this.buffer.slice(start, end), encoding);\n};\n\n// TODO reuse?\nPacket.prototype.readString = function (len, encoding) {\n  if (typeof len == 'undefined') {\n    len = this.end - this.offset;\n  }\n  this.offset += len;\n  return StringParser.decode(this.buffer.slice(this.offset - len, this.offset), encoding);\n};\n\n// The whole reason parse* function below exist\n// is because String creation is relatively expensive (at least with V8), and if we have\n// a buffer with \"12345\" content ideally we would like to bypass intermediate\n// \"12345\" string creation and directly build 12345 number out of\n// <Buffer 31 32 33 34 35> data.\n// In my benchmarks the difference is ~25M 8-digit numbers per second vs\n// 4.5 M using Number(packet.readLengthCodedString())\n// not used when size is close to max precision as series of *10 accumulate error\n// and approximate result mihgt be diffreent from (approximate as well) Number(bigNumStringValue))\n// In the futire node version if speed difference is smaller parse* functions might be removed\n// don't consider them as Packet public API\n\nvar minus = '-'.charCodeAt(0);\nvar plus = '+'.charCodeAt(0);\n\nPacket.prototype.parseInt = function (len, supportBigNumbers) {\n\n  if (len === null) {\n    return null;\n  }\n\n  if (len >= 14 && !supportBigNumbers) {\n    var s = this.buffer.toString('ascii', this.offset, this.offset + len);\n    this.offset += len;\n    return Number(s);\n  }\n\n  var result = 0;\n  var start = this.offset;\n  var end = this.offset + len;\n  var sign = 1;\n  if (len === 0) {\n    return 0; // TODO: assert? exception?\n  }\n\n  if (this.buffer[this.offset] == minus) {\n    this.offset++;\n    sign = -1;\n  }\n\n  // max precise int is 9007199254740992\n  var str;\n  var numDigits = end - this.offset;\n  if (supportBigNumbers) {\n    if (numDigits >= 15) {\n      str = this.readString(end - this.offset, 'binary');\n      result = parseInt(str, 10);\n      if (result.toString() == str) {\n        return sign * result;\n      } else {\n        return sign == -1 ? '-' + str : str;\n      }\n    } else if (numDigits > 16) {\n      str = this.readString(end - this.offset);\n      return sign == -1 ? '-' + str : str;\n    }\n  }\n\n  if (this.buffer[this.offset] == plus) {\n    this.offset++; // just ignore\n  }\n  while (this.offset < end) {\n    result *= 10;\n    result += this.buffer[this.offset] - 48;\n    this.offset++;\n  }\n  var num = result * sign;\n  if (!supportBigNumbers) {\n    return num;\n  }\n  str = this.buffer.toString('ascii', start, end);\n  if (num.toString() == str) {\n    return num;\n  } else {\n    return str;\n  }\n};\n\n// note that if value of inputNumberAsString is bigger than MAX_SAFE_INTEGER\n// ( or smaller than MIN_SAFE_INTEGER ) the parseIntNoBigCheck result might be\n// different from what you would get from Number(inputNumberAsString)\n// String(parseIntNoBigCheck) <> String(Number(inputNumberAsString)) <> inputNumberAsString\nPacket.prototype.parseIntNoBigCheck = function (len) {\n  if (len === null) {\n    return null;\n  }\n  var result = 0;\n  var end = this.offset + len;\n  var sign = 1;\n  if (len === 0) {\n    return 0; // TODO: assert? exception?\n  }\n\n  if (this.buffer[this.offset] == minus) {\n    this.offset++;\n    sign = -1;\n  }\n  if (this.buffer[this.offset] == plus) {\n    this.offset++; // just ignore\n  }\n  while (this.offset < end) {\n    result *= 10;\n    result += this.buffer[this.offset] - 48;\n    this.offset++;\n  }\n  return result * sign;\n};\n\n// copy-paste from https://github.com/mysqljs/mysql/blob/master/lib/protocol/Parser.js\nPacket.prototype.parseGeometryValue = function () {\n  var buffer = this.readLengthCodedBuffer();\n  var offset = 4;\n\n  if (buffer === null || !buffer.length) {\n    return null;\n  }\n\n  function parseGeometry () {\n    var x, y, i, j, numPoints, line;\n    var result = null;\n    var byteOrder = buffer.readUInt8(offset); offset += 1;\n    var wkbType = byteOrder ? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset); offset += 4;\n    switch (wkbType) {\n    case 1: // WKBPoint\n      x = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;\n      y = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;\n      result = {x: x, y: y};\n      break;\n    case 2: // WKBLineString\n      numPoints = byteOrder ? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset); offset += 4;\n      result = [];\n      for (i = numPoints;i > 0;i--) {\n        x = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;\n        y = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;\n        result.push({x: x, y: y});\n      }\n      break;\n    case 3: // WKBPolygon\n      var numRings = byteOrder ? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset); offset += 4;\n      result = [];\n      for (i = numRings;i > 0;i--) {\n        numPoints = byteOrder ? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset); offset += 4;\n        line = [];\n        for (j = numPoints;j > 0;j--) {\n          x = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;\n          y = byteOrder ? buffer.readDoubleLE(offset) : buffer.readDoubleBE(offset); offset += 8;\n          line.push({x: x, y: y});\n        }\n        result.push(line);\n      }\n      break;\n    case 4: // WKBMultiPoint\n    case 5: // WKBMultiLineString\n    case 6: // WKBMultiPolygon\n    case 7: // WKBGeometryCollection\n      var num = byteOrder ? buffer.readUInt32LE(offset) : buffer.readUInt32BE(offset); offset += 4;\n      result = [];\n      for (i = num;i > 0;i--) {\n        result.push(parseGeometry());\n      }\n      break;\n    }\n    return result;\n  }\n  return parseGeometry();\n};\n\nPacket.prototype.parseDate = function () {\n  var strLen = this.readLengthCodedNumber();\n  if (strLen === null) {\n    return null;\n  }\n\n  if (strLen != 10) {\n    // we expect only YYYY-MM-DD here.\n    // if for some reason it's not the case return invalid date\n    return new Date(NaN);\n  }\n  var y = this.parseInt(4);\n  this.offset++; // -\n  var m = this.parseInt(2);\n  this.offset++; // -\n  var d = this.parseInt(2);\n  return new Date(y, m - 1, d);\n};\n\nPacket.prototype.parseDateTime = function () {\n  var str = this.readLengthCodedString('binary');\n  if (str === null) {\n    return null;\n  }\n  return new Date(str);\n};\n\n\n// TODO: handle E notation\nvar dot = '.'.charCodeAt(0);\nvar exponent = 'e'.charCodeAt(0);\nvar exponentCapital = 'E'.charCodeAt(0);\nPacket.prototype.parseFloat = function (len) {\n\n  if (len === null) {\n    return null;\n  }\n\n  var result = 0;\n  var end = this.offset + len;\n  var factor = 1;\n  var pastDot = false;\n  var charCode = 0;\n  if (len === 0) {\n    return 0; // TODO: assert? exception?\n  }\n\n  if (this.buffer[this.offset] == minus) {\n    this.offset++;\n    factor = -1;\n  }\n\n  if (this.buffer[this.offset] == plus) {\n    this.offset++; // just ignore\n  }\n\n  while (this.offset < end) {\n    charCode = this.buffer[this.offset];\n    if (charCode == dot) {\n      pastDot = true;\n      this.offset++;\n    } else if (charCode == exponent || charCode == exponentCapital) {\n      this.offset++;\n      var exponentValue = this.parseInt(end - this.offset);\n      return (result / factor) * Math.pow(10, exponentValue);\n    } else {\n      result *= 10;\n      result += this.buffer[this.offset] - 48;\n      this.offset++;\n      if (pastDot) {\n        factor = factor * 10;\n      }\n    }\n  }\n  return result / factor;\n};\n\nPacket.prototype.parseLengthCodedIntNoBigCheck = function () {\n  return this.parseIntNoBigCheck(this.readLengthCodedNumber());\n};\n\nPacket.prototype.parseLengthCodedInt = function (supportBigNumbers) {\n  return this.parseInt(this.readLengthCodedNumber(), supportBigNumbers);\n};\n\nPacket.prototype.parseLengthCodedIntString = function () {\n  return this.readString(this.readLengthCodedNumber(), 'binary');\n};\n\nPacket.prototype.parseLengthCodedFloat = function () {\n  return this.parseFloat(this.readLengthCodedNumber());\n};\n\nPacket.prototype.peekByte = function () {\n  return this.buffer[this.offset];\n};\n\n// OxFE is often used as \"Alt\" flag - not ok, not error.\n// For example, it's first byte of AuthSwitchRequest\nPacket.prototype.isAlt = function () {\n  return this.peekByte() == 0xfe;\n};\n\nPacket.prototype.isError = function () {\n  return this.peekByte() == 0xff;\n};\n\nPacket.prototype.asError = function (encoding) {\n  this.reset();\n\n  var fieldCount = this.readInt8();\n  var errorCode = this.readInt16();\n  var sqlState = '';\n  if (this.buffer[this.offset] == 0x23) {\n    sqlState = this.readBuffer(6).toString();\n  }\n  var message = this.readString(undefined, encoding);\n  var err = new Error(message);\n  err.code = ErrorCodeToName[errorCode];\n  err.errno = errorCode;\n  err.sqlState = sqlState;\n  return err;\n};\n\n\nPacket.lengthCodedNumberLength = function (n) {\n  if (n < 0xfb) {\n    return 1;\n  }\n\n  if (n < 0xffff) {\n    return 3;\n  }\n\n  if (n < 0xffffff) {\n    return 5;\n  } else {\n    return 9;\n  }\n};\n\nPacket.lengthCodedStringLength = function (str, encoding) {\n  var buf = StringParser.encode(str, encoding);\n  var slen = buf.length;\n  return Packet.lengthCodedNumberLength(slen) + slen;\n};\n\nPacket.prototype.writeInt32 = function (n) {\n  this.buffer.writeUInt32LE(n, this.offset);\n  this.offset += 4;\n};\n\nPacket.prototype.writeInt24 = function (n) {\n  this.writeInt8(n & 0xff);\n  this.writeInt16(n >> 8);\n};\n\nPacket.prototype.writeInt16 = function (n) {\n  this.buffer.writeUInt16LE(n, this.offset);\n  this.offset += 2;\n};\n\nPacket.prototype.writeInt8 = function (n) {\n  this.buffer.writeUInt8(n, this.offset);\n  this.offset++;\n};\n\nPacket.prototype.writeBuffer = function (b) {\n  b.copy(this.buffer, this.offset);\n  this.offset += b.length;\n};\n\nPacket.prototype.writeNull = function () {\n  this.buffer[this.offset] = 0xfb;\n  this.offset++;\n};\n\n// TODO: refactor following three?\nPacket.prototype.writeNullTerminatedString = function (s, encoding) {\n  var buf = StringParser.encode(s, encoding);\n  this.buffer.length && buf.copy(this.buffer, this.offset);\n  this.offset += buf.length;\n  this.writeInt8(0);\n};\n\nPacket.prototype.writeString = function (s, encoding) {\n  if (s === null) {\n    this.writeInt8(0xfb);\n\n    return;\n  }\n\n  if (s.length === 0) {\n    return;\n  }\n\n  // var bytes = Buffer.byteLength(s, 'utf8');\n  // this.buffer.write(s, this.offset, bytes, 'utf8');\n  // this.offset += bytes;\n\n  var buf = StringParser.encode(s, encoding);\n  this.buffer.length && buf.copy(this.buffer, this.offset);\n  this.offset += buf.length;\n};\n\nPacket.prototype.writeLengthCodedString = function (s, encoding) {\n  var buf = StringParser.encode(s, encoding);\n  this.writeLengthCodedNumber(buf.length);\n  this.buffer.length && buf.copy(this.buffer, this.offset);\n  this.offset += buf.length;\n};\n\nPacket.prototype.writeLengthCodedBuffer = function (b) {\n  this.writeLengthCodedNumber(b.length);\n  b.copy(this.buffer, this.offset);\n  this.offset += b.length;\n};\n\nPacket.prototype.writeLengthCodedNumber = function (n) {\n  if (n < 0xfb) {\n    return this.writeInt8(n);\n  }\n\n  if (n < 0xffff) {\n    this.writeInt8(0xfc);\n    return this.writeInt16(n);\n  }\n\n  if (n < 0xffffff) {\n    this.writeInt8(0xfd);\n    return this.writeInt24(n);\n  }\n\n  if (n === null) {\n    return this.writeInt8(0xfb);\n  }\n\n  // TODO: check that n is out of int precision\n  this.writeInt8(0xfe);\n  this.buffer.writeUInt32LE(n, this.offset);\n  this.offset += 4;\n  this.buffer.writeUInt32LE(n >> 32, this.offset);\n  this.offset += 4;\n  return this.offset;\n};\n\nPacket.prototype.writeHeader = function (sequenceId) {\n  var offset = this.offset;\n  this.offset = 0;\n  this.writeInt24(this.buffer.length - 4);\n  this.writeInt8(sequenceId);\n  this.offset = offset;\n};\n\nPacket.prototype.clone = function () {\n  return new Packet(this.sequenceId, this.buffer, this.start, this.end);\n};\n\nPacket.prototype.type = function () {\n  if (this.isEOF()) {\n    return 'EOF';\n  }\n\n  if (this.isError()) {\n    return 'Error';\n  }\n\n  if (this.buffer[this.offset] == 0) {\n    return 'maybeOK'; // could be other packet types as well\n  }\n\n  return '';\n};\n\nPacket.MockBuffer = function () {\n  var noop = function () {};\n  var res = Buffer.alloc(0);\n  for (var op in NativeBuffer.prototype) {\n    if (typeof res[op] == 'function') {\n      res[op] = noop;\n    }\n  }\n  return res;\n};\n\nmodule.exports = Packet;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/constants/errors.js":"// copy from https://raw.githubusercontent.com/mysqljs/mysql/7770ee5bb13260c56a160b91fe480d9165dbeeba/lib/protocol/constants/errors.js\n// (c) node-mysql authors\n\n/**\n * MySQL error constants\n *\n * !! Generated by generate-error-constants.js, do not modify by hand !!\n */\n\nexports.EE_CANTCREATEFILE = 1;\nexports.EE_READ = 2;\nexports.EE_WRITE = 3;\nexports.EE_BADCLOSE = 4;\nexports.EE_OUTOFMEMORY = 5;\nexports.EE_DELETE = 6;\nexports.EE_LINK = 7;\nexports.EE_EOFERR = 9;\nexports.EE_CANTLOCK = 10;\nexports.EE_CANTUNLOCK = 11;\nexports.EE_DIR = 12;\nexports.EE_STAT = 13;\nexports.EE_CANT_CHSIZE = 14;\nexports.EE_CANT_OPEN_STREAM = 15;\nexports.EE_GETWD = 16;\nexports.EE_SETWD = 17;\nexports.EE_LINK_WARNING = 18;\nexports.EE_OPEN_WARNING = 19;\nexports.EE_DISK_FULL = 20;\nexports.EE_CANT_MKDIR = 21;\nexports.EE_UNKNOWN_CHARSET = 22;\nexports.EE_OUT_OF_FILERESOURCES = 23;\nexports.EE_CANT_READLINK = 24;\nexports.EE_CANT_SYMLINK = 25;\nexports.EE_REALPATH = 26;\nexports.EE_SYNC = 27;\nexports.EE_UNKNOWN_COLLATION = 28;\nexports.EE_FILENOTFOUND = 29;\nexports.EE_FILE_NOT_CLOSED = 30;\nexports.EE_CHANGE_OWNERSHIP = 31;\nexports.EE_CHANGE_PERMISSIONS = 32;\nexports.EE_CANT_SEEK = 33;\nexports.HA_ERR_KEY_NOT_FOUND = 120;\nexports.HA_ERR_FOUND_DUPP_KEY = 121;\nexports.HA_ERR_INTERNAL_ERROR = 122;\nexports.HA_ERR_RECORD_CHANGED = 123;\nexports.HA_ERR_WRONG_INDEX = 124;\nexports.HA_ERR_CRASHED = 126;\nexports.HA_ERR_WRONG_IN_RECORD = 127;\nexports.HA_ERR_OUT_OF_MEM = 128;\nexports.HA_ERR_NOT_A_TABLE = 130;\nexports.HA_ERR_WRONG_COMMAND = 131;\nexports.HA_ERR_OLD_FILE = 132;\nexports.HA_ERR_NO_ACTIVE_RECORD = 133;\nexports.HA_ERR_RECORD_DELETED = 134;\nexports.HA_ERR_RECORD_FILE_FULL = 135;\nexports.HA_ERR_INDEX_FILE_FULL = 136;\nexports.HA_ERR_END_OF_FILE = 137;\nexports.HA_ERR_UNSUPPORTED = 138;\nexports.HA_ERR_TO_BIG_ROW = 139;\nexports.HA_WRONG_CREATE_OPTION = 140;\nexports.HA_ERR_FOUND_DUPP_UNIQUE = 141;\nexports.HA_ERR_UNKNOWN_CHARSET = 142;\nexports.HA_ERR_WRONG_MRG_TABLE_DEF = 143;\nexports.HA_ERR_CRASHED_ON_REPAIR = 144;\nexports.HA_ERR_CRASHED_ON_USAGE = 145;\nexports.HA_ERR_LOCK_WAIT_TIMEOUT = 146;\nexports.HA_ERR_LOCK_TABLE_FULL = 147;\nexports.HA_ERR_READ_ONLY_TRANSACTION = 148;\nexports.HA_ERR_LOCK_DEADLOCK = 149;\nexports.HA_ERR_CANNOT_ADD_FOREIGN = 150;\nexports.HA_ERR_NO_REFERENCED_ROW = 151;\nexports.HA_ERR_ROW_IS_REFERENCED = 152;\nexports.HA_ERR_NO_SAVEPOINT = 153;\nexports.HA_ERR_NON_UNIQUE_BLOCK_SIZE = 154;\nexports.HA_ERR_NO_SUCH_TABLE = 155;\nexports.HA_ERR_TABLE_EXIST = 156;\nexports.HA_ERR_NO_CONNECTION = 157;\nexports.HA_ERR_NULL_IN_SPATIAL = 158;\nexports.HA_ERR_TABLE_DEF_CHANGED = 159;\nexports.HA_ERR_NO_PARTITION_FOUND = 160;\nexports.HA_ERR_RBR_LOGGING_FAILED = 161;\nexports.HA_ERR_DROP_INDEX_FK = 162;\nexports.HA_ERR_FOREIGN_DUPLICATE_KEY = 163;\nexports.HA_ERR_TABLE_NEEDS_UPGRADE = 164;\nexports.HA_ERR_TABLE_READONLY = 165;\nexports.HA_ERR_AUTOINC_READ_FAILED = 166;\nexports.HA_ERR_AUTOINC_ERANGE = 167;\nexports.HA_ERR_GENERIC = 168;\nexports.HA_ERR_RECORD_IS_THE_SAME = 169;\nexports.HA_ERR_LOGGING_IMPOSSIBLE = 170;\nexports.HA_ERR_CORRUPT_EVENT = 171;\nexports.HA_ERR_NEW_FILE = 172;\nexports.HA_ERR_ROWS_EVENT_APPLY = 173;\nexports.HA_ERR_INITIALIZATION = 174;\nexports.HA_ERR_FILE_TOO_SHORT = 175;\nexports.HA_ERR_WRONG_CRC = 176;\nexports.HA_ERR_TOO_MANY_CONCURRENT_TRXS = 177;\nexports.HA_ERR_NOT_IN_LOCK_PARTITIONS = 178;\nexports.HA_ERR_INDEX_COL_TOO_LONG = 179;\nexports.HA_ERR_INDEX_CORRUPT = 180;\nexports.HA_ERR_UNDO_REC_TOO_BIG = 181;\nexports.HA_FTS_INVALID_DOCID = 182;\nexports.HA_ERR_TABLE_IN_FK_CHECK = 183;\nexports.HA_ERR_TABLESPACE_EXISTS = 184;\nexports.HA_ERR_TOO_MANY_FIELDS = 185;\nexports.HA_ERR_ROW_IN_WRONG_PARTITION = 186;\nexports.HA_ERR_INNODB_READ_ONLY = 187;\nexports.HA_ERR_FTS_EXCEED_RESULT_CACHE_LIMIT = 188;\nexports.HA_ERR_TEMP_FILE_WRITE_FAILURE = 189;\nexports.HA_ERR_INNODB_FORCED_RECOVERY = 190;\nexports.HA_ERR_FTS_TOO_MANY_WORDS_IN_PHRASE = 191;\nexports.ER_HASHCHK = 1000;\nexports.ER_NISAMCHK = 1001;\nexports.ER_NO = 1002;\nexports.ER_YES = 1003;\nexports.ER_CANT_CREATE_FILE = 1004;\nexports.ER_CANT_CREATE_TABLE = 1005;\nexports.ER_CANT_CREATE_DB = 1006;\nexports.ER_DB_CREATE_EXISTS = 1007;\nexports.ER_DB_DROP_EXISTS = 1008;\nexports.ER_DB_DROP_DELETE = 1009;\nexports.ER_DB_DROP_RMDIR = 1010;\nexports.ER_CANT_DELETE_FILE = 1011;\nexports.ER_CANT_FIND_SYSTEM_REC = 1012;\nexports.ER_CANT_GET_STAT = 1013;\nexports.ER_CANT_GET_WD = 1014;\nexports.ER_CANT_LOCK = 1015;\nexports.ER_CANT_OPEN_FILE = 1016;\nexports.ER_FILE_NOT_FOUND = 1017;\nexports.ER_CANT_READ_DIR = 1018;\nexports.ER_CANT_SET_WD = 1019;\nexports.ER_CHECKREAD = 1020;\nexports.ER_DISK_FULL = 1021;\nexports.ER_DUP_KEY = 1022;\nexports.ER_ERROR_ON_CLOSE = 1023;\nexports.ER_ERROR_ON_READ = 1024;\nexports.ER_ERROR_ON_RENAME = 1025;\nexports.ER_ERROR_ON_WRITE = 1026;\nexports.ER_FILE_USED = 1027;\nexports.ER_FILSORT_ABORT = 1028;\nexports.ER_FORM_NOT_FOUND = 1029;\nexports.ER_GET_ERRNO = 1030;\nexports.ER_ILLEGAL_HA = 1031;\nexports.ER_KEY_NOT_FOUND = 1032;\nexports.ER_NOT_FORM_FILE = 1033;\nexports.ER_NOT_KEYFILE = 1034;\nexports.ER_OLD_KEYFILE = 1035;\nexports.ER_OPEN_AS_READONLY = 1036;\nexports.ER_OUTOFMEMORY = 1037;\nexports.ER_OUT_OF_SORTMEMORY = 1038;\nexports.ER_UNEXPECTED_EOF = 1039;\nexports.ER_CON_COUNT_ERROR = 1040;\nexports.ER_OUT_OF_RESOURCES = 1041;\nexports.ER_BAD_HOST_ERROR = 1042;\nexports.ER_HANDSHAKE_ERROR = 1043;\nexports.ER_DBACCESS_DENIED_ERROR = 1044;\nexports.ER_ACCESS_DENIED_ERROR = 1045;\nexports.ER_NO_DB_ERROR = 1046;\nexports.ER_UNKNOWN_COM_ERROR = 1047;\nexports.ER_BAD_NULL_ERROR = 1048;\nexports.ER_BAD_DB_ERROR = 1049;\nexports.ER_TABLE_EXISTS_ERROR = 1050;\nexports.ER_BAD_TABLE_ERROR = 1051;\nexports.ER_NON_UNIQ_ERROR = 1052;\nexports.ER_SERVER_SHUTDOWN = 1053;\nexports.ER_BAD_FIELD_ERROR = 1054;\nexports.ER_WRONG_FIELD_WITH_GROUP = 1055;\nexports.ER_WRONG_GROUP_FIELD = 1056;\nexports.ER_WRONG_SUM_SELECT = 1057;\nexports.ER_WRONG_VALUE_COUNT = 1058;\nexports.ER_TOO_LONG_IDENT = 1059;\nexports.ER_DUP_FIELDNAME = 1060;\nexports.ER_DUP_KEYNAME = 1061;\nexports.ER_DUP_ENTRY = 1062;\nexports.ER_WRONG_FIELD_SPEC = 1063;\nexports.ER_PARSE_ERROR = 1064;\nexports.ER_EMPTY_QUERY = 1065;\nexports.ER_NONUNIQ_TABLE = 1066;\nexports.ER_INVALID_DEFAULT = 1067;\nexports.ER_MULTIPLE_PRI_KEY = 1068;\nexports.ER_TOO_MANY_KEYS = 1069;\nexports.ER_TOO_MANY_KEY_PARTS = 1070;\nexports.ER_TOO_LONG_KEY = 1071;\nexports.ER_KEY_COLUMN_DOES_NOT_EXITS = 1072;\nexports.ER_BLOB_USED_AS_KEY = 1073;\nexports.ER_TOO_BIG_FIELDLENGTH = 1074;\nexports.ER_WRONG_AUTO_KEY = 1075;\nexports.ER_READY = 1076;\nexports.ER_NORMAL_SHUTDOWN = 1077;\nexports.ER_GOT_SIGNAL = 1078;\nexports.ER_SHUTDOWN_COMPLETE = 1079;\nexports.ER_FORCING_CLOSE = 1080;\nexports.ER_IPSOCK_ERROR = 1081;\nexports.ER_NO_SUCH_INDEX = 1082;\nexports.ER_WRONG_FIELD_TERMINATORS = 1083;\nexports.ER_BLOBS_AND_NO_TERMINATED = 1084;\nexports.ER_TEXTFILE_NOT_READABLE = 1085;\nexports.ER_FILE_EXISTS_ERROR = 1086;\nexports.ER_LOAD_INFO = 1087;\nexports.ER_ALTER_INFO = 1088;\nexports.ER_WRONG_SUB_KEY = 1089;\nexports.ER_CANT_REMOVE_ALL_FIELDS = 1090;\nexports.ER_CANT_DROP_FIELD_OR_KEY = 1091;\nexports.ER_INSERT_INFO = 1092;\nexports.ER_UPDATE_TABLE_USED = 1093;\nexports.ER_NO_SUCH_THREAD = 1094;\nexports.ER_KILL_DENIED_ERROR = 1095;\nexports.ER_NO_TABLES_USED = 1096;\nexports.ER_TOO_BIG_SET = 1097;\nexports.ER_NO_UNIQUE_LOGFILE = 1098;\nexports.ER_TABLE_NOT_LOCKED_FOR_WRITE = 1099;\nexports.ER_TABLE_NOT_LOCKED = 1100;\nexports.ER_BLOB_CANT_HAVE_DEFAULT = 1101;\nexports.ER_WRONG_DB_NAME = 1102;\nexports.ER_WRONG_TABLE_NAME = 1103;\nexports.ER_TOO_BIG_SELECT = 1104;\nexports.ER_UNKNOWN_ERROR = 1105;\nexports.ER_UNKNOWN_PROCEDURE = 1106;\nexports.ER_WRONG_PARAMCOUNT_TO_PROCEDURE = 1107;\nexports.ER_WRONG_PARAMETERS_TO_PROCEDURE = 1108;\nexports.ER_UNKNOWN_TABLE = 1109;\nexports.ER_FIELD_SPECIFIED_TWICE = 1110;\nexports.ER_INVALID_GROUP_FUNC_USE = 1111;\nexports.ER_UNSUPPORTED_EXTENSION = 1112;\nexports.ER_TABLE_MUST_HAVE_COLUMNS = 1113;\nexports.ER_RECORD_FILE_FULL = 1114;\nexports.ER_UNKNOWN_CHARACTER_SET = 1115;\nexports.ER_TOO_MANY_TABLES = 1116;\nexports.ER_TOO_MANY_FIELDS = 1117;\nexports.ER_TOO_BIG_ROWSIZE = 1118;\nexports.ER_STACK_OVERRUN = 1119;\nexports.ER_WRONG_OUTER_JOIN = 1120;\nexports.ER_NULL_COLUMN_IN_INDEX = 1121;\nexports.ER_CANT_FIND_UDF = 1122;\nexports.ER_CANT_INITIALIZE_UDF = 1123;\nexports.ER_UDF_NO_PATHS = 1124;\nexports.ER_UDF_EXISTS = 1125;\nexports.ER_CANT_OPEN_LIBRARY = 1126;\nexports.ER_CANT_FIND_DL_ENTRY = 1127;\nexports.ER_FUNCTION_NOT_DEFINED = 1128;\nexports.ER_HOST_IS_BLOCKED = 1129;\nexports.ER_HOST_NOT_PRIVILEGED = 1130;\nexports.ER_PASSWORD_ANONYMOUS_USER = 1131;\nexports.ER_PASSWORD_NOT_ALLOWED = 1132;\nexports.ER_PASSWORD_NO_MATCH = 1133;\nexports.ER_UPDATE_INFO = 1134;\nexports.ER_CANT_CREATE_THREAD = 1135;\nexports.ER_WRONG_VALUE_COUNT_ON_ROW = 1136;\nexports.ER_CANT_REOPEN_TABLE = 1137;\nexports.ER_INVALID_USE_OF_NULL = 1138;\nexports.ER_REGEXP_ERROR = 1139;\nexports.ER_MIX_OF_GROUP_FUNC_AND_FIELDS = 1140;\nexports.ER_NONEXISTING_GRANT = 1141;\nexports.ER_TABLEACCESS_DENIED_ERROR = 1142;\nexports.ER_COLUMNACCESS_DENIED_ERROR = 1143;\nexports.ER_ILLEGAL_GRANT_FOR_TABLE = 1144;\nexports.ER_GRANT_WRONG_HOST_OR_USER = 1145;\nexports.ER_NO_SUCH_TABLE = 1146;\nexports.ER_NONEXISTING_TABLE_GRANT = 1147;\nexports.ER_NOT_ALLOWED_COMMAND = 1148;\nexports.ER_SYNTAX_ERROR = 1149;\nexports.ER_DELAYED_CANT_CHANGE_LOCK = 1150;\nexports.ER_TOO_MANY_DELAYED_THREADS = 1151;\nexports.ER_ABORTING_CONNECTION = 1152;\nexports.ER_NET_PACKET_TOO_LARGE = 1153;\nexports.ER_NET_READ_ERROR_FROM_PIPE = 1154;\nexports.ER_NET_FCNTL_ERROR = 1155;\nexports.ER_NET_PACKETS_OUT_OF_ORDER = 1156;\nexports.ER_NET_UNCOMPRESS_ERROR = 1157;\nexports.ER_NET_READ_ERROR = 1158;\nexports.ER_NET_READ_INTERRUPTED = 1159;\nexports.ER_NET_ERROR_ON_WRITE = 1160;\nexports.ER_NET_WRITE_INTERRUPTED = 1161;\nexports.ER_TOO_LONG_STRING = 1162;\nexports.ER_TABLE_CANT_HANDLE_BLOB = 1163;\nexports.ER_TABLE_CANT_HANDLE_AUTO_INCREMENT = 1164;\nexports.ER_DELAYED_INSERT_TABLE_LOCKED = 1165;\nexports.ER_WRONG_COLUMN_NAME = 1166;\nexports.ER_WRONG_KEY_COLUMN = 1167;\nexports.ER_WRONG_MRG_TABLE = 1168;\nexports.ER_DUP_UNIQUE = 1169;\nexports.ER_BLOB_KEY_WITHOUT_LENGTH = 1170;\nexports.ER_PRIMARY_CANT_HAVE_NULL = 1171;\nexports.ER_TOO_MANY_ROWS = 1172;\nexports.ER_REQUIRES_PRIMARY_KEY = 1173;\nexports.ER_NO_RAID_COMPILED = 1174;\nexports.ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE = 1175;\nexports.ER_KEY_DOES_NOT_EXITS = 1176;\nexports.ER_CHECK_NO_SUCH_TABLE = 1177;\nexports.ER_CHECK_NOT_IMPLEMENTED = 1178;\nexports.ER_CANT_DO_THIS_DURING_AN_TRANSACTION = 1179;\nexports.ER_ERROR_DURING_COMMIT = 1180;\nexports.ER_ERROR_DURING_ROLLBACK = 1181;\nexports.ER_ERROR_DURING_FLUSH_LOGS = 1182;\nexports.ER_ERROR_DURING_CHECKPOINT = 1183;\nexports.ER_NEW_ABORTING_CONNECTION = 1184;\nexports.ER_DUMP_NOT_IMPLEMENTED = 1185;\nexports.ER_FLUSH_MASTER_BINLOG_CLOSED = 1186;\nexports.ER_INDEX_REBUILD = 1187;\nexports.ER_MASTER = 1188;\nexports.ER_MASTER_NET_READ = 1189;\nexports.ER_MASTER_NET_WRITE = 1190;\nexports.ER_FT_MATCHING_KEY_NOT_FOUND = 1191;\nexports.ER_LOCK_OR_ACTIVE_TRANSACTION = 1192;\nexports.ER_UNKNOWN_SYSTEM_VARIABLE = 1193;\nexports.ER_CRASHED_ON_USAGE = 1194;\nexports.ER_CRASHED_ON_REPAIR = 1195;\nexports.ER_WARNING_NOT_COMPLETE_ROLLBACK = 1196;\nexports.ER_TRANS_CACHE_FULL = 1197;\nexports.ER_SLAVE_MUST_STOP = 1198;\nexports.ER_SLAVE_NOT_RUNNING = 1199;\nexports.ER_BAD_SLAVE = 1200;\nexports.ER_MASTER_INFO = 1201;\nexports.ER_SLAVE_THREAD = 1202;\nexports.ER_TOO_MANY_USER_CONNECTIONS = 1203;\nexports.ER_SET_CONSTANTS_ONLY = 1204;\nexports.ER_LOCK_WAIT_TIMEOUT = 1205;\nexports.ER_LOCK_TABLE_FULL = 1206;\nexports.ER_READ_ONLY_TRANSACTION = 1207;\nexports.ER_DROP_DB_WITH_READ_LOCK = 1208;\nexports.ER_CREATE_DB_WITH_READ_LOCK = 1209;\nexports.ER_WRONG_ARGUMENTS = 1210;\nexports.ER_NO_PERMISSION_TO_CREATE_USER = 1211;\nexports.ER_UNION_TABLES_IN_DIFFERENT_DIR = 1212;\nexports.ER_LOCK_DEADLOCK = 1213;\nexports.ER_TABLE_CANT_HANDLE_FT = 1214;\nexports.ER_CANNOT_ADD_FOREIGN = 1215;\nexports.ER_NO_REFERENCED_ROW = 1216;\nexports.ER_ROW_IS_REFERENCED = 1217;\nexports.ER_CONNECT_TO_MASTER = 1218;\nexports.ER_QUERY_ON_MASTER = 1219;\nexports.ER_ERROR_WHEN_EXECUTING_COMMAND = 1220;\nexports.ER_WRONG_USAGE = 1221;\nexports.ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT = 1222;\nexports.ER_CANT_UPDATE_WITH_READLOCK = 1223;\nexports.ER_MIXING_NOT_ALLOWED = 1224;\nexports.ER_DUP_ARGUMENT = 1225;\nexports.ER_USER_LIMIT_REACHED = 1226;\nexports.ER_SPECIFIC_ACCESS_DENIED_ERROR = 1227;\nexports.ER_LOCAL_VARIABLE = 1228;\nexports.ER_GLOBAL_VARIABLE = 1229;\nexports.ER_NO_DEFAULT = 1230;\nexports.ER_WRONG_VALUE_FOR_VAR = 1231;\nexports.ER_WRONG_TYPE_FOR_VAR = 1232;\nexports.ER_VAR_CANT_BE_READ = 1233;\nexports.ER_CANT_USE_OPTION_HERE = 1234;\nexports.ER_NOT_SUPPORTED_YET = 1235;\nexports.ER_MASTER_FATAL_ERROR_READING_BINLOG = 1236;\nexports.ER_SLAVE_IGNORED_TABLE = 1237;\nexports.ER_INCORRECT_GLOBAL_LOCAL_VAR = 1238;\nexports.ER_WRONG_FK_DEF = 1239;\nexports.ER_KEY_REF_DO_NOT_MATCH_TABLE_REF = 1240;\nexports.ER_OPERAND_COLUMNS = 1241;\nexports.ER_SUBQUERY_NO_1_ROW = 1242;\nexports.ER_UNKNOWN_STMT_HANDLER = 1243;\nexports.ER_CORRUPT_HELP_DB = 1244;\nexports.ER_CYCLIC_REFERENCE = 1245;\nexports.ER_AUTO_CONVERT = 1246;\nexports.ER_ILLEGAL_REFERENCE = 1247;\nexports.ER_DERIVED_MUST_HAVE_ALIAS = 1248;\nexports.ER_SELECT_REDUCED = 1249;\nexports.ER_TABLENAME_NOT_ALLOWED_HERE = 1250;\nexports.ER_NOT_SUPPORTED_AUTH_MODE = 1251;\nexports.ER_SPATIAL_CANT_HAVE_NULL = 1252;\nexports.ER_COLLATION_CHARSET_MISMATCH = 1253;\nexports.ER_SLAVE_WAS_RUNNING = 1254;\nexports.ER_SLAVE_WAS_NOT_RUNNING = 1255;\nexports.ER_TOO_BIG_FOR_UNCOMPRESS = 1256;\nexports.ER_ZLIB_Z_MEM_ERROR = 1257;\nexports.ER_ZLIB_Z_BUF_ERROR = 1258;\nexports.ER_ZLIB_Z_DATA_ERROR = 1259;\nexports.ER_CUT_VALUE_GROUP_CONCAT = 1260;\nexports.ER_WARN_TOO_FEW_RECORDS = 1261;\nexports.ER_WARN_TOO_MANY_RECORDS = 1262;\nexports.ER_WARN_NULL_TO_NOTNULL = 1263;\nexports.ER_WARN_DATA_OUT_OF_RANGE = 1264;\nexports.WARN_DATA_TRUNCATED = 1265;\nexports.ER_WARN_USING_OTHER_HANDLER = 1266;\nexports.ER_CANT_AGGREGATE_2COLLATIONS = 1267;\nexports.ER_DROP_USER = 1268;\nexports.ER_REVOKE_GRANTS = 1269;\nexports.ER_CANT_AGGREGATE_3COLLATIONS = 1270;\nexports.ER_CANT_AGGREGATE_NCOLLATIONS = 1271;\nexports.ER_VARIABLE_IS_NOT_STRUCT = 1272;\nexports.ER_UNKNOWN_COLLATION = 1273;\nexports.ER_SLAVE_IGNORED_SSL_PARAMS = 1274;\nexports.ER_SERVER_IS_IN_SECURE_AUTH_MODE = 1275;\nexports.ER_WARN_FIELD_RESOLVED = 1276;\nexports.ER_BAD_SLAVE_UNTIL_COND = 1277;\nexports.ER_MISSING_SKIP_SLAVE = 1278;\nexports.ER_UNTIL_COND_IGNORED = 1279;\nexports.ER_WRONG_NAME_FOR_INDEX = 1280;\nexports.ER_WRONG_NAME_FOR_CATALOG = 1281;\nexports.ER_WARN_QC_RESIZE = 1282;\nexports.ER_BAD_FT_COLUMN = 1283;\nexports.ER_UNKNOWN_KEY_CACHE = 1284;\nexports.ER_WARN_HOSTNAME_WONT_WORK = 1285;\nexports.ER_UNKNOWN_STORAGE_ENGINE = 1286;\nexports.ER_WARN_DEPRECATED_SYNTAX = 1287;\nexports.ER_NON_UPDATABLE_TABLE = 1288;\nexports.ER_FEATURE_DISABLED = 1289;\nexports.ER_OPTION_PREVENTS_STATEMENT = 1290;\nexports.ER_DUPLICATED_VALUE_IN_TYPE = 1291;\nexports.ER_TRUNCATED_WRONG_VALUE = 1292;\nexports.ER_TOO_MUCH_AUTO_TIMESTAMP_COLS = 1293;\nexports.ER_INVALID_ON_UPDATE = 1294;\nexports.ER_UNSUPPORTED_PS = 1295;\nexports.ER_GET_ERRMSG = 1296;\nexports.ER_GET_TEMPORARY_ERRMSG = 1297;\nexports.ER_UNKNOWN_TIME_ZONE = 1298;\nexports.ER_WARN_INVALID_TIMESTAMP = 1299;\nexports.ER_INVALID_CHARACTER_STRING = 1300;\nexports.ER_WARN_ALLOWED_PACKET_OVERFLOWED = 1301;\nexports.ER_CONFLICTING_DECLARATIONS = 1302;\nexports.ER_SP_NO_RECURSIVE_CREATE = 1303;\nexports.ER_SP_ALREADY_EXISTS = 1304;\nexports.ER_SP_DOES_NOT_EXIST = 1305;\nexports.ER_SP_DROP_FAILED = 1306;\nexports.ER_SP_STORE_FAILED = 1307;\nexports.ER_SP_LILABEL_MISMATCH = 1308;\nexports.ER_SP_LABEL_REDEFINE = 1309;\nexports.ER_SP_LABEL_MISMATCH = 1310;\nexports.ER_SP_UNINIT_VAR = 1311;\nexports.ER_SP_BADSELECT = 1312;\nexports.ER_SP_BADRETURN = 1313;\nexports.ER_SP_BADSTATEMENT = 1314;\nexports.ER_UPDATE_LOG_DEPRECATED_IGNORED = 1315;\nexports.ER_UPDATE_LOG_DEPRECATED_TRANSLATED = 1316;\nexports.ER_QUERY_INTERRUPTED = 1317;\nexports.ER_SP_WRONG_NO_OF_ARGS = 1318;\nexports.ER_SP_COND_MISMATCH = 1319;\nexports.ER_SP_NORETURN = 1320;\nexports.ER_SP_NORETURNEND = 1321;\nexports.ER_SP_BAD_CURSOR_QUERY = 1322;\nexports.ER_SP_BAD_CURSOR_SELECT = 1323;\nexports.ER_SP_CURSOR_MISMATCH = 1324;\nexports.ER_SP_CURSOR_ALREADY_OPEN = 1325;\nexports.ER_SP_CURSOR_NOT_OPEN = 1326;\nexports.ER_SP_UNDECLARED_VAR = 1327;\nexports.ER_SP_WRONG_NO_OF_FETCH_ARGS = 1328;\nexports.ER_SP_FETCH_NO_DATA = 1329;\nexports.ER_SP_DUP_PARAM = 1330;\nexports.ER_SP_DUP_VAR = 1331;\nexports.ER_SP_DUP_COND = 1332;\nexports.ER_SP_DUP_CURS = 1333;\nexports.ER_SP_CANT_ALTER = 1334;\nexports.ER_SP_SUBSELECT_NYI = 1335;\nexports.ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG = 1336;\nexports.ER_SP_VARCOND_AFTER_CURSHNDLR = 1337;\nexports.ER_SP_CURSOR_AFTER_HANDLER = 1338;\nexports.ER_SP_CASE_NOT_FOUND = 1339;\nexports.ER_FPARSER_TOO_BIG_FILE = 1340;\nexports.ER_FPARSER_BAD_HEADER = 1341;\nexports.ER_FPARSER_EOF_IN_COMMENT = 1342;\nexports.ER_FPARSER_ERROR_IN_PARAMETER = 1343;\nexports.ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER = 1344;\nexports.ER_VIEW_NO_EXPLAIN = 1345;\nexports.ER_FRM_UNKNOWN_TYPE = 1346;\nexports.ER_WRONG_OBJECT = 1347;\nexports.ER_NONUPDATEABLE_COLUMN = 1348;\nexports.ER_VIEW_SELECT_DERIVED = 1349;\nexports.ER_VIEW_SELECT_CLAUSE = 1350;\nexports.ER_VIEW_SELECT_VARIABLE = 1351;\nexports.ER_VIEW_SELECT_TMPTABLE = 1352;\nexports.ER_VIEW_WRONG_LIST = 1353;\nexports.ER_WARN_VIEW_MERGE = 1354;\nexports.ER_WARN_VIEW_WITHOUT_KEY = 1355;\nexports.ER_VIEW_INVALID = 1356;\nexports.ER_SP_NO_DROP_SP = 1357;\nexports.ER_SP_GOTO_IN_HNDLR = 1358;\nexports.ER_TRG_ALREADY_EXISTS = 1359;\nexports.ER_TRG_DOES_NOT_EXIST = 1360;\nexports.ER_TRG_ON_VIEW_OR_TEMP_TABLE = 1361;\nexports.ER_TRG_CANT_CHANGE_ROW = 1362;\nexports.ER_TRG_NO_SUCH_ROW_IN_TRG = 1363;\nexports.ER_NO_DEFAULT_FOR_FIELD = 1364;\nexports.ER_DIVISION_BY_ZERO = 1365;\nexports.ER_TRUNCATED_WRONG_VALUE_FOR_FIELD = 1366;\nexports.ER_ILLEGAL_VALUE_FOR_TYPE = 1367;\nexports.ER_VIEW_NONUPD_CHECK = 1368;\nexports.ER_VIEW_CHECK_FAILED = 1369;\nexports.ER_PROCACCESS_DENIED_ERROR = 1370;\nexports.ER_RELAY_LOG_FAIL = 1371;\nexports.ER_PASSWD_LENGTH = 1372;\nexports.ER_UNKNOWN_TARGET_BINLOG = 1373;\nexports.ER_IO_ERR_LOG_INDEX_READ = 1374;\nexports.ER_BINLOG_PURGE_PROHIBITED = 1375;\nexports.ER_FSEEK_FAIL = 1376;\nexports.ER_BINLOG_PURGE_FATAL_ERR = 1377;\nexports.ER_LOG_IN_USE = 1378;\nexports.ER_LOG_PURGE_UNKNOWN_ERR = 1379;\nexports.ER_RELAY_LOG_INIT = 1380;\nexports.ER_NO_BINARY_LOGGING = 1381;\nexports.ER_RESERVED_SYNTAX = 1382;\nexports.ER_WSAS_FAILED = 1383;\nexports.ER_DIFF_GROUPS_PROC = 1384;\nexports.ER_NO_GROUP_FOR_PROC = 1385;\nexports.ER_ORDER_WITH_PROC = 1386;\nexports.ER_LOGGING_PROHIBIT_CHANGING_OF = 1387;\nexports.ER_NO_FILE_MAPPING = 1388;\nexports.ER_WRONG_MAGIC = 1389;\nexports.ER_PS_MANY_PARAM = 1390;\nexports.ER_KEY_PART_0 = 1391;\nexports.ER_VIEW_CHECKSUM = 1392;\nexports.ER_VIEW_MULTIUPDATE = 1393;\nexports.ER_VIEW_NO_INSERT_FIELD_LIST = 1394;\nexports.ER_VIEW_DELETE_MERGE_VIEW = 1395;\nexports.ER_CANNOT_USER = 1396;\nexports.ER_XAER_NOTA = 1397;\nexports.ER_XAER_INVAL = 1398;\nexports.ER_XAER_RMFAIL = 1399;\nexports.ER_XAER_OUTSIDE = 1400;\nexports.ER_XAER_RMERR = 1401;\nexports.ER_XA_RBROLLBACK = 1402;\nexports.ER_NONEXISTING_PROC_GRANT = 1403;\nexports.ER_PROC_AUTO_GRANT_FAIL = 1404;\nexports.ER_PROC_AUTO_REVOKE_FAIL = 1405;\nexports.ER_DATA_TOO_LONG = 1406;\nexports.ER_SP_BAD_SQLSTATE = 1407;\nexports.ER_STARTUP = 1408;\nexports.ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR = 1409;\nexports.ER_CANT_CREATE_USER_WITH_GRANT = 1410;\nexports.ER_WRONG_VALUE_FOR_TYPE = 1411;\nexports.ER_TABLE_DEF_CHANGED = 1412;\nexports.ER_SP_DUP_HANDLER = 1413;\nexports.ER_SP_NOT_VAR_ARG = 1414;\nexports.ER_SP_NO_RETSET = 1415;\nexports.ER_CANT_CREATE_GEOMETRY_OBJECT = 1416;\nexports.ER_FAILED_ROUTINE_BREAK_BINLOG = 1417;\nexports.ER_BINLOG_UNSAFE_ROUTINE = 1418;\nexports.ER_BINLOG_CREATE_ROUTINE_NEED_SUPER = 1419;\nexports.ER_EXEC_STMT_WITH_OPEN_CURSOR = 1420;\nexports.ER_STMT_HAS_NO_OPEN_CURSOR = 1421;\nexports.ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG = 1422;\nexports.ER_NO_DEFAULT_FOR_VIEW_FIELD = 1423;\nexports.ER_SP_NO_RECURSION = 1424;\nexports.ER_TOO_BIG_SCALE = 1425;\nexports.ER_TOO_BIG_PRECISION = 1426;\nexports.ER_M_BIGGER_THAN_D = 1427;\nexports.ER_WRONG_LOCK_OF_SYSTEM_TABLE = 1428;\nexports.ER_CONNECT_TO_FOREIGN_DATA_SOURCE = 1429;\nexports.ER_QUERY_ON_FOREIGN_DATA_SOURCE = 1430;\nexports.ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST = 1431;\nexports.ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE = 1432;\nexports.ER_FOREIGN_DATA_STRING_INVALID = 1433;\nexports.ER_CANT_CREATE_FEDERATED_TABLE = 1434;\nexports.ER_TRG_IN_WRONG_SCHEMA = 1435;\nexports.ER_STACK_OVERRUN_NEED_MORE = 1436;\nexports.ER_TOO_LONG_BODY = 1437;\nexports.ER_WARN_CANT_DROP_DEFAULT_KEYCACHE = 1438;\nexports.ER_TOO_BIG_DISPLAYWIDTH = 1439;\nexports.ER_XAER_DUPID = 1440;\nexports.ER_DATETIME_FUNCTION_OVERFLOW = 1441;\nexports.ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG = 1442;\nexports.ER_VIEW_PREVENT_UPDATE = 1443;\nexports.ER_PS_NO_RECURSION = 1444;\nexports.ER_SP_CANT_SET_AUTOCOMMIT = 1445;\nexports.ER_MALFORMED_DEFINER = 1446;\nexports.ER_VIEW_FRM_NO_USER = 1447;\nexports.ER_VIEW_OTHER_USER = 1448;\nexports.ER_NO_SUCH_USER = 1449;\nexports.ER_FORBID_SCHEMA_CHANGE = 1450;\nexports.ER_ROW_IS_REFERENCED_2 = 1451;\nexports.ER_NO_REFERENCED_ROW_2 = 1452;\nexports.ER_SP_BAD_VAR_SHADOW = 1453;\nexports.ER_TRG_NO_DEFINER = 1454;\nexports.ER_OLD_FILE_FORMAT = 1455;\nexports.ER_SP_RECURSION_LIMIT = 1456;\nexports.ER_SP_PROC_TABLE_CORRUPT = 1457;\nexports.ER_SP_WRONG_NAME = 1458;\nexports.ER_TABLE_NEEDS_UPGRADE = 1459;\nexports.ER_SP_NO_AGGREGATE = 1460;\nexports.ER_MAX_PREPARED_STMT_COUNT_REACHED = 1461;\nexports.ER_VIEW_RECURSIVE = 1462;\nexports.ER_NON_GROUPING_FIELD_USED = 1463;\nexports.ER_TABLE_CANT_HANDLE_SPKEYS = 1464;\nexports.ER_NO_TRIGGERS_ON_SYSTEM_SCHEMA = 1465;\nexports.ER_REMOVED_SPACES = 1466;\nexports.ER_AUTOINC_READ_FAILED = 1467;\nexports.ER_USERNAME = 1468;\nexports.ER_HOSTNAME = 1469;\nexports.ER_WRONG_STRING_LENGTH = 1470;\nexports.ER_NON_INSERTABLE_TABLE = 1471;\nexports.ER_ADMIN_WRONG_MRG_TABLE = 1472;\nexports.ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT = 1473;\nexports.ER_NAME_BECOMES_EMPTY = 1474;\nexports.ER_AMBIGUOUS_FIELD_TERM = 1475;\nexports.ER_FOREIGN_SERVER_EXISTS = 1476;\nexports.ER_FOREIGN_SERVER_DOESNT_EXIST = 1477;\nexports.ER_ILLEGAL_HA_CREATE_OPTION = 1478;\nexports.ER_PARTITION_REQUIRES_VALUES_ERROR = 1479;\nexports.ER_PARTITION_WRONG_VALUES_ERROR = 1480;\nexports.ER_PARTITION_MAXVALUE_ERROR = 1481;\nexports.ER_PARTITION_SUBPARTITION_ERROR = 1482;\nexports.ER_PARTITION_SUBPART_MIX_ERROR = 1483;\nexports.ER_PARTITION_WRONG_NO_PART_ERROR = 1484;\nexports.ER_PARTITION_WRONG_NO_SUBPART_ERROR = 1485;\nexports.ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR = 1486;\nexports.ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR = 1487;\nexports.ER_FIELD_NOT_FOUND_PART_ERROR = 1488;\nexports.ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR = 1489;\nexports.ER_INCONSISTENT_PARTITION_INFO_ERROR = 1490;\nexports.ER_PARTITION_FUNC_NOT_ALLOWED_ERROR = 1491;\nexports.ER_PARTITIONS_MUST_BE_DEFINED_ERROR = 1492;\nexports.ER_RANGE_NOT_INCREASING_ERROR = 1493;\nexports.ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR = 1494;\nexports.ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR = 1495;\nexports.ER_PARTITION_ENTRY_ERROR = 1496;\nexports.ER_MIX_HANDLER_ERROR = 1497;\nexports.ER_PARTITION_NOT_DEFINED_ERROR = 1498;\nexports.ER_TOO_MANY_PARTITIONS_ERROR = 1499;\nexports.ER_SUBPARTITION_ERROR = 1500;\nexports.ER_CANT_CREATE_HANDLER_FILE = 1501;\nexports.ER_BLOB_FIELD_IN_PART_FUNC_ERROR = 1502;\nexports.ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF = 1503;\nexports.ER_NO_PARTS_ERROR = 1504;\nexports.ER_PARTITION_MGMT_ON_NONPARTITIONED = 1505;\nexports.ER_FOREIGN_KEY_ON_PARTITIONED = 1506;\nexports.ER_DROP_PARTITION_NON_EXISTENT = 1507;\nexports.ER_DROP_LAST_PARTITION = 1508;\nexports.ER_COALESCE_ONLY_ON_HASH_PARTITION = 1509;\nexports.ER_REORG_HASH_ONLY_ON_SAME_NO = 1510;\nexports.ER_REORG_NO_PARAM_ERROR = 1511;\nexports.ER_ONLY_ON_RANGE_LIST_PARTITION = 1512;\nexports.ER_ADD_PARTITION_SUBPART_ERROR = 1513;\nexports.ER_ADD_PARTITION_NO_NEW_PARTITION = 1514;\nexports.ER_COALESCE_PARTITION_NO_PARTITION = 1515;\nexports.ER_REORG_PARTITION_NOT_EXIST = 1516;\nexports.ER_SAME_NAME_PARTITION = 1517;\nexports.ER_NO_BINLOG_ERROR = 1518;\nexports.ER_CONSECUTIVE_REORG_PARTITIONS = 1519;\nexports.ER_REORG_OUTSIDE_RANGE = 1520;\nexports.ER_PARTITION_FUNCTION_FAILURE = 1521;\nexports.ER_PART_STATE_ERROR = 1522;\nexports.ER_LIMITED_PART_RANGE = 1523;\nexports.ER_PLUGIN_IS_NOT_LOADED = 1524;\nexports.ER_WRONG_VALUE = 1525;\nexports.ER_NO_PARTITION_FOR_GIVEN_VALUE = 1526;\nexports.ER_FILEGROUP_OPTION_ONLY_ONCE = 1527;\nexports.ER_CREATE_FILEGROUP_FAILED = 1528;\nexports.ER_DROP_FILEGROUP_FAILED = 1529;\nexports.ER_TABLESPACE_AUTO_EXTEND_ERROR = 1530;\nexports.ER_WRONG_SIZE_NUMBER = 1531;\nexports.ER_SIZE_OVERFLOW_ERROR = 1532;\nexports.ER_ALTER_FILEGROUP_FAILED = 1533;\nexports.ER_BINLOG_ROW_LOGGING_FAILED = 1534;\nexports.ER_BINLOG_ROW_WRONG_TABLE_DEF = 1535;\nexports.ER_BINLOG_ROW_RBR_TO_SBR = 1536;\nexports.ER_EVENT_ALREADY_EXISTS = 1537;\nexports.ER_EVENT_STORE_FAILED = 1538;\nexports.ER_EVENT_DOES_NOT_EXIST = 1539;\nexports.ER_EVENT_CANT_ALTER = 1540;\nexports.ER_EVENT_DROP_FAILED = 1541;\nexports.ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG = 1542;\nexports.ER_EVENT_ENDS_BEFORE_STARTS = 1543;\nexports.ER_EVENT_EXEC_TIME_IN_THE_PAST = 1544;\nexports.ER_EVENT_OPEN_TABLE_FAILED = 1545;\nexports.ER_EVENT_NEITHER_M_EXPR_NOR_M_AT = 1546;\nexports.ER_COL_COUNT_DOESNT_MATCH_CORRUPTED = 1547;\nexports.ER_CANNOT_LOAD_FROM_TABLE = 1548;\nexports.ER_EVENT_CANNOT_DELETE = 1549;\nexports.ER_EVENT_COMPILE_ERROR = 1550;\nexports.ER_EVENT_SAME_NAME = 1551;\nexports.ER_EVENT_DATA_TOO_LONG = 1552;\nexports.ER_DROP_INDEX_FK = 1553;\nexports.ER_WARN_DEPRECATED_SYNTAX_WITH_VER = 1554;\nexports.ER_CANT_WRITE_LOCK_LOG_TABLE = 1555;\nexports.ER_CANT_LOCK_LOG_TABLE = 1556;\nexports.ER_FOREIGN_DUPLICATE_KEY = 1557;\nexports.ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE = 1558;\nexports.ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR = 1559;\nexports.ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT = 1560;\nexports.ER_NDB_CANT_SWITCH_BINLOG_FORMAT = 1561;\nexports.ER_PARTITION_NO_TEMPORARY = 1562;\nexports.ER_PARTITION_CONST_DOMAIN_ERROR = 1563;\nexports.ER_PARTITION_FUNCTION_IS_NOT_ALLOWED = 1564;\nexports.ER_DDL_LOG_ERROR = 1565;\nexports.ER_NULL_IN_VALUES_LESS_THAN = 1566;\nexports.ER_WRONG_PARTITION_NAME = 1567;\nexports.ER_CANT_CHANGE_TX_CHARACTERISTICS = 1568;\nexports.ER_DUP_ENTRY_AUTOINCREMENT_CASE = 1569;\nexports.ER_EVENT_MODIFY_QUEUE_ERROR = 1570;\nexports.ER_EVENT_SET_VAR_ERROR = 1571;\nexports.ER_PARTITION_MERGE_ERROR = 1572;\nexports.ER_CANT_ACTIVATE_LOG = 1573;\nexports.ER_RBR_NOT_AVAILABLE = 1574;\nexports.ER_BASE64_DECODE_ERROR = 1575;\nexports.ER_EVENT_RECURSION_FORBIDDEN = 1576;\nexports.ER_EVENTS_DB_ERROR = 1577;\nexports.ER_ONLY_INTEGERS_ALLOWED = 1578;\nexports.ER_UNSUPORTED_LOG_ENGINE = 1579;\nexports.ER_BAD_LOG_STATEMENT = 1580;\nexports.ER_CANT_RENAME_LOG_TABLE = 1581;\nexports.ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT = 1582;\nexports.ER_WRONG_PARAMETERS_TO_NATIVE_FCT = 1583;\nexports.ER_WRONG_PARAMETERS_TO_STORED_FCT = 1584;\nexports.ER_NATIVE_FCT_NAME_COLLISION = 1585;\nexports.ER_DUP_ENTRY_WITH_KEY_NAME = 1586;\nexports.ER_BINLOG_PURGE_EMFILE = 1587;\nexports.ER_EVENT_CANNOT_CREATE_IN_THE_PAST = 1588;\nexports.ER_EVENT_CANNOT_ALTER_IN_THE_PAST = 1589;\nexports.ER_SLAVE_INCIDENT = 1590;\nexports.ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT = 1591;\nexports.ER_BINLOG_UNSAFE_STATEMENT = 1592;\nexports.ER_SLAVE_FATAL_ERROR = 1593;\nexports.ER_SLAVE_RELAY_LOG_READ_FAILURE = 1594;\nexports.ER_SLAVE_RELAY_LOG_WRITE_FAILURE = 1595;\nexports.ER_SLAVE_CREATE_EVENT_FAILURE = 1596;\nexports.ER_SLAVE_MASTER_COM_FAILURE = 1597;\nexports.ER_BINLOG_LOGGING_IMPOSSIBLE = 1598;\nexports.ER_VIEW_NO_CREATION_CTX = 1599;\nexports.ER_VIEW_INVALID_CREATION_CTX = 1600;\nexports.ER_SR_INVALID_CREATION_CTX = 1601;\nexports.ER_TRG_CORRUPTED_FILE = 1602;\nexports.ER_TRG_NO_CREATION_CTX = 1603;\nexports.ER_TRG_INVALID_CREATION_CTX = 1604;\nexports.ER_EVENT_INVALID_CREATION_CTX = 1605;\nexports.ER_TRG_CANT_OPEN_TABLE = 1606;\nexports.ER_CANT_CREATE_SROUTINE = 1607;\nexports.ER_NEVER_USED = 1608;\nexports.ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT = 1609;\nexports.ER_SLAVE_CORRUPT_EVENT = 1610;\nexports.ER_LOAD_DATA_INVALID_COLUMN = 1611;\nexports.ER_LOG_PURGE_NO_FILE = 1612;\nexports.ER_XA_RBTIMEOUT = 1613;\nexports.ER_XA_RBDEADLOCK = 1614;\nexports.ER_NEED_REPREPARE = 1615;\nexports.ER_DELAYED_NOT_SUPPORTED = 1616;\nexports.WARN_NO_MASTER_INFO = 1617;\nexports.WARN_OPTION_IGNORED = 1618;\nexports.WARN_PLUGIN_DELETE_BUILTIN = 1619;\nexports.WARN_PLUGIN_BUSY = 1620;\nexports.ER_VARIABLE_IS_READONLY = 1621;\nexports.ER_WARN_ENGINE_TRANSACTION_ROLLBACK = 1622;\nexports.ER_SLAVE_HEARTBEAT_FAILURE = 1623;\nexports.ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE = 1624;\nexports.ER_NDB_REPLICATION_SCHEMA_ERROR = 1625;\nexports.ER_CONFLICT_FN_PARSE_ERROR = 1626;\nexports.ER_EXCEPTIONS_WRITE_ERROR = 1627;\nexports.ER_TOO_LONG_TABLE_COMMENT = 1628;\nexports.ER_TOO_LONG_FIELD_COMMENT = 1629;\nexports.ER_FUNC_INEXISTENT_NAME_COLLISION = 1630;\nexports.ER_DATABASE_NAME = 1631;\nexports.ER_TABLE_NAME = 1632;\nexports.ER_PARTITION_NAME = 1633;\nexports.ER_SUBPARTITION_NAME = 1634;\nexports.ER_TEMPORARY_NAME = 1635;\nexports.ER_RENAMED_NAME = 1636;\nexports.ER_TOO_MANY_CONCURRENT_TRXS = 1637;\nexports.WARN_NON_ASCII_SEPARATOR_NOT_IMPLEMENTED = 1638;\nexports.ER_DEBUG_SYNC_TIMEOUT = 1639;\nexports.ER_DEBUG_SYNC_HIT_LIMIT = 1640;\nexports.ER_DUP_SIGNAL_SET = 1641;\nexports.ER_SIGNAL_WARN = 1642;\nexports.ER_SIGNAL_NOT_FOUND = 1643;\nexports.ER_SIGNAL_EXCEPTION = 1644;\nexports.ER_RESIGNAL_WITHOUT_ACTIVE_HANDLER = 1645;\nexports.ER_SIGNAL_BAD_CONDITION_TYPE = 1646;\nexports.WARN_COND_ITEM_TRUNCATED = 1647;\nexports.ER_COND_ITEM_TOO_LONG = 1648;\nexports.ER_UNKNOWN_LOCALE = 1649;\nexports.ER_SLAVE_IGNORE_SERVER_IDS = 1650;\nexports.ER_QUERY_CACHE_DISABLED = 1651;\nexports.ER_SAME_NAME_PARTITION_FIELD = 1652;\nexports.ER_PARTITION_COLUMN_LIST_ERROR = 1653;\nexports.ER_WRONG_TYPE_COLUMN_VALUE_ERROR = 1654;\nexports.ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR = 1655;\nexports.ER_MAXVALUE_IN_VALUES_IN = 1656;\nexports.ER_TOO_MANY_VALUES_ERROR = 1657;\nexports.ER_ROW_SINGLE_PARTITION_FIELD_ERROR = 1658;\nexports.ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD = 1659;\nexports.ER_PARTITION_FIELDS_TOO_LONG = 1660;\nexports.ER_BINLOG_ROW_ENGINE_AND_STMT_ENGINE = 1661;\nexports.ER_BINLOG_ROW_MODE_AND_STMT_ENGINE = 1662;\nexports.ER_BINLOG_UNSAFE_AND_STMT_ENGINE = 1663;\nexports.ER_BINLOG_ROW_INJECTION_AND_STMT_ENGINE = 1664;\nexports.ER_BINLOG_STMT_MODE_AND_ROW_ENGINE = 1665;\nexports.ER_BINLOG_ROW_INJECTION_AND_STMT_MODE = 1666;\nexports.ER_BINLOG_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE = 1667;\nexports.ER_BINLOG_UNSAFE_LIMIT = 1668;\nexports.ER_BINLOG_UNSAFE_INSERT_DELAYED = 1669;\nexports.ER_BINLOG_UNSAFE_SYSTEM_TABLE = 1670;\nexports.ER_BINLOG_UNSAFE_AUTOINC_COLUMNS = 1671;\nexports.ER_BINLOG_UNSAFE_UDF = 1672;\nexports.ER_BINLOG_UNSAFE_SYSTEM_VARIABLE = 1673;\nexports.ER_BINLOG_UNSAFE_SYSTEM_FUNCTION = 1674;\nexports.ER_BINLOG_UNSAFE_NONTRANS_AFTER_TRANS = 1675;\nexports.ER_MESSAGE_AND_STATEMENT = 1676;\nexports.ER_SLAVE_CONVERSION_FAILED = 1677;\nexports.ER_SLAVE_CANT_CREATE_CONVERSION = 1678;\nexports.ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT = 1679;\nexports.ER_PATH_LENGTH = 1680;\nexports.ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT = 1681;\nexports.ER_WRONG_NATIVE_TABLE_STRUCTURE = 1682;\nexports.ER_WRONG_PERFSCHEMA_USAGE = 1683;\nexports.ER_WARN_I_S_SKIPPED_TABLE = 1684;\nexports.ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT = 1685;\nexports.ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT = 1686;\nexports.ER_SPATIAL_MUST_HAVE_GEOM_COL = 1687;\nexports.ER_TOO_LONG_INDEX_COMMENT = 1688;\nexports.ER_LOCK_ABORTED = 1689;\nexports.ER_DATA_OUT_OF_RANGE = 1690;\nexports.ER_WRONG_SPVAR_TYPE_IN_LIMIT = 1691;\nexports.ER_BINLOG_UNSAFE_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE = 1692;\nexports.ER_BINLOG_UNSAFE_MIXED_STATEMENT = 1693;\nexports.ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN = 1694;\nexports.ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN = 1695;\nexports.ER_FAILED_READ_FROM_PAR_FILE = 1696;\nexports.ER_VALUES_IS_NOT_INT_TYPE_ERROR = 1697;\nexports.ER_ACCESS_DENIED_NO_PASSWORD_ERROR = 1698;\nexports.ER_SET_PASSWORD_AUTH_PLUGIN = 1699;\nexports.ER_GRANT_PLUGIN_USER_EXISTS = 1700;\nexports.ER_TRUNCATE_ILLEGAL_FK = 1701;\nexports.ER_PLUGIN_IS_PERMANENT = 1702;\nexports.ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN = 1703;\nexports.ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX = 1704;\nexports.ER_STMT_CACHE_FULL = 1705;\nexports.ER_MULTI_UPDATE_KEY_CONFLICT = 1706;\nexports.ER_TABLE_NEEDS_REBUILD = 1707;\nexports.WARN_OPTION_BELOW_LIMIT = 1708;\nexports.ER_INDEX_COLUMN_TOO_LONG = 1709;\nexports.ER_ERROR_IN_TRIGGER_BODY = 1710;\nexports.ER_ERROR_IN_UNKNOWN_TRIGGER_BODY = 1711;\nexports.ER_INDEX_CORRUPT = 1712;\nexports.ER_UNDO_RECORD_TOO_BIG = 1713;\nexports.ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT = 1714;\nexports.ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE = 1715;\nexports.ER_BINLOG_UNSAFE_REPLACE_SELECT = 1716;\nexports.ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT = 1717;\nexports.ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT = 1718;\nexports.ER_BINLOG_UNSAFE_UPDATE_IGNORE = 1719;\nexports.ER_PLUGIN_NO_UNINSTALL = 1720;\nexports.ER_PLUGIN_NO_INSTALL = 1721;\nexports.ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT = 1722;\nexports.ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC = 1723;\nexports.ER_BINLOG_UNSAFE_INSERT_TWO_KEYS = 1724;\nexports.ER_TABLE_IN_FK_CHECK = 1725;\nexports.ER_UNSUPPORTED_ENGINE = 1726;\nexports.ER_BINLOG_UNSAFE_AUTOINC_NOT_FIRST = 1727;\nexports.ER_CANNOT_LOAD_FROM_TABLE_V2 = 1728;\nexports.ER_MASTER_DELAY_VALUE_OUT_OF_RANGE = 1729;\nexports.ER_ONLY_FD_AND_RBR_EVENTS_ALLOWED_IN_BINLOG_STATEMENT = 1730;\nexports.ER_PARTITION_EXCHANGE_DIFFERENT_OPTION = 1731;\nexports.ER_PARTITION_EXCHANGE_PART_TABLE = 1732;\nexports.ER_PARTITION_EXCHANGE_TEMP_TABLE = 1733;\nexports.ER_PARTITION_INSTEAD_OF_SUBPARTITION = 1734;\nexports.ER_UNKNOWN_PARTITION = 1735;\nexports.ER_TABLES_DIFFERENT_METADATA = 1736;\nexports.ER_ROW_DOES_NOT_MATCH_PARTITION = 1737;\nexports.ER_BINLOG_CACHE_SIZE_GREATER_THAN_MAX = 1738;\nexports.ER_WARN_INDEX_NOT_APPLICABLE = 1739;\nexports.ER_PARTITION_EXCHANGE_FOREIGN_KEY = 1740;\nexports.ER_NO_SUCH_KEY_VALUE = 1741;\nexports.ER_RPL_INFO_DATA_TOO_LONG = 1742;\nexports.ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE = 1743;\nexports.ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE = 1744;\nexports.ER_BINLOG_STMT_CACHE_SIZE_GREATER_THAN_MAX = 1745;\nexports.ER_CANT_UPDATE_TABLE_IN_CREATE_TABLE_SELECT = 1746;\nexports.ER_PARTITION_CLAUSE_ON_NONPARTITIONED = 1747;\nexports.ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET = 1748;\nexports.ER_NO_SUCH_PARTITION = 1749;\nexports.ER_CHANGE_RPL_INFO_REPOSITORY_FAILURE = 1750;\nexports.ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_CREATED_TEMP_TABLE = 1751;\nexports.ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_DROPPED_TEMP_TABLE = 1752;\nexports.ER_MTS_FEATURE_IS_NOT_SUPPORTED = 1753;\nexports.ER_MTS_UPDATED_DBS_GREATER_MAX = 1754;\nexports.ER_MTS_CANT_PARALLEL = 1755;\nexports.ER_MTS_INCONSISTENT_DATA = 1756;\nexports.ER_FULLTEXT_NOT_SUPPORTED_WITH_PARTITIONING = 1757;\nexports.ER_DA_INVALID_CONDITION_NUMBER = 1758;\nexports.ER_INSECURE_PLAIN_TEXT = 1759;\nexports.ER_INSECURE_CHANGE_MASTER = 1760;\nexports.ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO = 1761;\nexports.ER_FOREIGN_DUPLICATE_KEY_WITHOUT_CHILD_INFO = 1762;\nexports.ER_SQLTHREAD_WITH_SECURE_SLAVE = 1763;\nexports.ER_TABLE_HAS_NO_FT = 1764;\nexports.ER_VARIABLE_NOT_SETTABLE_IN_SF_OR_TRIGGER = 1765;\nexports.ER_VARIABLE_NOT_SETTABLE_IN_TRANSACTION = 1766;\nexports.ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST = 1767;\nexports.ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION_WHEN_GTID_NEXT_LIST_IS_NULL = 1768;\nexports.ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION = 1769;\nexports.ER_GTID_NEXT_CANT_BE_AUTOMATIC_IF_GTID_NEXT_LIST_IS_NON_NULL = 1770;\nexports.ER_SKIPPING_LOGGED_TRANSACTION = 1771;\nexports.ER_MALFORMED_GTID_SET_SPECIFICATION = 1772;\nexports.ER_MALFORMED_GTID_SET_ENCODING = 1773;\nexports.ER_MALFORMED_GTID_SPECIFICATION = 1774;\nexports.ER_GNO_EXHAUSTED = 1775;\nexports.ER_BAD_SLAVE_AUTO_POSITION = 1776;\nexports.ER_AUTO_POSITION_REQUIRES_GTID_MODE_ON = 1777;\nexports.ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET = 1778;\nexports.ER_GTID_MODE_2_OR_3_REQUIRES_ENFORCE_GTID_CONSISTENCY_ON = 1779;\nexports.ER_GTID_MODE_REQUIRES_BINLOG = 1780;\nexports.ER_CANT_SET_GTID_NEXT_TO_GTID_WHEN_GTID_MODE_IS_OFF = 1781;\nexports.ER_CANT_SET_GTID_NEXT_TO_ANONYMOUS_WHEN_GTID_MODE_IS_ON = 1782;\nexports.ER_CANT_SET_GTID_NEXT_LIST_TO_NON_NULL_WHEN_GTID_MODE_IS_OFF = 1783;\nexports.ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF = 1784;\nexports.ER_GTID_UNSAFE_NON_TRANSACTIONAL_TABLE = 1785;\nexports.ER_GTID_UNSAFE_CREATE_SELECT = 1786;\nexports.ER_GTID_UNSAFE_CREATE_DROP_TEMPORARY_TABLE_IN_TRANSACTION = 1787;\nexports.ER_GTID_MODE_CAN_ONLY_CHANGE_ONE_STEP_AT_A_TIME = 1788;\nexports.ER_MASTER_HAS_PURGED_REQUIRED_GTIDS = 1789;\nexports.ER_CANT_SET_GTID_NEXT_WHEN_OWNING_GTID = 1790;\nexports.ER_UNKNOWN_EXPLAIN_FORMAT = 1791;\nexports.ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION = 1792;\nexports.ER_TOO_LONG_TABLE_PARTITION_COMMENT = 1793;\nexports.ER_SLAVE_CONFIGURATION = 1794;\nexports.ER_INNODB_FT_LIMIT = 1795;\nexports.ER_INNODB_NO_FT_TEMP_TABLE = 1796;\nexports.ER_INNODB_FT_WRONG_DOCID_COLUMN = 1797;\nexports.ER_INNODB_FT_WRONG_DOCID_INDEX = 1798;\nexports.ER_INNODB_ONLINE_LOG_TOO_BIG = 1799;\nexports.ER_UNKNOWN_ALTER_ALGORITHM = 1800;\nexports.ER_UNKNOWN_ALTER_LOCK = 1801;\nexports.ER_MTS_CHANGE_MASTER_CANT_RUN_WITH_GAPS = 1802;\nexports.ER_MTS_RECOVERY_FAILURE = 1803;\nexports.ER_MTS_RESET_WORKERS = 1804;\nexports.ER_COL_COUNT_DOESNT_MATCH_CORRUPTED_V2 = 1805;\nexports.ER_SLAVE_SILENT_RETRY_TRANSACTION = 1806;\nexports.ER_DISCARD_FK_CHECKS_RUNNING = 1807;\nexports.ER_TABLE_SCHEMA_MISMATCH = 1808;\nexports.ER_TABLE_IN_SYSTEM_TABLESPACE = 1809;\nexports.ER_IO_READ_ERROR = 1810;\nexports.ER_IO_WRITE_ERROR = 1811;\nexports.ER_TABLESPACE_MISSING = 1812;\nexports.ER_TABLESPACE_EXISTS = 1813;\nexports.ER_TABLESPACE_DISCARDED = 1814;\nexports.ER_INTERNAL_ERROR = 1815;\nexports.ER_INNODB_IMPORT_ERROR = 1816;\nexports.ER_INNODB_INDEX_CORRUPT = 1817;\nexports.ER_INVALID_YEAR_COLUMN_LENGTH = 1818;\nexports.ER_NOT_VALID_PASSWORD = 1819;\nexports.ER_MUST_CHANGE_PASSWORD = 1820;\nexports.ER_FK_NO_INDEX_CHILD = 1821;\nexports.ER_FK_NO_INDEX_PARENT = 1822;\nexports.ER_FK_FAIL_ADD_SYSTEM = 1823;\nexports.ER_FK_CANNOT_OPEN_PARENT = 1824;\nexports.ER_FK_INCORRECT_OPTION = 1825;\nexports.ER_FK_DUP_NAME = 1826;\nexports.ER_PASSWORD_FORMAT = 1827;\nexports.ER_FK_COLUMN_CANNOT_DROP = 1828;\nexports.ER_FK_COLUMN_CANNOT_DROP_CHILD = 1829;\nexports.ER_FK_COLUMN_NOT_NULL = 1830;\nexports.ER_DUP_INDEX = 1831;\nexports.ER_FK_COLUMN_CANNOT_CHANGE = 1832;\nexports.ER_FK_COLUMN_CANNOT_CHANGE_CHILD = 1833;\nexports.ER_FK_CANNOT_DELETE_PARENT = 1834;\nexports.ER_MALFORMED_PACKET = 1835;\nexports.ER_READ_ONLY_MODE = 1836;\nexports.ER_GTID_NEXT_TYPE_UNDEFINED_GROUP = 1837;\nexports.ER_VARIABLE_NOT_SETTABLE_IN_SP = 1838;\nexports.ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF = 1839;\nexports.ER_CANT_SET_GTID_PURGED_WHEN_GTID_EXECUTED_IS_NOT_EMPTY = 1840;\nexports.ER_CANT_SET_GTID_PURGED_WHEN_OWNED_GTIDS_IS_NOT_EMPTY = 1841;\nexports.ER_GTID_PURGED_WAS_CHANGED = 1842;\nexports.ER_GTID_EXECUTED_WAS_CHANGED = 1843;\nexports.ER_BINLOG_STMT_MODE_AND_NO_REPL_TABLES = 1844;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED = 1845;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON = 1846;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COPY = 1847;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_PARTITION = 1848;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_RENAME = 1849;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COLUMN_TYPE = 1850;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_CHECK = 1851;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_IGNORE = 1852;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOPK = 1853;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_AUTOINC = 1854;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_HIDDEN_FTS = 1855;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_CHANGE_FTS = 1856;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FTS = 1857;\nexports.ER_SQL_SLAVE_SKIP_COUNTER_NOT_SETTABLE_IN_GTID_MODE = 1858;\nexports.ER_DUP_UNKNOWN_IN_INDEX = 1859;\nexports.ER_IDENT_CAUSES_TOO_LONG_PATH = 1860;\nexports.ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOT_NULL = 1861;\nexports.ER_MUST_CHANGE_PASSWORD_LOGIN = 1862;\nexports.ER_ROW_IN_WRONG_PARTITION = 1863;\nexports.ER_MTS_EVENT_BIGGER_PENDING_JOBS_SIZE_MAX = 1864;\nexports.ER_INNODB_NO_FT_USES_PARSER = 1865;\nexports.ER_BINLOG_LOGICAL_CORRUPTION = 1866;\nexports.ER_WARN_PURGE_LOG_IN_USE = 1867;\nexports.ER_WARN_PURGE_LOG_IS_ACTIVE = 1868;\nexports.ER_AUTO_INCREMENT_CONFLICT = 1869;\nexports.WARN_ON_BLOCKHOLE_IN_RBR = 1870;\nexports.ER_SLAVE_MI_INIT_REPOSITORY = 1871;\nexports.ER_SLAVE_RLI_INIT_REPOSITORY = 1872;\nexports.ER_ACCESS_DENIED_CHANGE_USER_ERROR = 1873;\nexports.ER_INNODB_READ_ONLY = 1874;\nexports.ER_STOP_SLAVE_SQL_THREAD_TIMEOUT = 1875;\nexports.ER_STOP_SLAVE_IO_THREAD_TIMEOUT = 1876;\nexports.ER_TABLE_CORRUPT = 1877;\nexports.ER_TEMP_FILE_WRITE_FAILURE = 1878;\nexports.ER_INNODB_FT_AUX_NOT_HEX_ID = 1879;\nexports.ER_OLD_TEMPORALS_UPGRADED = 1880;\nexports.ER_INNODB_FORCED_RECOVERY = 1881;\nexports.ER_AES_INVALID_IV = 1882;\n\n// Lookup-by-number table\nexports[1] = 'EE_CANTCREATEFILE';\nexports[2] = 'EE_READ';\nexports[3] = 'EE_WRITE';\nexports[4] = 'EE_BADCLOSE';\nexports[5] = 'EE_OUTOFMEMORY';\nexports[6] = 'EE_DELETE';\nexports[7] = 'EE_LINK';\nexports[9] = 'EE_EOFERR';\nexports[10] = 'EE_CANTLOCK';\nexports[11] = 'EE_CANTUNLOCK';\nexports[12] = 'EE_DIR';\nexports[13] = 'EE_STAT';\nexports[14] = 'EE_CANT_CHSIZE';\nexports[15] = 'EE_CANT_OPEN_STREAM';\nexports[16] = 'EE_GETWD';\nexports[17] = 'EE_SETWD';\nexports[18] = 'EE_LINK_WARNING';\nexports[19] = 'EE_OPEN_WARNING';\nexports[20] = 'EE_DISK_FULL';\nexports[21] = 'EE_CANT_MKDIR';\nexports[22] = 'EE_UNKNOWN_CHARSET';\nexports[23] = 'EE_OUT_OF_FILERESOURCES';\nexports[24] = 'EE_CANT_READLINK';\nexports[25] = 'EE_CANT_SYMLINK';\nexports[26] = 'EE_REALPATH';\nexports[27] = 'EE_SYNC';\nexports[28] = 'EE_UNKNOWN_COLLATION';\nexports[29] = 'EE_FILENOTFOUND';\nexports[30] = 'EE_FILE_NOT_CLOSED';\nexports[31] = 'EE_CHANGE_OWNERSHIP';\nexports[32] = 'EE_CHANGE_PERMISSIONS';\nexports[33] = 'EE_CANT_SEEK';\nexports[120] = 'HA_ERR_KEY_NOT_FOUND';\nexports[121] = 'HA_ERR_FOUND_DUPP_KEY';\nexports[122] = 'HA_ERR_INTERNAL_ERROR';\nexports[123] = 'HA_ERR_RECORD_CHANGED';\nexports[124] = 'HA_ERR_WRONG_INDEX';\nexports[126] = 'HA_ERR_CRASHED';\nexports[127] = 'HA_ERR_WRONG_IN_RECORD';\nexports[128] = 'HA_ERR_OUT_OF_MEM';\nexports[130] = 'HA_ERR_NOT_A_TABLE';\nexports[131] = 'HA_ERR_WRONG_COMMAND';\nexports[132] = 'HA_ERR_OLD_FILE';\nexports[133] = 'HA_ERR_NO_ACTIVE_RECORD';\nexports[134] = 'HA_ERR_RECORD_DELETED';\nexports[135] = 'HA_ERR_RECORD_FILE_FULL';\nexports[136] = 'HA_ERR_INDEX_FILE_FULL';\nexports[137] = 'HA_ERR_END_OF_FILE';\nexports[138] = 'HA_ERR_UNSUPPORTED';\nexports[139] = 'HA_ERR_TO_BIG_ROW';\nexports[140] = 'HA_WRONG_CREATE_OPTION';\nexports[141] = 'HA_ERR_FOUND_DUPP_UNIQUE';\nexports[142] = 'HA_ERR_UNKNOWN_CHARSET';\nexports[143] = 'HA_ERR_WRONG_MRG_TABLE_DEF';\nexports[144] = 'HA_ERR_CRASHED_ON_REPAIR';\nexports[145] = 'HA_ERR_CRASHED_ON_USAGE';\nexports[146] = 'HA_ERR_LOCK_WAIT_TIMEOUT';\nexports[147] = 'HA_ERR_LOCK_TABLE_FULL';\nexports[148] = 'HA_ERR_READ_ONLY_TRANSACTION';\nexports[149] = 'HA_ERR_LOCK_DEADLOCK';\nexports[150] = 'HA_ERR_CANNOT_ADD_FOREIGN';\nexports[151] = 'HA_ERR_NO_REFERENCED_ROW';\nexports[152] = 'HA_ERR_ROW_IS_REFERENCED';\nexports[153] = 'HA_ERR_NO_SAVEPOINT';\nexports[154] = 'HA_ERR_NON_UNIQUE_BLOCK_SIZE';\nexports[155] = 'HA_ERR_NO_SUCH_TABLE';\nexports[156] = 'HA_ERR_TABLE_EXIST';\nexports[157] = 'HA_ERR_NO_CONNECTION';\nexports[158] = 'HA_ERR_NULL_IN_SPATIAL';\nexports[159] = 'HA_ERR_TABLE_DEF_CHANGED';\nexports[160] = 'HA_ERR_NO_PARTITION_FOUND';\nexports[161] = 'HA_ERR_RBR_LOGGING_FAILED';\nexports[162] = 'HA_ERR_DROP_INDEX_FK';\nexports[163] = 'HA_ERR_FOREIGN_DUPLICATE_KEY';\nexports[164] = 'HA_ERR_TABLE_NEEDS_UPGRADE';\nexports[165] = 'HA_ERR_TABLE_READONLY';\nexports[166] = 'HA_ERR_AUTOINC_READ_FAILED';\nexports[167] = 'HA_ERR_AUTOINC_ERANGE';\nexports[168] = 'HA_ERR_GENERIC';\nexports[169] = 'HA_ERR_RECORD_IS_THE_SAME';\nexports[170] = 'HA_ERR_LOGGING_IMPOSSIBLE';\nexports[171] = 'HA_ERR_CORRUPT_EVENT';\nexports[172] = 'HA_ERR_NEW_FILE';\nexports[173] = 'HA_ERR_ROWS_EVENT_APPLY';\nexports[174] = 'HA_ERR_INITIALIZATION';\nexports[175] = 'HA_ERR_FILE_TOO_SHORT';\nexports[176] = 'HA_ERR_WRONG_CRC';\nexports[177] = 'HA_ERR_TOO_MANY_CONCURRENT_TRXS';\nexports[178] = 'HA_ERR_NOT_IN_LOCK_PARTITIONS';\nexports[179] = 'HA_ERR_INDEX_COL_TOO_LONG';\nexports[180] = 'HA_ERR_INDEX_CORRUPT';\nexports[181] = 'HA_ERR_UNDO_REC_TOO_BIG';\nexports[182] = 'HA_FTS_INVALID_DOCID';\nexports[183] = 'HA_ERR_TABLE_IN_FK_CHECK';\nexports[184] = 'HA_ERR_TABLESPACE_EXISTS';\nexports[185] = 'HA_ERR_TOO_MANY_FIELDS';\nexports[186] = 'HA_ERR_ROW_IN_WRONG_PARTITION';\nexports[187] = 'HA_ERR_INNODB_READ_ONLY';\nexports[188] = 'HA_ERR_FTS_EXCEED_RESULT_CACHE_LIMIT';\nexports[189] = 'HA_ERR_TEMP_FILE_WRITE_FAILURE';\nexports[190] = 'HA_ERR_INNODB_FORCED_RECOVERY';\nexports[191] = 'HA_ERR_FTS_TOO_MANY_WORDS_IN_PHRASE';\nexports[1000] = 'ER_HASHCHK';\nexports[1001] = 'ER_NISAMCHK';\nexports[1002] = 'ER_NO';\nexports[1003] = 'ER_YES';\nexports[1004] = 'ER_CANT_CREATE_FILE';\nexports[1005] = 'ER_CANT_CREATE_TABLE';\nexports[1006] = 'ER_CANT_CREATE_DB';\nexports[1007] = 'ER_DB_CREATE_EXISTS';\nexports[1008] = 'ER_DB_DROP_EXISTS';\nexports[1009] = 'ER_DB_DROP_DELETE';\nexports[1010] = 'ER_DB_DROP_RMDIR';\nexports[1011] = 'ER_CANT_DELETE_FILE';\nexports[1012] = 'ER_CANT_FIND_SYSTEM_REC';\nexports[1013] = 'ER_CANT_GET_STAT';\nexports[1014] = 'ER_CANT_GET_WD';\nexports[1015] = 'ER_CANT_LOCK';\nexports[1016] = 'ER_CANT_OPEN_FILE';\nexports[1017] = 'ER_FILE_NOT_FOUND';\nexports[1018] = 'ER_CANT_READ_DIR';\nexports[1019] = 'ER_CANT_SET_WD';\nexports[1020] = 'ER_CHECKREAD';\nexports[1021] = 'ER_DISK_FULL';\nexports[1022] = 'ER_DUP_KEY';\nexports[1023] = 'ER_ERROR_ON_CLOSE';\nexports[1024] = 'ER_ERROR_ON_READ';\nexports[1025] = 'ER_ERROR_ON_RENAME';\nexports[1026] = 'ER_ERROR_ON_WRITE';\nexports[1027] = 'ER_FILE_USED';\nexports[1028] = 'ER_FILSORT_ABORT';\nexports[1029] = 'ER_FORM_NOT_FOUND';\nexports[1030] = 'ER_GET_ERRNO';\nexports[1031] = 'ER_ILLEGAL_HA';\nexports[1032] = 'ER_KEY_NOT_FOUND';\nexports[1033] = 'ER_NOT_FORM_FILE';\nexports[1034] = 'ER_NOT_KEYFILE';\nexports[1035] = 'ER_OLD_KEYFILE';\nexports[1036] = 'ER_OPEN_AS_READONLY';\nexports[1037] = 'ER_OUTOFMEMORY';\nexports[1038] = 'ER_OUT_OF_SORTMEMORY';\nexports[1039] = 'ER_UNEXPECTED_EOF';\nexports[1040] = 'ER_CON_COUNT_ERROR';\nexports[1041] = 'ER_OUT_OF_RESOURCES';\nexports[1042] = 'ER_BAD_HOST_ERROR';\nexports[1043] = 'ER_HANDSHAKE_ERROR';\nexports[1044] = 'ER_DBACCESS_DENIED_ERROR';\nexports[1045] = 'ER_ACCESS_DENIED_ERROR';\nexports[1046] = 'ER_NO_DB_ERROR';\nexports[1047] = 'ER_UNKNOWN_COM_ERROR';\nexports[1048] = 'ER_BAD_NULL_ERROR';\nexports[1049] = 'ER_BAD_DB_ERROR';\nexports[1050] = 'ER_TABLE_EXISTS_ERROR';\nexports[1051] = 'ER_BAD_TABLE_ERROR';\nexports[1052] = 'ER_NON_UNIQ_ERROR';\nexports[1053] = 'ER_SERVER_SHUTDOWN';\nexports[1054] = 'ER_BAD_FIELD_ERROR';\nexports[1055] = 'ER_WRONG_FIELD_WITH_GROUP';\nexports[1056] = 'ER_WRONG_GROUP_FIELD';\nexports[1057] = 'ER_WRONG_SUM_SELECT';\nexports[1058] = 'ER_WRONG_VALUE_COUNT';\nexports[1059] = 'ER_TOO_LONG_IDENT';\nexports[1060] = 'ER_DUP_FIELDNAME';\nexports[1061] = 'ER_DUP_KEYNAME';\nexports[1062] = 'ER_DUP_ENTRY';\nexports[1063] = 'ER_WRONG_FIELD_SPEC';\nexports[1064] = 'ER_PARSE_ERROR';\nexports[1065] = 'ER_EMPTY_QUERY';\nexports[1066] = 'ER_NONUNIQ_TABLE';\nexports[1067] = 'ER_INVALID_DEFAULT';\nexports[1068] = 'ER_MULTIPLE_PRI_KEY';\nexports[1069] = 'ER_TOO_MANY_KEYS';\nexports[1070] = 'ER_TOO_MANY_KEY_PARTS';\nexports[1071] = 'ER_TOO_LONG_KEY';\nexports[1072] = 'ER_KEY_COLUMN_DOES_NOT_EXITS';\nexports[1073] = 'ER_BLOB_USED_AS_KEY';\nexports[1074] = 'ER_TOO_BIG_FIELDLENGTH';\nexports[1075] = 'ER_WRONG_AUTO_KEY';\nexports[1076] = 'ER_READY';\nexports[1077] = 'ER_NORMAL_SHUTDOWN';\nexports[1078] = 'ER_GOT_SIGNAL';\nexports[1079] = 'ER_SHUTDOWN_COMPLETE';\nexports[1080] = 'ER_FORCING_CLOSE';\nexports[1081] = 'ER_IPSOCK_ERROR';\nexports[1082] = 'ER_NO_SUCH_INDEX';\nexports[1083] = 'ER_WRONG_FIELD_TERMINATORS';\nexports[1084] = 'ER_BLOBS_AND_NO_TERMINATED';\nexports[1085] = 'ER_TEXTFILE_NOT_READABLE';\nexports[1086] = 'ER_FILE_EXISTS_ERROR';\nexports[1087] = 'ER_LOAD_INFO';\nexports[1088] = 'ER_ALTER_INFO';\nexports[1089] = 'ER_WRONG_SUB_KEY';\nexports[1090] = 'ER_CANT_REMOVE_ALL_FIELDS';\nexports[1091] = 'ER_CANT_DROP_FIELD_OR_KEY';\nexports[1092] = 'ER_INSERT_INFO';\nexports[1093] = 'ER_UPDATE_TABLE_USED';\nexports[1094] = 'ER_NO_SUCH_THREAD';\nexports[1095] = 'ER_KILL_DENIED_ERROR';\nexports[1096] = 'ER_NO_TABLES_USED';\nexports[1097] = 'ER_TOO_BIG_SET';\nexports[1098] = 'ER_NO_UNIQUE_LOGFILE';\nexports[1099] = 'ER_TABLE_NOT_LOCKED_FOR_WRITE';\nexports[1100] = 'ER_TABLE_NOT_LOCKED';\nexports[1101] = 'ER_BLOB_CANT_HAVE_DEFAULT';\nexports[1102] = 'ER_WRONG_DB_NAME';\nexports[1103] = 'ER_WRONG_TABLE_NAME';\nexports[1104] = 'ER_TOO_BIG_SELECT';\nexports[1105] = 'ER_UNKNOWN_ERROR';\nexports[1106] = 'ER_UNKNOWN_PROCEDURE';\nexports[1107] = 'ER_WRONG_PARAMCOUNT_TO_PROCEDURE';\nexports[1108] = 'ER_WRONG_PARAMETERS_TO_PROCEDURE';\nexports[1109] = 'ER_UNKNOWN_TABLE';\nexports[1110] = 'ER_FIELD_SPECIFIED_TWICE';\nexports[1111] = 'ER_INVALID_GROUP_FUNC_USE';\nexports[1112] = 'ER_UNSUPPORTED_EXTENSION';\nexports[1113] = 'ER_TABLE_MUST_HAVE_COLUMNS';\nexports[1114] = 'ER_RECORD_FILE_FULL';\nexports[1115] = 'ER_UNKNOWN_CHARACTER_SET';\nexports[1116] = 'ER_TOO_MANY_TABLES';\nexports[1117] = 'ER_TOO_MANY_FIELDS';\nexports[1118] = 'ER_TOO_BIG_ROWSIZE';\nexports[1119] = 'ER_STACK_OVERRUN';\nexports[1120] = 'ER_WRONG_OUTER_JOIN';\nexports[1121] = 'ER_NULL_COLUMN_IN_INDEX';\nexports[1122] = 'ER_CANT_FIND_UDF';\nexports[1123] = 'ER_CANT_INITIALIZE_UDF';\nexports[1124] = 'ER_UDF_NO_PATHS';\nexports[1125] = 'ER_UDF_EXISTS';\nexports[1126] = 'ER_CANT_OPEN_LIBRARY';\nexports[1127] = 'ER_CANT_FIND_DL_ENTRY';\nexports[1128] = 'ER_FUNCTION_NOT_DEFINED';\nexports[1129] = 'ER_HOST_IS_BLOCKED';\nexports[1130] = 'ER_HOST_NOT_PRIVILEGED';\nexports[1131] = 'ER_PASSWORD_ANONYMOUS_USER';\nexports[1132] = 'ER_PASSWORD_NOT_ALLOWED';\nexports[1133] = 'ER_PASSWORD_NO_MATCH';\nexports[1134] = 'ER_UPDATE_INFO';\nexports[1135] = 'ER_CANT_CREATE_THREAD';\nexports[1136] = 'ER_WRONG_VALUE_COUNT_ON_ROW';\nexports[1137] = 'ER_CANT_REOPEN_TABLE';\nexports[1138] = 'ER_INVALID_USE_OF_NULL';\nexports[1139] = 'ER_REGEXP_ERROR';\nexports[1140] = 'ER_MIX_OF_GROUP_FUNC_AND_FIELDS';\nexports[1141] = 'ER_NONEXISTING_GRANT';\nexports[1142] = 'ER_TABLEACCESS_DENIED_ERROR';\nexports[1143] = 'ER_COLUMNACCESS_DENIED_ERROR';\nexports[1144] = 'ER_ILLEGAL_GRANT_FOR_TABLE';\nexports[1145] = 'ER_GRANT_WRONG_HOST_OR_USER';\nexports[1146] = 'ER_NO_SUCH_TABLE';\nexports[1147] = 'ER_NONEXISTING_TABLE_GRANT';\nexports[1148] = 'ER_NOT_ALLOWED_COMMAND';\nexports[1149] = 'ER_SYNTAX_ERROR';\nexports[1150] = 'ER_DELAYED_CANT_CHANGE_LOCK';\nexports[1151] = 'ER_TOO_MANY_DELAYED_THREADS';\nexports[1152] = 'ER_ABORTING_CONNECTION';\nexports[1153] = 'ER_NET_PACKET_TOO_LARGE';\nexports[1154] = 'ER_NET_READ_ERROR_FROM_PIPE';\nexports[1155] = 'ER_NET_FCNTL_ERROR';\nexports[1156] = 'ER_NET_PACKETS_OUT_OF_ORDER';\nexports[1157] = 'ER_NET_UNCOMPRESS_ERROR';\nexports[1158] = 'ER_NET_READ_ERROR';\nexports[1159] = 'ER_NET_READ_INTERRUPTED';\nexports[1160] = 'ER_NET_ERROR_ON_WRITE';\nexports[1161] = 'ER_NET_WRITE_INTERRUPTED';\nexports[1162] = 'ER_TOO_LONG_STRING';\nexports[1163] = 'ER_TABLE_CANT_HANDLE_BLOB';\nexports[1164] = 'ER_TABLE_CANT_HANDLE_AUTO_INCREMENT';\nexports[1165] = 'ER_DELAYED_INSERT_TABLE_LOCKED';\nexports[1166] = 'ER_WRONG_COLUMN_NAME';\nexports[1167] = 'ER_WRONG_KEY_COLUMN';\nexports[1168] = 'ER_WRONG_MRG_TABLE';\nexports[1169] = 'ER_DUP_UNIQUE';\nexports[1170] = 'ER_BLOB_KEY_WITHOUT_LENGTH';\nexports[1171] = 'ER_PRIMARY_CANT_HAVE_NULL';\nexports[1172] = 'ER_TOO_MANY_ROWS';\nexports[1173] = 'ER_REQUIRES_PRIMARY_KEY';\nexports[1174] = 'ER_NO_RAID_COMPILED';\nexports[1175] = 'ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE';\nexports[1176] = 'ER_KEY_DOES_NOT_EXITS';\nexports[1177] = 'ER_CHECK_NO_SUCH_TABLE';\nexports[1178] = 'ER_CHECK_NOT_IMPLEMENTED';\nexports[1179] = 'ER_CANT_DO_THIS_DURING_AN_TRANSACTION';\nexports[1180] = 'ER_ERROR_DURING_COMMIT';\nexports[1181] = 'ER_ERROR_DURING_ROLLBACK';\nexports[1182] = 'ER_ERROR_DURING_FLUSH_LOGS';\nexports[1183] = 'ER_ERROR_DURING_CHECKPOINT';\nexports[1184] = 'ER_NEW_ABORTING_CONNECTION';\nexports[1185] = 'ER_DUMP_NOT_IMPLEMENTED';\nexports[1186] = 'ER_FLUSH_MASTER_BINLOG_CLOSED';\nexports[1187] = 'ER_INDEX_REBUILD';\nexports[1188] = 'ER_MASTER';\nexports[1189] = 'ER_MASTER_NET_READ';\nexports[1190] = 'ER_MASTER_NET_WRITE';\nexports[1191] = 'ER_FT_MATCHING_KEY_NOT_FOUND';\nexports[1192] = 'ER_LOCK_OR_ACTIVE_TRANSACTION';\nexports[1193] = 'ER_UNKNOWN_SYSTEM_VARIABLE';\nexports[1194] = 'ER_CRASHED_ON_USAGE';\nexports[1195] = 'ER_CRASHED_ON_REPAIR';\nexports[1196] = 'ER_WARNING_NOT_COMPLETE_ROLLBACK';\nexports[1197] = 'ER_TRANS_CACHE_FULL';\nexports[1198] = 'ER_SLAVE_MUST_STOP';\nexports[1199] = 'ER_SLAVE_NOT_RUNNING';\nexports[1200] = 'ER_BAD_SLAVE';\nexports[1201] = 'ER_MASTER_INFO';\nexports[1202] = 'ER_SLAVE_THREAD';\nexports[1203] = 'ER_TOO_MANY_USER_CONNECTIONS';\nexports[1204] = 'ER_SET_CONSTANTS_ONLY';\nexports[1205] = 'ER_LOCK_WAIT_TIMEOUT';\nexports[1206] = 'ER_LOCK_TABLE_FULL';\nexports[1207] = 'ER_READ_ONLY_TRANSACTION';\nexports[1208] = 'ER_DROP_DB_WITH_READ_LOCK';\nexports[1209] = 'ER_CREATE_DB_WITH_READ_LOCK';\nexports[1210] = 'ER_WRONG_ARGUMENTS';\nexports[1211] = 'ER_NO_PERMISSION_TO_CREATE_USER';\nexports[1212] = 'ER_UNION_TABLES_IN_DIFFERENT_DIR';\nexports[1213] = 'ER_LOCK_DEADLOCK';\nexports[1214] = 'ER_TABLE_CANT_HANDLE_FT';\nexports[1215] = 'ER_CANNOT_ADD_FOREIGN';\nexports[1216] = 'ER_NO_REFERENCED_ROW';\nexports[1217] = 'ER_ROW_IS_REFERENCED';\nexports[1218] = 'ER_CONNECT_TO_MASTER';\nexports[1219] = 'ER_QUERY_ON_MASTER';\nexports[1220] = 'ER_ERROR_WHEN_EXECUTING_COMMAND';\nexports[1221] = 'ER_WRONG_USAGE';\nexports[1222] = 'ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT';\nexports[1223] = 'ER_CANT_UPDATE_WITH_READLOCK';\nexports[1224] = 'ER_MIXING_NOT_ALLOWED';\nexports[1225] = 'ER_DUP_ARGUMENT';\nexports[1226] = 'ER_USER_LIMIT_REACHED';\nexports[1227] = 'ER_SPECIFIC_ACCESS_DENIED_ERROR';\nexports[1228] = 'ER_LOCAL_VARIABLE';\nexports[1229] = 'ER_GLOBAL_VARIABLE';\nexports[1230] = 'ER_NO_DEFAULT';\nexports[1231] = 'ER_WRONG_VALUE_FOR_VAR';\nexports[1232] = 'ER_WRONG_TYPE_FOR_VAR';\nexports[1233] = 'ER_VAR_CANT_BE_READ';\nexports[1234] = 'ER_CANT_USE_OPTION_HERE';\nexports[1235] = 'ER_NOT_SUPPORTED_YET';\nexports[1236] = 'ER_MASTER_FATAL_ERROR_READING_BINLOG';\nexports[1237] = 'ER_SLAVE_IGNORED_TABLE';\nexports[1238] = 'ER_INCORRECT_GLOBAL_LOCAL_VAR';\nexports[1239] = 'ER_WRONG_FK_DEF';\nexports[1240] = 'ER_KEY_REF_DO_NOT_MATCH_TABLE_REF';\nexports[1241] = 'ER_OPERAND_COLUMNS';\nexports[1242] = 'ER_SUBQUERY_NO_1_ROW';\nexports[1243] = 'ER_UNKNOWN_STMT_HANDLER';\nexports[1244] = 'ER_CORRUPT_HELP_DB';\nexports[1245] = 'ER_CYCLIC_REFERENCE';\nexports[1246] = 'ER_AUTO_CONVERT';\nexports[1247] = 'ER_ILLEGAL_REFERENCE';\nexports[1248] = 'ER_DERIVED_MUST_HAVE_ALIAS';\nexports[1249] = 'ER_SELECT_REDUCED';\nexports[1250] = 'ER_TABLENAME_NOT_ALLOWED_HERE';\nexports[1251] = 'ER_NOT_SUPPORTED_AUTH_MODE';\nexports[1252] = 'ER_SPATIAL_CANT_HAVE_NULL';\nexports[1253] = 'ER_COLLATION_CHARSET_MISMATCH';\nexports[1254] = 'ER_SLAVE_WAS_RUNNING';\nexports[1255] = 'ER_SLAVE_WAS_NOT_RUNNING';\nexports[1256] = 'ER_TOO_BIG_FOR_UNCOMPRESS';\nexports[1257] = 'ER_ZLIB_Z_MEM_ERROR';\nexports[1258] = 'ER_ZLIB_Z_BUF_ERROR';\nexports[1259] = 'ER_ZLIB_Z_DATA_ERROR';\nexports[1260] = 'ER_CUT_VALUE_GROUP_CONCAT';\nexports[1261] = 'ER_WARN_TOO_FEW_RECORDS';\nexports[1262] = 'ER_WARN_TOO_MANY_RECORDS';\nexports[1263] = 'ER_WARN_NULL_TO_NOTNULL';\nexports[1264] = 'ER_WARN_DATA_OUT_OF_RANGE';\nexports[1265] = 'WARN_DATA_TRUNCATED';\nexports[1266] = 'ER_WARN_USING_OTHER_HANDLER';\nexports[1267] = 'ER_CANT_AGGREGATE_2COLLATIONS';\nexports[1268] = 'ER_DROP_USER';\nexports[1269] = 'ER_REVOKE_GRANTS';\nexports[1270] = 'ER_CANT_AGGREGATE_3COLLATIONS';\nexports[1271] = 'ER_CANT_AGGREGATE_NCOLLATIONS';\nexports[1272] = 'ER_VARIABLE_IS_NOT_STRUCT';\nexports[1273] = 'ER_UNKNOWN_COLLATION';\nexports[1274] = 'ER_SLAVE_IGNORED_SSL_PARAMS';\nexports[1275] = 'ER_SERVER_IS_IN_SECURE_AUTH_MODE';\nexports[1276] = 'ER_WARN_FIELD_RESOLVED';\nexports[1277] = 'ER_BAD_SLAVE_UNTIL_COND';\nexports[1278] = 'ER_MISSING_SKIP_SLAVE';\nexports[1279] = 'ER_UNTIL_COND_IGNORED';\nexports[1280] = 'ER_WRONG_NAME_FOR_INDEX';\nexports[1281] = 'ER_WRONG_NAME_FOR_CATALOG';\nexports[1282] = 'ER_WARN_QC_RESIZE';\nexports[1283] = 'ER_BAD_FT_COLUMN';\nexports[1284] = 'ER_UNKNOWN_KEY_CACHE';\nexports[1285] = 'ER_WARN_HOSTNAME_WONT_WORK';\nexports[1286] = 'ER_UNKNOWN_STORAGE_ENGINE';\nexports[1287] = 'ER_WARN_DEPRECATED_SYNTAX';\nexports[1288] = 'ER_NON_UPDATABLE_TABLE';\nexports[1289] = 'ER_FEATURE_DISABLED';\nexports[1290] = 'ER_OPTION_PREVENTS_STATEMENT';\nexports[1291] = 'ER_DUPLICATED_VALUE_IN_TYPE';\nexports[1292] = 'ER_TRUNCATED_WRONG_VALUE';\nexports[1293] = 'ER_TOO_MUCH_AUTO_TIMESTAMP_COLS';\nexports[1294] = 'ER_INVALID_ON_UPDATE';\nexports[1295] = 'ER_UNSUPPORTED_PS';\nexports[1296] = 'ER_GET_ERRMSG';\nexports[1297] = 'ER_GET_TEMPORARY_ERRMSG';\nexports[1298] = 'ER_UNKNOWN_TIME_ZONE';\nexports[1299] = 'ER_WARN_INVALID_TIMESTAMP';\nexports[1300] = 'ER_INVALID_CHARACTER_STRING';\nexports[1301] = 'ER_WARN_ALLOWED_PACKET_OVERFLOWED';\nexports[1302] = 'ER_CONFLICTING_DECLARATIONS';\nexports[1303] = 'ER_SP_NO_RECURSIVE_CREATE';\nexports[1304] = 'ER_SP_ALREADY_EXISTS';\nexports[1305] = 'ER_SP_DOES_NOT_EXIST';\nexports[1306] = 'ER_SP_DROP_FAILED';\nexports[1307] = 'ER_SP_STORE_FAILED';\nexports[1308] = 'ER_SP_LILABEL_MISMATCH';\nexports[1309] = 'ER_SP_LABEL_REDEFINE';\nexports[1310] = 'ER_SP_LABEL_MISMATCH';\nexports[1311] = 'ER_SP_UNINIT_VAR';\nexports[1312] = 'ER_SP_BADSELECT';\nexports[1313] = 'ER_SP_BADRETURN';\nexports[1314] = 'ER_SP_BADSTATEMENT';\nexports[1315] = 'ER_UPDATE_LOG_DEPRECATED_IGNORED';\nexports[1316] = 'ER_UPDATE_LOG_DEPRECATED_TRANSLATED';\nexports[1317] = 'ER_QUERY_INTERRUPTED';\nexports[1318] = 'ER_SP_WRONG_NO_OF_ARGS';\nexports[1319] = 'ER_SP_COND_MISMATCH';\nexports[1320] = 'ER_SP_NORETURN';\nexports[1321] = 'ER_SP_NORETURNEND';\nexports[1322] = 'ER_SP_BAD_CURSOR_QUERY';\nexports[1323] = 'ER_SP_BAD_CURSOR_SELECT';\nexports[1324] = 'ER_SP_CURSOR_MISMATCH';\nexports[1325] = 'ER_SP_CURSOR_ALREADY_OPEN';\nexports[1326] = 'ER_SP_CURSOR_NOT_OPEN';\nexports[1327] = 'ER_SP_UNDECLARED_VAR';\nexports[1328] = 'ER_SP_WRONG_NO_OF_FETCH_ARGS';\nexports[1329] = 'ER_SP_FETCH_NO_DATA';\nexports[1330] = 'ER_SP_DUP_PARAM';\nexports[1331] = 'ER_SP_DUP_VAR';\nexports[1332] = 'ER_SP_DUP_COND';\nexports[1333] = 'ER_SP_DUP_CURS';\nexports[1334] = 'ER_SP_CANT_ALTER';\nexports[1335] = 'ER_SP_SUBSELECT_NYI';\nexports[1336] = 'ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG';\nexports[1337] = 'ER_SP_VARCOND_AFTER_CURSHNDLR';\nexports[1338] = 'ER_SP_CURSOR_AFTER_HANDLER';\nexports[1339] = 'ER_SP_CASE_NOT_FOUND';\nexports[1340] = 'ER_FPARSER_TOO_BIG_FILE';\nexports[1341] = 'ER_FPARSER_BAD_HEADER';\nexports[1342] = 'ER_FPARSER_EOF_IN_COMMENT';\nexports[1343] = 'ER_FPARSER_ERROR_IN_PARAMETER';\nexports[1344] = 'ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER';\nexports[1345] = 'ER_VIEW_NO_EXPLAIN';\nexports[1346] = 'ER_FRM_UNKNOWN_TYPE';\nexports[1347] = 'ER_WRONG_OBJECT';\nexports[1348] = 'ER_NONUPDATEABLE_COLUMN';\nexports[1349] = 'ER_VIEW_SELECT_DERIVED';\nexports[1350] = 'ER_VIEW_SELECT_CLAUSE';\nexports[1351] = 'ER_VIEW_SELECT_VARIABLE';\nexports[1352] = 'ER_VIEW_SELECT_TMPTABLE';\nexports[1353] = 'ER_VIEW_WRONG_LIST';\nexports[1354] = 'ER_WARN_VIEW_MERGE';\nexports[1355] = 'ER_WARN_VIEW_WITHOUT_KEY';\nexports[1356] = 'ER_VIEW_INVALID';\nexports[1357] = 'ER_SP_NO_DROP_SP';\nexports[1358] = 'ER_SP_GOTO_IN_HNDLR';\nexports[1359] = 'ER_TRG_ALREADY_EXISTS';\nexports[1360] = 'ER_TRG_DOES_NOT_EXIST';\nexports[1361] = 'ER_TRG_ON_VIEW_OR_TEMP_TABLE';\nexports[1362] = 'ER_TRG_CANT_CHANGE_ROW';\nexports[1363] = 'ER_TRG_NO_SUCH_ROW_IN_TRG';\nexports[1364] = 'ER_NO_DEFAULT_FOR_FIELD';\nexports[1365] = 'ER_DIVISION_BY_ZERO';\nexports[1366] = 'ER_TRUNCATED_WRONG_VALUE_FOR_FIELD';\nexports[1367] = 'ER_ILLEGAL_VALUE_FOR_TYPE';\nexports[1368] = 'ER_VIEW_NONUPD_CHECK';\nexports[1369] = 'ER_VIEW_CHECK_FAILED';\nexports[1370] = 'ER_PROCACCESS_DENIED_ERROR';\nexports[1371] = 'ER_RELAY_LOG_FAIL';\nexports[1372] = 'ER_PASSWD_LENGTH';\nexports[1373] = 'ER_UNKNOWN_TARGET_BINLOG';\nexports[1374] = 'ER_IO_ERR_LOG_INDEX_READ';\nexports[1375] = 'ER_BINLOG_PURGE_PROHIBITED';\nexports[1376] = 'ER_FSEEK_FAIL';\nexports[1377] = 'ER_BINLOG_PURGE_FATAL_ERR';\nexports[1378] = 'ER_LOG_IN_USE';\nexports[1379] = 'ER_LOG_PURGE_UNKNOWN_ERR';\nexports[1380] = 'ER_RELAY_LOG_INIT';\nexports[1381] = 'ER_NO_BINARY_LOGGING';\nexports[1382] = 'ER_RESERVED_SYNTAX';\nexports[1383] = 'ER_WSAS_FAILED';\nexports[1384] = 'ER_DIFF_GROUPS_PROC';\nexports[1385] = 'ER_NO_GROUP_FOR_PROC';\nexports[1386] = 'ER_ORDER_WITH_PROC';\nexports[1387] = 'ER_LOGGING_PROHIBIT_CHANGING_OF';\nexports[1388] = 'ER_NO_FILE_MAPPING';\nexports[1389] = 'ER_WRONG_MAGIC';\nexports[1390] = 'ER_PS_MANY_PARAM';\nexports[1391] = 'ER_KEY_PART_0';\nexports[1392] = 'ER_VIEW_CHECKSUM';\nexports[1393] = 'ER_VIEW_MULTIUPDATE';\nexports[1394] = 'ER_VIEW_NO_INSERT_FIELD_LIST';\nexports[1395] = 'ER_VIEW_DELETE_MERGE_VIEW';\nexports[1396] = 'ER_CANNOT_USER';\nexports[1397] = 'ER_XAER_NOTA';\nexports[1398] = 'ER_XAER_INVAL';\nexports[1399] = 'ER_XAER_RMFAIL';\nexports[1400] = 'ER_XAER_OUTSIDE';\nexports[1401] = 'ER_XAER_RMERR';\nexports[1402] = 'ER_XA_RBROLLBACK';\nexports[1403] = 'ER_NONEXISTING_PROC_GRANT';\nexports[1404] = 'ER_PROC_AUTO_GRANT_FAIL';\nexports[1405] = 'ER_PROC_AUTO_REVOKE_FAIL';\nexports[1406] = 'ER_DATA_TOO_LONG';\nexports[1407] = 'ER_SP_BAD_SQLSTATE';\nexports[1408] = 'ER_STARTUP';\nexports[1409] = 'ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR';\nexports[1410] = 'ER_CANT_CREATE_USER_WITH_GRANT';\nexports[1411] = 'ER_WRONG_VALUE_FOR_TYPE';\nexports[1412] = 'ER_TABLE_DEF_CHANGED';\nexports[1413] = 'ER_SP_DUP_HANDLER';\nexports[1414] = 'ER_SP_NOT_VAR_ARG';\nexports[1415] = 'ER_SP_NO_RETSET';\nexports[1416] = 'ER_CANT_CREATE_GEOMETRY_OBJECT';\nexports[1417] = 'ER_FAILED_ROUTINE_BREAK_BINLOG';\nexports[1418] = 'ER_BINLOG_UNSAFE_ROUTINE';\nexports[1419] = 'ER_BINLOG_CREATE_ROUTINE_NEED_SUPER';\nexports[1420] = 'ER_EXEC_STMT_WITH_OPEN_CURSOR';\nexports[1421] = 'ER_STMT_HAS_NO_OPEN_CURSOR';\nexports[1422] = 'ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG';\nexports[1423] = 'ER_NO_DEFAULT_FOR_VIEW_FIELD';\nexports[1424] = 'ER_SP_NO_RECURSION';\nexports[1425] = 'ER_TOO_BIG_SCALE';\nexports[1426] = 'ER_TOO_BIG_PRECISION';\nexports[1427] = 'ER_M_BIGGER_THAN_D';\nexports[1428] = 'ER_WRONG_LOCK_OF_SYSTEM_TABLE';\nexports[1429] = 'ER_CONNECT_TO_FOREIGN_DATA_SOURCE';\nexports[1430] = 'ER_QUERY_ON_FOREIGN_DATA_SOURCE';\nexports[1431] = 'ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST';\nexports[1432] = 'ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE';\nexports[1433] = 'ER_FOREIGN_DATA_STRING_INVALID';\nexports[1434] = 'ER_CANT_CREATE_FEDERATED_TABLE';\nexports[1435] = 'ER_TRG_IN_WRONG_SCHEMA';\nexports[1436] = 'ER_STACK_OVERRUN_NEED_MORE';\nexports[1437] = 'ER_TOO_LONG_BODY';\nexports[1438] = 'ER_WARN_CANT_DROP_DEFAULT_KEYCACHE';\nexports[1439] = 'ER_TOO_BIG_DISPLAYWIDTH';\nexports[1440] = 'ER_XAER_DUPID';\nexports[1441] = 'ER_DATETIME_FUNCTION_OVERFLOW';\nexports[1442] = 'ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG';\nexports[1443] = 'ER_VIEW_PREVENT_UPDATE';\nexports[1444] = 'ER_PS_NO_RECURSION';\nexports[1445] = 'ER_SP_CANT_SET_AUTOCOMMIT';\nexports[1446] = 'ER_MALFORMED_DEFINER';\nexports[1447] = 'ER_VIEW_FRM_NO_USER';\nexports[1448] = 'ER_VIEW_OTHER_USER';\nexports[1449] = 'ER_NO_SUCH_USER';\nexports[1450] = 'ER_FORBID_SCHEMA_CHANGE';\nexports[1451] = 'ER_ROW_IS_REFERENCED_2';\nexports[1452] = 'ER_NO_REFERENCED_ROW_2';\nexports[1453] = 'ER_SP_BAD_VAR_SHADOW';\nexports[1454] = 'ER_TRG_NO_DEFINER';\nexports[1455] = 'ER_OLD_FILE_FORMAT';\nexports[1456] = 'ER_SP_RECURSION_LIMIT';\nexports[1457] = 'ER_SP_PROC_TABLE_CORRUPT';\nexports[1458] = 'ER_SP_WRONG_NAME';\nexports[1459] = 'ER_TABLE_NEEDS_UPGRADE';\nexports[1460] = 'ER_SP_NO_AGGREGATE';\nexports[1461] = 'ER_MAX_PREPARED_STMT_COUNT_REACHED';\nexports[1462] = 'ER_VIEW_RECURSIVE';\nexports[1463] = 'ER_NON_GROUPING_FIELD_USED';\nexports[1464] = 'ER_TABLE_CANT_HANDLE_SPKEYS';\nexports[1465] = 'ER_NO_TRIGGERS_ON_SYSTEM_SCHEMA';\nexports[1466] = 'ER_REMOVED_SPACES';\nexports[1467] = 'ER_AUTOINC_READ_FAILED';\nexports[1468] = 'ER_USERNAME';\nexports[1469] = 'ER_HOSTNAME';\nexports[1470] = 'ER_WRONG_STRING_LENGTH';\nexports[1471] = 'ER_NON_INSERTABLE_TABLE';\nexports[1472] = 'ER_ADMIN_WRONG_MRG_TABLE';\nexports[1473] = 'ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT';\nexports[1474] = 'ER_NAME_BECOMES_EMPTY';\nexports[1475] = 'ER_AMBIGUOUS_FIELD_TERM';\nexports[1476] = 'ER_FOREIGN_SERVER_EXISTS';\nexports[1477] = 'ER_FOREIGN_SERVER_DOESNT_EXIST';\nexports[1478] = 'ER_ILLEGAL_HA_CREATE_OPTION';\nexports[1479] = 'ER_PARTITION_REQUIRES_VALUES_ERROR';\nexports[1480] = 'ER_PARTITION_WRONG_VALUES_ERROR';\nexports[1481] = 'ER_PARTITION_MAXVALUE_ERROR';\nexports[1482] = 'ER_PARTITION_SUBPARTITION_ERROR';\nexports[1483] = 'ER_PARTITION_SUBPART_MIX_ERROR';\nexports[1484] = 'ER_PARTITION_WRONG_NO_PART_ERROR';\nexports[1485] = 'ER_PARTITION_WRONG_NO_SUBPART_ERROR';\nexports[1486] = 'ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR';\nexports[1487] = 'ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR';\nexports[1488] = 'ER_FIELD_NOT_FOUND_PART_ERROR';\nexports[1489] = 'ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR';\nexports[1490] = 'ER_INCONSISTENT_PARTITION_INFO_ERROR';\nexports[1491] = 'ER_PARTITION_FUNC_NOT_ALLOWED_ERROR';\nexports[1492] = 'ER_PARTITIONS_MUST_BE_DEFINED_ERROR';\nexports[1493] = 'ER_RANGE_NOT_INCREASING_ERROR';\nexports[1494] = 'ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR';\nexports[1495] = 'ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR';\nexports[1496] = 'ER_PARTITION_ENTRY_ERROR';\nexports[1497] = 'ER_MIX_HANDLER_ERROR';\nexports[1498] = 'ER_PARTITION_NOT_DEFINED_ERROR';\nexports[1499] = 'ER_TOO_MANY_PARTITIONS_ERROR';\nexports[1500] = 'ER_SUBPARTITION_ERROR';\nexports[1501] = 'ER_CANT_CREATE_HANDLER_FILE';\nexports[1502] = 'ER_BLOB_FIELD_IN_PART_FUNC_ERROR';\nexports[1503] = 'ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF';\nexports[1504] = 'ER_NO_PARTS_ERROR';\nexports[1505] = 'ER_PARTITION_MGMT_ON_NONPARTITIONED';\nexports[1506] = 'ER_FOREIGN_KEY_ON_PARTITIONED';\nexports[1507] = 'ER_DROP_PARTITION_NON_EXISTENT';\nexports[1508] = 'ER_DROP_LAST_PARTITION';\nexports[1509] = 'ER_COALESCE_ONLY_ON_HASH_PARTITION';\nexports[1510] = 'ER_REORG_HASH_ONLY_ON_SAME_NO';\nexports[1511] = 'ER_REORG_NO_PARAM_ERROR';\nexports[1512] = 'ER_ONLY_ON_RANGE_LIST_PARTITION';\nexports[1513] = 'ER_ADD_PARTITION_SUBPART_ERROR';\nexports[1514] = 'ER_ADD_PARTITION_NO_NEW_PARTITION';\nexports[1515] = 'ER_COALESCE_PARTITION_NO_PARTITION';\nexports[1516] = 'ER_REORG_PARTITION_NOT_EXIST';\nexports[1517] = 'ER_SAME_NAME_PARTITION';\nexports[1518] = 'ER_NO_BINLOG_ERROR';\nexports[1519] = 'ER_CONSECUTIVE_REORG_PARTITIONS';\nexports[1520] = 'ER_REORG_OUTSIDE_RANGE';\nexports[1521] = 'ER_PARTITION_FUNCTION_FAILURE';\nexports[1522] = 'ER_PART_STATE_ERROR';\nexports[1523] = 'ER_LIMITED_PART_RANGE';\nexports[1524] = 'ER_PLUGIN_IS_NOT_LOADED';\nexports[1525] = 'ER_WRONG_VALUE';\nexports[1526] = 'ER_NO_PARTITION_FOR_GIVEN_VALUE';\nexports[1527] = 'ER_FILEGROUP_OPTION_ONLY_ONCE';\nexports[1528] = 'ER_CREATE_FILEGROUP_FAILED';\nexports[1529] = 'ER_DROP_FILEGROUP_FAILED';\nexports[1530] = 'ER_TABLESPACE_AUTO_EXTEND_ERROR';\nexports[1531] = 'ER_WRONG_SIZE_NUMBER';\nexports[1532] = 'ER_SIZE_OVERFLOW_ERROR';\nexports[1533] = 'ER_ALTER_FILEGROUP_FAILED';\nexports[1534] = 'ER_BINLOG_ROW_LOGGING_FAILED';\nexports[1535] = 'ER_BINLOG_ROW_WRONG_TABLE_DEF';\nexports[1536] = 'ER_BINLOG_ROW_RBR_TO_SBR';\nexports[1537] = 'ER_EVENT_ALREADY_EXISTS';\nexports[1538] = 'ER_EVENT_STORE_FAILED';\nexports[1539] = 'ER_EVENT_DOES_NOT_EXIST';\nexports[1540] = 'ER_EVENT_CANT_ALTER';\nexports[1541] = 'ER_EVENT_DROP_FAILED';\nexports[1542] = 'ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG';\nexports[1543] = 'ER_EVENT_ENDS_BEFORE_STARTS';\nexports[1544] = 'ER_EVENT_EXEC_TIME_IN_THE_PAST';\nexports[1545] = 'ER_EVENT_OPEN_TABLE_FAILED';\nexports[1546] = 'ER_EVENT_NEITHER_M_EXPR_NOR_M_AT';\nexports[1547] = 'ER_COL_COUNT_DOESNT_MATCH_CORRUPTED';\nexports[1548] = 'ER_CANNOT_LOAD_FROM_TABLE';\nexports[1549] = 'ER_EVENT_CANNOT_DELETE';\nexports[1550] = 'ER_EVENT_COMPILE_ERROR';\nexports[1551] = 'ER_EVENT_SAME_NAME';\nexports[1552] = 'ER_EVENT_DATA_TOO_LONG';\nexports[1553] = 'ER_DROP_INDEX_FK';\nexports[1554] = 'ER_WARN_DEPRECATED_SYNTAX_WITH_VER';\nexports[1555] = 'ER_CANT_WRITE_LOCK_LOG_TABLE';\nexports[1556] = 'ER_CANT_LOCK_LOG_TABLE';\nexports[1557] = 'ER_FOREIGN_DUPLICATE_KEY';\nexports[1558] = 'ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE';\nexports[1559] = 'ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR';\nexports[1560] = 'ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT';\nexports[1561] = 'ER_NDB_CANT_SWITCH_BINLOG_FORMAT';\nexports[1562] = 'ER_PARTITION_NO_TEMPORARY';\nexports[1563] = 'ER_PARTITION_CONST_DOMAIN_ERROR';\nexports[1564] = 'ER_PARTITION_FUNCTION_IS_NOT_ALLOWED';\nexports[1565] = 'ER_DDL_LOG_ERROR';\nexports[1566] = 'ER_NULL_IN_VALUES_LESS_THAN';\nexports[1567] = 'ER_WRONG_PARTITION_NAME';\nexports[1568] = 'ER_CANT_CHANGE_TX_CHARACTERISTICS';\nexports[1569] = 'ER_DUP_ENTRY_AUTOINCREMENT_CASE';\nexports[1570] = 'ER_EVENT_MODIFY_QUEUE_ERROR';\nexports[1571] = 'ER_EVENT_SET_VAR_ERROR';\nexports[1572] = 'ER_PARTITION_MERGE_ERROR';\nexports[1573] = 'ER_CANT_ACTIVATE_LOG';\nexports[1574] = 'ER_RBR_NOT_AVAILABLE';\nexports[1575] = 'ER_BASE64_DECODE_ERROR';\nexports[1576] = 'ER_EVENT_RECURSION_FORBIDDEN';\nexports[1577] = 'ER_EVENTS_DB_ERROR';\nexports[1578] = 'ER_ONLY_INTEGERS_ALLOWED';\nexports[1579] = 'ER_UNSUPORTED_LOG_ENGINE';\nexports[1580] = 'ER_BAD_LOG_STATEMENT';\nexports[1581] = 'ER_CANT_RENAME_LOG_TABLE';\nexports[1582] = 'ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT';\nexports[1583] = 'ER_WRONG_PARAMETERS_TO_NATIVE_FCT';\nexports[1584] = 'ER_WRONG_PARAMETERS_TO_STORED_FCT';\nexports[1585] = 'ER_NATIVE_FCT_NAME_COLLISION';\nexports[1586] = 'ER_DUP_ENTRY_WITH_KEY_NAME';\nexports[1587] = 'ER_BINLOG_PURGE_EMFILE';\nexports[1588] = 'ER_EVENT_CANNOT_CREATE_IN_THE_PAST';\nexports[1589] = 'ER_EVENT_CANNOT_ALTER_IN_THE_PAST';\nexports[1590] = 'ER_SLAVE_INCIDENT';\nexports[1591] = 'ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT';\nexports[1592] = 'ER_BINLOG_UNSAFE_STATEMENT';\nexports[1593] = 'ER_SLAVE_FATAL_ERROR';\nexports[1594] = 'ER_SLAVE_RELAY_LOG_READ_FAILURE';\nexports[1595] = 'ER_SLAVE_RELAY_LOG_WRITE_FAILURE';\nexports[1596] = 'ER_SLAVE_CREATE_EVENT_FAILURE';\nexports[1597] = 'ER_SLAVE_MASTER_COM_FAILURE';\nexports[1598] = 'ER_BINLOG_LOGGING_IMPOSSIBLE';\nexports[1599] = 'ER_VIEW_NO_CREATION_CTX';\nexports[1600] = 'ER_VIEW_INVALID_CREATION_CTX';\nexports[1601] = 'ER_SR_INVALID_CREATION_CTX';\nexports[1602] = 'ER_TRG_CORRUPTED_FILE';\nexports[1603] = 'ER_TRG_NO_CREATION_CTX';\nexports[1604] = 'ER_TRG_INVALID_CREATION_CTX';\nexports[1605] = 'ER_EVENT_INVALID_CREATION_CTX';\nexports[1606] = 'ER_TRG_CANT_OPEN_TABLE';\nexports[1607] = 'ER_CANT_CREATE_SROUTINE';\nexports[1608] = 'ER_NEVER_USED';\nexports[1609] = 'ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT';\nexports[1610] = 'ER_SLAVE_CORRUPT_EVENT';\nexports[1611] = 'ER_LOAD_DATA_INVALID_COLUMN';\nexports[1612] = 'ER_LOG_PURGE_NO_FILE';\nexports[1613] = 'ER_XA_RBTIMEOUT';\nexports[1614] = 'ER_XA_RBDEADLOCK';\nexports[1615] = 'ER_NEED_REPREPARE';\nexports[1616] = 'ER_DELAYED_NOT_SUPPORTED';\nexports[1617] = 'WARN_NO_MASTER_INFO';\nexports[1618] = 'WARN_OPTION_IGNORED';\nexports[1619] = 'WARN_PLUGIN_DELETE_BUILTIN';\nexports[1620] = 'WARN_PLUGIN_BUSY';\nexports[1621] = 'ER_VARIABLE_IS_READONLY';\nexports[1622] = 'ER_WARN_ENGINE_TRANSACTION_ROLLBACK';\nexports[1623] = 'ER_SLAVE_HEARTBEAT_FAILURE';\nexports[1624] = 'ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE';\nexports[1625] = 'ER_NDB_REPLICATION_SCHEMA_ERROR';\nexports[1626] = 'ER_CONFLICT_FN_PARSE_ERROR';\nexports[1627] = 'ER_EXCEPTIONS_WRITE_ERROR';\nexports[1628] = 'ER_TOO_LONG_TABLE_COMMENT';\nexports[1629] = 'ER_TOO_LONG_FIELD_COMMENT';\nexports[1630] = 'ER_FUNC_INEXISTENT_NAME_COLLISION';\nexports[1631] = 'ER_DATABASE_NAME';\nexports[1632] = 'ER_TABLE_NAME';\nexports[1633] = 'ER_PARTITION_NAME';\nexports[1634] = 'ER_SUBPARTITION_NAME';\nexports[1635] = 'ER_TEMPORARY_NAME';\nexports[1636] = 'ER_RENAMED_NAME';\nexports[1637] = 'ER_TOO_MANY_CONCURRENT_TRXS';\nexports[1638] = 'WARN_NON_ASCII_SEPARATOR_NOT_IMPLEMENTED';\nexports[1639] = 'ER_DEBUG_SYNC_TIMEOUT';\nexports[1640] = 'ER_DEBUG_SYNC_HIT_LIMIT';\nexports[1641] = 'ER_DUP_SIGNAL_SET';\nexports[1642] = 'ER_SIGNAL_WARN';\nexports[1643] = 'ER_SIGNAL_NOT_FOUND';\nexports[1644] = 'ER_SIGNAL_EXCEPTION';\nexports[1645] = 'ER_RESIGNAL_WITHOUT_ACTIVE_HANDLER';\nexports[1646] = 'ER_SIGNAL_BAD_CONDITION_TYPE';\nexports[1647] = 'WARN_COND_ITEM_TRUNCATED';\nexports[1648] = 'ER_COND_ITEM_TOO_LONG';\nexports[1649] = 'ER_UNKNOWN_LOCALE';\nexports[1650] = 'ER_SLAVE_IGNORE_SERVER_IDS';\nexports[1651] = 'ER_QUERY_CACHE_DISABLED';\nexports[1652] = 'ER_SAME_NAME_PARTITION_FIELD';\nexports[1653] = 'ER_PARTITION_COLUMN_LIST_ERROR';\nexports[1654] = 'ER_WRONG_TYPE_COLUMN_VALUE_ERROR';\nexports[1655] = 'ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR';\nexports[1656] = 'ER_MAXVALUE_IN_VALUES_IN';\nexports[1657] = 'ER_TOO_MANY_VALUES_ERROR';\nexports[1658] = 'ER_ROW_SINGLE_PARTITION_FIELD_ERROR';\nexports[1659] = 'ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD';\nexports[1660] = 'ER_PARTITION_FIELDS_TOO_LONG';\nexports[1661] = 'ER_BINLOG_ROW_ENGINE_AND_STMT_ENGINE';\nexports[1662] = 'ER_BINLOG_ROW_MODE_AND_STMT_ENGINE';\nexports[1663] = 'ER_BINLOG_UNSAFE_AND_STMT_ENGINE';\nexports[1664] = 'ER_BINLOG_ROW_INJECTION_AND_STMT_ENGINE';\nexports[1665] = 'ER_BINLOG_STMT_MODE_AND_ROW_ENGINE';\nexports[1666] = 'ER_BINLOG_ROW_INJECTION_AND_STMT_MODE';\nexports[1667] = 'ER_BINLOG_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE';\nexports[1668] = 'ER_BINLOG_UNSAFE_LIMIT';\nexports[1669] = 'ER_BINLOG_UNSAFE_INSERT_DELAYED';\nexports[1670] = 'ER_BINLOG_UNSAFE_SYSTEM_TABLE';\nexports[1671] = 'ER_BINLOG_UNSAFE_AUTOINC_COLUMNS';\nexports[1672] = 'ER_BINLOG_UNSAFE_UDF';\nexports[1673] = 'ER_BINLOG_UNSAFE_SYSTEM_VARIABLE';\nexports[1674] = 'ER_BINLOG_UNSAFE_SYSTEM_FUNCTION';\nexports[1675] = 'ER_BINLOG_UNSAFE_NONTRANS_AFTER_TRANS';\nexports[1676] = 'ER_MESSAGE_AND_STATEMENT';\nexports[1677] = 'ER_SLAVE_CONVERSION_FAILED';\nexports[1678] = 'ER_SLAVE_CANT_CREATE_CONVERSION';\nexports[1679] = 'ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT';\nexports[1680] = 'ER_PATH_LENGTH';\nexports[1681] = 'ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT';\nexports[1682] = 'ER_WRONG_NATIVE_TABLE_STRUCTURE';\nexports[1683] = 'ER_WRONG_PERFSCHEMA_USAGE';\nexports[1684] = 'ER_WARN_I_S_SKIPPED_TABLE';\nexports[1685] = 'ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT';\nexports[1686] = 'ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT';\nexports[1687] = 'ER_SPATIAL_MUST_HAVE_GEOM_COL';\nexports[1688] = 'ER_TOO_LONG_INDEX_COMMENT';\nexports[1689] = 'ER_LOCK_ABORTED';\nexports[1690] = 'ER_DATA_OUT_OF_RANGE';\nexports[1691] = 'ER_WRONG_SPVAR_TYPE_IN_LIMIT';\nexports[1692] = 'ER_BINLOG_UNSAFE_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE';\nexports[1693] = 'ER_BINLOG_UNSAFE_MIXED_STATEMENT';\nexports[1694] = 'ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN';\nexports[1695] = 'ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN';\nexports[1696] = 'ER_FAILED_READ_FROM_PAR_FILE';\nexports[1697] = 'ER_VALUES_IS_NOT_INT_TYPE_ERROR';\nexports[1698] = 'ER_ACCESS_DENIED_NO_PASSWORD_ERROR';\nexports[1699] = 'ER_SET_PASSWORD_AUTH_PLUGIN';\nexports[1700] = 'ER_GRANT_PLUGIN_USER_EXISTS';\nexports[1701] = 'ER_TRUNCATE_ILLEGAL_FK';\nexports[1702] = 'ER_PLUGIN_IS_PERMANENT';\nexports[1703] = 'ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN';\nexports[1704] = 'ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX';\nexports[1705] = 'ER_STMT_CACHE_FULL';\nexports[1706] = 'ER_MULTI_UPDATE_KEY_CONFLICT';\nexports[1707] = 'ER_TABLE_NEEDS_REBUILD';\nexports[1708] = 'WARN_OPTION_BELOW_LIMIT';\nexports[1709] = 'ER_INDEX_COLUMN_TOO_LONG';\nexports[1710] = 'ER_ERROR_IN_TRIGGER_BODY';\nexports[1711] = 'ER_ERROR_IN_UNKNOWN_TRIGGER_BODY';\nexports[1712] = 'ER_INDEX_CORRUPT';\nexports[1713] = 'ER_UNDO_RECORD_TOO_BIG';\nexports[1714] = 'ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT';\nexports[1715] = 'ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE';\nexports[1716] = 'ER_BINLOG_UNSAFE_REPLACE_SELECT';\nexports[1717] = 'ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT';\nexports[1718] = 'ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT';\nexports[1719] = 'ER_BINLOG_UNSAFE_UPDATE_IGNORE';\nexports[1720] = 'ER_PLUGIN_NO_UNINSTALL';\nexports[1721] = 'ER_PLUGIN_NO_INSTALL';\nexports[1722] = 'ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT';\nexports[1723] = 'ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC';\nexports[1724] = 'ER_BINLOG_UNSAFE_INSERT_TWO_KEYS';\nexports[1725] = 'ER_TABLE_IN_FK_CHECK';\nexports[1726] = 'ER_UNSUPPORTED_ENGINE';\nexports[1727] = 'ER_BINLOG_UNSAFE_AUTOINC_NOT_FIRST';\nexports[1728] = 'ER_CANNOT_LOAD_FROM_TABLE_V2';\nexports[1729] = 'ER_MASTER_DELAY_VALUE_OUT_OF_RANGE';\nexports[1730] = 'ER_ONLY_FD_AND_RBR_EVENTS_ALLOWED_IN_BINLOG_STATEMENT';\nexports[1731] = 'ER_PARTITION_EXCHANGE_DIFFERENT_OPTION';\nexports[1732] = 'ER_PARTITION_EXCHANGE_PART_TABLE';\nexports[1733] = 'ER_PARTITION_EXCHANGE_TEMP_TABLE';\nexports[1734] = 'ER_PARTITION_INSTEAD_OF_SUBPARTITION';\nexports[1735] = 'ER_UNKNOWN_PARTITION';\nexports[1736] = 'ER_TABLES_DIFFERENT_METADATA';\nexports[1737] = 'ER_ROW_DOES_NOT_MATCH_PARTITION';\nexports[1738] = 'ER_BINLOG_CACHE_SIZE_GREATER_THAN_MAX';\nexports[1739] = 'ER_WARN_INDEX_NOT_APPLICABLE';\nexports[1740] = 'ER_PARTITION_EXCHANGE_FOREIGN_KEY';\nexports[1741] = 'ER_NO_SUCH_KEY_VALUE';\nexports[1742] = 'ER_RPL_INFO_DATA_TOO_LONG';\nexports[1743] = 'ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE';\nexports[1744] = 'ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE';\nexports[1745] = 'ER_BINLOG_STMT_CACHE_SIZE_GREATER_THAN_MAX';\nexports[1746] = 'ER_CANT_UPDATE_TABLE_IN_CREATE_TABLE_SELECT';\nexports[1747] = 'ER_PARTITION_CLAUSE_ON_NONPARTITIONED';\nexports[1748] = 'ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET';\nexports[1749] = 'ER_NO_SUCH_PARTITION';\nexports[1750] = 'ER_CHANGE_RPL_INFO_REPOSITORY_FAILURE';\nexports[1751] = 'ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_CREATED_TEMP_TABLE';\nexports[1752] = 'ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_DROPPED_TEMP_TABLE';\nexports[1753] = 'ER_MTS_FEATURE_IS_NOT_SUPPORTED';\nexports[1754] = 'ER_MTS_UPDATED_DBS_GREATER_MAX';\nexports[1755] = 'ER_MTS_CANT_PARALLEL';\nexports[1756] = 'ER_MTS_INCONSISTENT_DATA';\nexports[1757] = 'ER_FULLTEXT_NOT_SUPPORTED_WITH_PARTITIONING';\nexports[1758] = 'ER_DA_INVALID_CONDITION_NUMBER';\nexports[1759] = 'ER_INSECURE_PLAIN_TEXT';\nexports[1760] = 'ER_INSECURE_CHANGE_MASTER';\nexports[1761] = 'ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO';\nexports[1762] = 'ER_FOREIGN_DUPLICATE_KEY_WITHOUT_CHILD_INFO';\nexports[1763] = 'ER_SQLTHREAD_WITH_SECURE_SLAVE';\nexports[1764] = 'ER_TABLE_HAS_NO_FT';\nexports[1765] = 'ER_VARIABLE_NOT_SETTABLE_IN_SF_OR_TRIGGER';\nexports[1766] = 'ER_VARIABLE_NOT_SETTABLE_IN_TRANSACTION';\nexports[1767] = 'ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST';\nexports[1768] = 'ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION_WHEN_GTID_NEXT_LIST_IS_NULL';\nexports[1769] = 'ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION';\nexports[1770] = 'ER_GTID_NEXT_CANT_BE_AUTOMATIC_IF_GTID_NEXT_LIST_IS_NON_NULL';\nexports[1771] = 'ER_SKIPPING_LOGGED_TRANSACTION';\nexports[1772] = 'ER_MALFORMED_GTID_SET_SPECIFICATION';\nexports[1773] = 'ER_MALFORMED_GTID_SET_ENCODING';\nexports[1774] = 'ER_MALFORMED_GTID_SPECIFICATION';\nexports[1775] = 'ER_GNO_EXHAUSTED';\nexports[1776] = 'ER_BAD_SLAVE_AUTO_POSITION';\nexports[1777] = 'ER_AUTO_POSITION_REQUIRES_GTID_MODE_ON';\nexports[1778] = 'ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET';\nexports[1779] = 'ER_GTID_MODE_2_OR_3_REQUIRES_ENFORCE_GTID_CONSISTENCY_ON';\nexports[1780] = 'ER_GTID_MODE_REQUIRES_BINLOG';\nexports[1781] = 'ER_CANT_SET_GTID_NEXT_TO_GTID_WHEN_GTID_MODE_IS_OFF';\nexports[1782] = 'ER_CANT_SET_GTID_NEXT_TO_ANONYMOUS_WHEN_GTID_MODE_IS_ON';\nexports[1783] = 'ER_CANT_SET_GTID_NEXT_LIST_TO_NON_NULL_WHEN_GTID_MODE_IS_OFF';\nexports[1784] = 'ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF';\nexports[1785] = 'ER_GTID_UNSAFE_NON_TRANSACTIONAL_TABLE';\nexports[1786] = 'ER_GTID_UNSAFE_CREATE_SELECT';\nexports[1787] = 'ER_GTID_UNSAFE_CREATE_DROP_TEMPORARY_TABLE_IN_TRANSACTION';\nexports[1788] = 'ER_GTID_MODE_CAN_ONLY_CHANGE_ONE_STEP_AT_A_TIME';\nexports[1789] = 'ER_MASTER_HAS_PURGED_REQUIRED_GTIDS';\nexports[1790] = 'ER_CANT_SET_GTID_NEXT_WHEN_OWNING_GTID';\nexports[1791] = 'ER_UNKNOWN_EXPLAIN_FORMAT';\nexports[1792] = 'ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION';\nexports[1793] = 'ER_TOO_LONG_TABLE_PARTITION_COMMENT';\nexports[1794] = 'ER_SLAVE_CONFIGURATION';\nexports[1795] = 'ER_INNODB_FT_LIMIT';\nexports[1796] = 'ER_INNODB_NO_FT_TEMP_TABLE';\nexports[1797] = 'ER_INNODB_FT_WRONG_DOCID_COLUMN';\nexports[1798] = 'ER_INNODB_FT_WRONG_DOCID_INDEX';\nexports[1799] = 'ER_INNODB_ONLINE_LOG_TOO_BIG';\nexports[1800] = 'ER_UNKNOWN_ALTER_ALGORITHM';\nexports[1801] = 'ER_UNKNOWN_ALTER_LOCK';\nexports[1802] = 'ER_MTS_CHANGE_MASTER_CANT_RUN_WITH_GAPS';\nexports[1803] = 'ER_MTS_RECOVERY_FAILURE';\nexports[1804] = 'ER_MTS_RESET_WORKERS';\nexports[1805] = 'ER_COL_COUNT_DOESNT_MATCH_CORRUPTED_V2';\nexports[1806] = 'ER_SLAVE_SILENT_RETRY_TRANSACTION';\nexports[1807] = 'ER_DISCARD_FK_CHECKS_RUNNING';\nexports[1808] = 'ER_TABLE_SCHEMA_MISMATCH';\nexports[1809] = 'ER_TABLE_IN_SYSTEM_TABLESPACE';\nexports[1810] = 'ER_IO_READ_ERROR';\nexports[1811] = 'ER_IO_WRITE_ERROR';\nexports[1812] = 'ER_TABLESPACE_MISSING';\nexports[1813] = 'ER_TABLESPACE_EXISTS';\nexports[1814] = 'ER_TABLESPACE_DISCARDED';\nexports[1815] = 'ER_INTERNAL_ERROR';\nexports[1816] = 'ER_INNODB_IMPORT_ERROR';\nexports[1817] = 'ER_INNODB_INDEX_CORRUPT';\nexports[1818] = 'ER_INVALID_YEAR_COLUMN_LENGTH';\nexports[1819] = 'ER_NOT_VALID_PASSWORD';\nexports[1820] = 'ER_MUST_CHANGE_PASSWORD';\nexports[1821] = 'ER_FK_NO_INDEX_CHILD';\nexports[1822] = 'ER_FK_NO_INDEX_PARENT';\nexports[1823] = 'ER_FK_FAIL_ADD_SYSTEM';\nexports[1824] = 'ER_FK_CANNOT_OPEN_PARENT';\nexports[1825] = 'ER_FK_INCORRECT_OPTION';\nexports[1826] = 'ER_FK_DUP_NAME';\nexports[1827] = 'ER_PASSWORD_FORMAT';\nexports[1828] = 'ER_FK_COLUMN_CANNOT_DROP';\nexports[1829] = 'ER_FK_COLUMN_CANNOT_DROP_CHILD';\nexports[1830] = 'ER_FK_COLUMN_NOT_NULL';\nexports[1831] = 'ER_DUP_INDEX';\nexports[1832] = 'ER_FK_COLUMN_CANNOT_CHANGE';\nexports[1833] = 'ER_FK_COLUMN_CANNOT_CHANGE_CHILD';\nexports[1834] = 'ER_FK_CANNOT_DELETE_PARENT';\nexports[1835] = 'ER_MALFORMED_PACKET';\nexports[1836] = 'ER_READ_ONLY_MODE';\nexports[1837] = 'ER_GTID_NEXT_TYPE_UNDEFINED_GROUP';\nexports[1838] = 'ER_VARIABLE_NOT_SETTABLE_IN_SP';\nexports[1839] = 'ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF';\nexports[1840] = 'ER_CANT_SET_GTID_PURGED_WHEN_GTID_EXECUTED_IS_NOT_EMPTY';\nexports[1841] = 'ER_CANT_SET_GTID_PURGED_WHEN_OWNED_GTIDS_IS_NOT_EMPTY';\nexports[1842] = 'ER_GTID_PURGED_WAS_CHANGED';\nexports[1843] = 'ER_GTID_EXECUTED_WAS_CHANGED';\nexports[1844] = 'ER_BINLOG_STMT_MODE_AND_NO_REPL_TABLES';\nexports[1845] = 'ER_ALTER_OPERATION_NOT_SUPPORTED';\nexports[1846] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON';\nexports[1847] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COPY';\nexports[1848] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_PARTITION';\nexports[1849] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_RENAME';\nexports[1850] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COLUMN_TYPE';\nexports[1851] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_CHECK';\nexports[1852] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_IGNORE';\nexports[1853] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOPK';\nexports[1854] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_AUTOINC';\nexports[1855] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_HIDDEN_FTS';\nexports[1856] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_CHANGE_FTS';\nexports[1857] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FTS';\nexports[1858] = 'ER_SQL_SLAVE_SKIP_COUNTER_NOT_SETTABLE_IN_GTID_MODE';\nexports[1859] = 'ER_DUP_UNKNOWN_IN_INDEX';\nexports[1860] = 'ER_IDENT_CAUSES_TOO_LONG_PATH';\nexports[1861] = 'ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOT_NULL';\nexports[1862] = 'ER_MUST_CHANGE_PASSWORD_LOGIN';\nexports[1863] = 'ER_ROW_IN_WRONG_PARTITION';\nexports[1864] = 'ER_MTS_EVENT_BIGGER_PENDING_JOBS_SIZE_MAX';\nexports[1865] = 'ER_INNODB_NO_FT_USES_PARSER';\nexports[1866] = 'ER_BINLOG_LOGICAL_CORRUPTION';\nexports[1867] = 'ER_WARN_PURGE_LOG_IN_USE';\nexports[1868] = 'ER_WARN_PURGE_LOG_IS_ACTIVE';\nexports[1869] = 'ER_AUTO_INCREMENT_CONFLICT';\nexports[1870] = 'WARN_ON_BLOCKHOLE_IN_RBR';\nexports[1871] = 'ER_SLAVE_MI_INIT_REPOSITORY';\nexports[1872] = 'ER_SLAVE_RLI_INIT_REPOSITORY';\nexports[1873] = 'ER_ACCESS_DENIED_CHANGE_USER_ERROR';\nexports[1874] = 'ER_INNODB_READ_ONLY';\nexports[1875] = 'ER_STOP_SLAVE_SQL_THREAD_TIMEOUT';\nexports[1876] = 'ER_STOP_SLAVE_IO_THREAD_TIMEOUT';\nexports[1877] = 'ER_TABLE_CORRUPT';\nexports[1878] = 'ER_TEMP_FILE_WRITE_FAILURE';\nexports[1879] = 'ER_INNODB_FT_AUX_NOT_HEX_ID';\nexports[1880] = 'ER_OLD_TEMPORALS_UPGRADED';\nexports[1881] = 'ER_INNODB_FORCED_RECOVERY';\nexports[1882] = 'ER_AES_INVALID_IV';\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/parsers/string.js":"var Iconv = require('iconv-lite');\n\nvar NODE_ENCODING = [\n  'ascii',\n  'utf8',\n  'utf16le',\n  'ucs2',\n  'base64',\n  'latin1',\n  'binary',\n  'hex'\n];\n\nexports.decode = function (buffer, encoding, options) {\n  if (NODE_ENCODING[encoding]) {\n    return buffer.toString(encoding);\n  }\n\n  var decoder = Iconv.getDecoder(encoding, options || {});\n\n  var res = decoder.write(buffer);\n  var trail = decoder.end();\n\n  return trail ? (res + trail) : res;\n};\n\nexports.encode = function (string, encoding, options) {\n  if (NODE_ENCODING[encoding]) {\n    return Buffer.from(string, encoding);\n  }\n\n  var encoder = Iconv.getEncoder(encoding, options || {});\n\n  var res = encoder.write(string);\n  var trail = encoder.end();\n\n  return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n};\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/index.js":"'auth_switch_request auth_switch_response auth_switch_request_more_data binlog_dump register_slave ssl_request handshake handshake_response query resultset_header column_definition text_row binary_row prepare_statement close_statement prepared_statement_header execute change_user'.split(' ').forEach(function (name) {\n  var ctor = require('./' + name + '.js');\n  module.exports[ctor.name] = ctor;\n  // monkey-patch it to include name if debug is on\n  if (process.env.NODE_DEBUG) {\n    if (ctor.prototype.toPacket) {\n      var old = ctor.prototype.toPacket;\n      ctor.prototype.toPacket = function () {\n        var p = old.call(this);\n        p._name = ctor.name;\n        return p;\n      };\n    }\n  }\n});\n\nvar Buffer = require('safe-buffer').Buffer;\n\n// simple packets:\nvar Packet = require('./packet');\nmodule.exports.Packet = Packet;\n\nmodule.exports.OK = function OK () {\n};\n\nmodule.exports.OK.toPacket = function (args, encoding) {\n  args = args || {};\n  var affectedRows = args.affectedRows || 0;\n  var insertId = args.insertId || 0;\n  var serverStatus = args.serverStatus || 0;\n  var warningCount = args.warningCount || 0;\n  var message = args.message || '';\n\n  var length = 9 + Packet.lengthCodedNumberLength(affectedRows);\n  length += Packet.lengthCodedNumberLength(insertId);\n\n  var buffer = Buffer.allocUnsafe(length);\n  var packet = new Packet(0, buffer, 0, length);\n  packet.offset = 4;\n  packet.writeInt8(0);\n  packet.writeLengthCodedNumber(affectedRows);\n  packet.writeLengthCodedNumber(insertId);\n  packet.writeInt16(serverStatus);\n  packet.writeInt16(warningCount);\n  packet.writeString(message, encoding);\n  packet._name = 'OK';\n  return packet;\n};\n\n// warnings, statusFlags\nmodule.exports.EOF = function EOF () {\n};\n\nmodule.exports.EOF.toPacket = function (warnings, statusFlags) {\n  if (typeof warnings == 'undefined') {\n    warnings = 0;\n  }\n  if (typeof statusFlags == 'undefined') {\n    statusFlags = 0;\n  }\n  var packet = new Packet(0, Buffer.allocUnsafe(9), 0, 9);\n  packet.offset = 4;\n  packet.writeInt8(0xfe);\n  packet.writeInt16(warnings);\n  packet.writeInt16(statusFlags);\n  packet._name = 'EOF';\n  return packet;\n};\n\nmodule.exports.Error = function Error () {\n};\n\nmodule.exports.Error.toPacket = function (args, encoding) {\n  var length = 13 + Buffer.byteLength(args.message, 'utf8');\n  var packet = new Packet(0, Buffer.allocUnsafe(length), 0, length);\n  packet.offset = 4;\n  packet.writeInt8(0xff);\n  packet.writeInt16(args.code);\n  // TODO: sql state parameter\n  packet.writeString('#_____', encoding);\n  packet.writeString(args.message, encoding);\n  packet._name = 'Error';\n  return packet;\n};\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/auth_switch_request.js":"// http://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::AuthSwitchRequest\n\nvar Packet = require('../packets/packet');\nvar Buffer = require('safe-buffer').Buffer;\n\nfunction AuthSwitchRequest (opts)\n{\n  this.pluginName = opts.pluginName;\n  this.pluginData = opts.pluginData;\n}\n\nAuthSwitchRequest.prototype.toPacket = function ()\n{\n  var length = 6 + this.pluginName.length + this.pluginData.length;\n  var buffer = Buffer.allocUnsafe(length);\n  var packet = new Packet(0, buffer, 0, length);\n  packet.offset = 4;\n  packet.writeInt8(0xfe);\n\n  // TODO: use server encoding\n  packet.writeNullTerminatedString(this.pluginName, 'cesu8');\n  packet.writeBuffer(this.pluginData);\n  return packet;\n};\n\nAuthSwitchRequest.fromPacket = function (packet)\n{\n  var marker = packet.readInt8();\n  // assert marker == 0xfe?\n\n  // TODO: use server encoding\n  var name = packet.readNullTerminatedString('cesu8');\n  var data = packet.readBuffer();\n\n  return new AuthSwitchRequest({\n    pluginName: name,\n    pluginData: data\n  });\n};\n\nmodule.exports = AuthSwitchRequest;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/auth_switch_response.js":"// http://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::AuthSwitchRequest\nvar Buffer = require('safe-buffer').Buffer;\n\nvar Packet = require('../packets/packet');\n\nfunction AuthSwitchResponse (data)\n{\n  if (!Buffer.isBuffer(data)) {\n    data = Buffer.from(data);\n  }\n  this.data = data;\n}\n\nAuthSwitchResponse.prototype.toPacket = function ()\n{\n  var length = 4 + this.data.length;\n  var buffer = Buffer.allocUnsafe(length);\n  var packet = new Packet(0, buffer, 0, length);\n  packet.offset = 4;\n  packet.writeBuffer(this.data);\n  return packet;\n};\n\nAuthSwitchResponse.fromPacket = function (packet)\n{\n  var data = packet.readBuffer();\n  return new AuthSwitchResponse(data);\n};\n\nmodule.exports = AuthSwitchResponse;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/auth_switch_request_more_data.js":"// http://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::AuthSwitchRequest\nvar Buffer = require('safe-buffer').Buffer;\nvar Packet = require('../packets/packet');\n\nfunction AuthSwitchRequestMoreData (data)\n{\n  this.data = data;\n}\n\nAuthSwitchRequestMoreData.prototype.toPacket = function ()\n{\n  var length = 5 + this.data.length;\n  var buffer = Buffer.allocUnsafe(length);\n  var packet = new Packet(0, buffer, 0, length);\n  packet.offset = 4;\n  packet.writeInt8(0x01);\n  packet.writeBuffer(this.data);\n  return packet;\n};\n\nAuthSwitchRequestMoreData.fromPacket = function (packet)\n{\n  var marker = packet.readInt8();\n  var data = packet.readBuffer();\n  return new AuthSwitchRequestMoreData(data);\n};\n\nAuthSwitchRequestMoreData.verifyMarker = function (packet) {\n  return (packet.peekByte() == 0x01);\n};\n\nmodule.exports = AuthSwitchRequestMoreData;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/binlog_dump.js":"// http://dev.mysql.com/doc/internals/en/com-binlog-dump.html#packet-COM_BINLOG_DUMP\nvar Buffer = require('safe-buffer').Buffer;\nvar Packet = require('../packets/packet');\nvar CommandCodes = require('../constants/commands');\n\n// TODO: add flag to constants\n// 0x01 - BINLOG_DUMP_NON_BLOCK\n// send EOF instead of blocking\n\nfunction BinlogDump (opts)\n{\n  this.binlogPos = opts.binlogPos || 0;\n  this.serverId = opts.serverId || 0;\n  this.flags = opts.flags || 0;\n  this.filename = opts.filename || '';\n}\n\nBinlogDump.prototype.toPacket = function ()\n{\n  var length = 15 + // TODO: should be ascii?\n    Buffer.byteLength(this.filename, 'utf8');\n  var buffer = Buffer.allocUnsafe(length);\n  var packet = new Packet(0, buffer, 0, length);\n  packet.offset = 4;\n  packet.writeInt8(CommandCodes.BINLOG_DUMP);\n  packet.writeInt32(this.binlogPos);\n  packet.writeInt16(this.flags);\n  packet.writeInt32(this.serverId);\n  packet.writeString(this.filename);\n  return packet;\n};\n\nmodule.exports = BinlogDump;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/constants/commands.js":"module.exports = {\n  SLEEP              : 0x00,  // deprecated\n  QUIT               : 0x01,\n  INIT_DB            : 0x02,\n  QUERY              : 0x03,\n  FIELD_LIST         : 0x04,\n  CREATE_DB          : 0x05,\n  DROP_DB            : 0x06,\n  REFRESH            : 0x07,\n  SHUTDOWN           : 0x08,\n  STATISTICS         : 0x09,\n  PROCESS_INFO       : 0x0a,  // deprecated\n  CONNECT            : 0x0b,  // deprecated\n  PROCESS_KILL       : 0x0c,\n  DEBUG              : 0x0d,\n  PING               : 0x0e,\n  TIME               : 0x0f,  // deprecated\n  DELAYED_INSERT     : 0x10,  // deprecated\n  CHANGE_USER        : 0x11,\n  BINLOG_DUMP        : 0x12,\n  TABLE_DUMP         : 0x13,\n  CONNECT_OUT        : 0x14,\n  REGISTER_SLAVE     : 0x15,\n  STMT_PREPARE       : 0x16,\n  STMT_EXECUTE       : 0x17,\n  STMT_SEND_LONG_DATA: 0x18,\n  STMT_CLOSE         : 0x19,\n  STMT_RESET         : 0x1a,\n  SET_OPTION         : 0x1b,\n  STMT_FETCH         : 0x1c,\n  DAEMON             : 0x1d,  // deprecated\n  BINLOG_DUMP_GTID   : 0x1e,\n  UNKNOWN            : 0xff   // bad!\n};\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/register_slave.js":"// http://dev.mysql.com/doc/internals/en/com-register-slave.html\n// note that documentation is incorrect, for example command code is actually 0x15 but documented as 0x14\n\nvar Buffer = require('safe-buffer').Buffer;\nvar Packet = require('../packets/packet');\nvar CommandCodes = require('../constants/commands');\n\nfunction RegisterSlave (opts)\n{\n  this.serverId = opts.serverId || 0;\n  this.slaveHostname = opts.slaveHostname || '';\n  this.slaveUser = opts.slaveUser || '';\n  this.slavePassword = opts.slavePassword || '';\n  this.slavePort = opts.slavePort || 0;\n  this.replicationRank = opts.replicationRank || 0;\n  this.masterId = opts.masterId || 0;\n}\n\nRegisterSlave.prototype.toPacket = function ()\n{\n  var length = 15 + // TODO: should be ascii?\n    Buffer.byteLength(this.slaveHostname, 'utf8') +\n    Buffer.byteLength(this.slaveUser, 'utf8') +\n    Buffer.byteLength(this.slavePassword, 'utf8') + 3 + 4;\n  var buffer = Buffer.allocUnsafe(length);\n  var packet = new Packet(0, buffer, 0, length);\n  packet.offset = 4;\n  packet.writeInt8(CommandCodes.REGISTER_SLAVE);\n  packet.writeInt32(this.serverId);\n  packet.writeInt8(Buffer.byteLength(this.slaveHostname, 'utf8'));\n  packet.writeString(this.slaveHostname);\n  packet.writeInt8(Buffer.byteLength(this.slaveUser, 'utf8'));\n  packet.writeString(this.slaveUser);\n  packet.writeInt8(Buffer.byteLength(this.slavePassword, 'utf8'));\n  packet.writeString(this.slavePassword);\n  packet.writeInt16(this.slavePort);\n  packet.writeInt32(this.replicationRank);\n  packet.writeInt32(this.masterId);\n  return packet;\n};\n\nmodule.exports = RegisterSlave;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/ssl_request.js":"var Buffer = require('safe-buffer').Buffer;\n\nvar ClientConstants = require('../constants/client');\nvar Packet = require('../packets/packet');\nvar Charsets = require('../constants/charsets');\n\nfunction SSLRequest (flags, charset)\n{\n  this.clientFlags = flags | ClientConstants.SSL;\n  this.charset = charset;\n}\n\nSSLRequest.prototype.toPacket = function ()\n{\n  var length = 36;\n  var buffer = Buffer.allocUnsafe(length);\n  var packet = new Packet(0, buffer, 0, length);\n  buffer.fill(0);\n  packet.offset = 4;\n\n  packet.writeInt32(this.clientFlags);\n  packet.writeInt32(0); // max packet size. todo: move to config\n  packet.writeInt8(this.charset);\n  return packet;\n};\n\nmodule.exports = SSLRequest;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/constants/client.js":"// Manually extracted from mysql-5.5.23/include/mysql_com.h\nexports.LONG_PASSWORD = 0x00000001; /* new more secure passwords */\nexports.FOUND_ROWS = 0x00000002; /* found instead of affected rows */\nexports.LONG_FLAG = 0x00000004; /* get all column flags */\nexports.CONNECT_WITH_DB = 0x00000008; /* one can specify db on connect */\nexports.NO_SCHEMA = 0x00000010; /* don't allow database.table.column */\nexports.COMPRESS = 0x00000020; /* can use compression protocol */\nexports.ODBC = 0x00000040; /* odbc client */\nexports.LOCAL_FILES = 0x00000080; /* can use LOAD DATA LOCAL */\nexports.IGNORE_SPACE = 0x00000100; /* ignore spaces before '' */\nexports.PROTOCOL_41 = 0x00000200; /* new 4.1 protocol */\nexports.INTERACTIVE = 0x00000400; /* this is an interactive client */\nexports.SSL = 0x00000800; /* switch to ssl after handshake */\nexports.IGNORE_SIGPIPE = 0x00001000; /* IGNORE sigpipes */\nexports.TRANSACTIONS = 0x00002000; /* client knows about transactions */\nexports.RESERVED = 0x00004000; /* old flag for 4.1 protocol  */\nexports.SECURE_CONNECTION = 0x00008000; /* new 4.1 authentication */\nexports.MULTI_STATEMENTS = 0x00010000; /* enable/disable multi-stmt support */\nexports.MULTI_RESULTS = 0x00020000; /* enable/disable multi-results */\nexports.PS_MULTI_RESULTS = 0x00040000; /* multi-results in ps-protocol */\nexports.PLUGIN_AUTH = 0x00080000; /* client supports plugin authentication */\nexports.CONNECT_ATTRS = 0x00100000; /* permits connection attributes */\nexports.PLUGIN_AUTH_LENENC_CLIENT_DATA = 0x00200000; /* Understands length-encoded integer for auth response data in Protocol::HandshakeResponse41. */\nexports.CAN_HANDLE_EXPIRED_PASSWORDS = 0x00400000; /* Announces support for expired password extension. */\nexports.SESSION_TRACK = 0x00800000; /* Can set SERVER_SESSION_STATE_CHANGED in the Status Flags and send session-state change data after a OK packet. */\nexports.DEPRECATE_EOF = 0x01000000; /* Can send OK after a Text Resultset. */\n\nexports.SSL_VERIFY_SERVER_CERT = 0x40000000;\nexports.REMEMBER_OPTIONS = 0x80000000;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/constants/charsets.js":"exports.BIG5_CHINESE_CI = 1;\nexports.LATIN2_CZECH_CS = 2;\nexports.DEC8_SWEDISH_CI = 3;\nexports.CP850_GENERAL_CI = 4;\nexports.LATIN1_GERMAN1_CI = 5;\nexports.HP8_ENGLISH_CI = 6;\nexports.KOI8R_GENERAL_CI = 7;\nexports.LATIN1_SWEDISH_CI = 8;\nexports.LATIN2_GENERAL_CI = 9;\nexports.SWE7_SWEDISH_CI = 10;\nexports.ASCII_GENERAL_CI = 11;\nexports.UJIS_JAPANESE_CI = 12;\nexports.SJIS_JAPANESE_CI = 13;\nexports.CP1251_BULGARIAN_CI = 14;\nexports.LATIN1_DANISH_CI = 15;\nexports.HEBREW_GENERAL_CI = 16;\nexports.TIS620_THAI_CI = 18;\nexports.EUCKR_KOREAN_CI = 19;\nexports.LATIN7_ESTONIAN_CS = 20;\nexports.LATIN2_HUNGARIAN_CI = 21;\nexports.KOI8U_GENERAL_CI = 22;\nexports.CP1251_UKRAINIAN_CI = 23;\nexports.GB2312_CHINESE_CI = 24;\nexports.GREEK_GENERAL_CI = 25;\nexports.CP1250_GENERAL_CI = 26;\nexports.LATIN2_CROATIAN_CI = 27;\nexports.GBK_CHINESE_CI = 28;\nexports.CP1257_LITHUANIAN_CI = 29;\nexports.LATIN5_TURKISH_CI = 30;\nexports.LATIN1_GERMAN2_CI = 31;\nexports.ARMSCII8_GENERAL_CI = 32;\nexports.UTF8_GENERAL_CI = 33;\nexports.CP1250_CZECH_CS = 34;\nexports.UCS2_GENERAL_CI = 35;\nexports.CP866_GENERAL_CI = 36;\nexports.KEYBCS2_GENERAL_CI = 37;\nexports.MACCE_GENERAL_CI = 38;\nexports.MACROMAN_GENERAL_CI = 39;\nexports.CP852_GENERAL_CI = 40;\nexports.LATIN7_GENERAL_CI = 41;\nexports.LATIN7_GENERAL_CS = 42;\nexports.MACCE_BIN = 43;\nexports.CP1250_CROATIAN_CI = 44;\nexports.UTF8MB4_GENERAL_CI = 45;\nexports.UTF8MB4_BIN = 46;\nexports.LATIN1_BIN = 47;\nexports.LATIN1_GENERAL_CI = 48;\nexports.LATIN1_GENERAL_CS = 49;\nexports.CP1251_BIN = 50;\nexports.CP1251_GENERAL_CI = 51;\nexports.CP1251_GENERAL_CS = 52;\nexports.MACROMAN_BIN = 53;\nexports.UTF16_GENERAL_CI = 54;\nexports.UTF16_BIN = 55;\nexports.UTF16LE_GENERAL_CI = 56;\nexports.CP1256_GENERAL_CI = 57;\nexports.CP1257_BIN = 58;\nexports.CP1257_GENERAL_CI = 59;\nexports.UTF32_GENERAL_CI = 60;\nexports.UTF32_BIN = 61;\nexports.UTF16LE_BIN = 62;\nexports.BINARY = 63;\nexports.ARMSCII8_BIN = 64;\nexports.ASCII_BIN = 65;\nexports.CP1250_BIN = 66;\nexports.CP1256_BIN = 67;\nexports.CP866_BIN = 68;\nexports.DEC8_BIN = 69;\nexports.GREEK_BIN = 70;\nexports.HEBREW_BIN = 71;\nexports.HP8_BIN = 72;\nexports.KEYBCS2_BIN = 73;\nexports.KOI8R_BIN = 74;\nexports.KOI8U_BIN = 75;\nexports.UTF8_TOLOWER_CI = 76;\nexports.LATIN2_BIN = 77;\nexports.LATIN5_BIN = 78;\nexports.LATIN7_BIN = 79;\nexports.CP850_BIN = 80;\nexports.CP852_BIN = 81;\nexports.SWE7_BIN = 82;\nexports.UTF8_BIN = 83;\nexports.BIG5_BIN = 84;\nexports.EUCKR_BIN = 85;\nexports.GB2312_BIN = 86;\nexports.GBK_BIN = 87;\nexports.SJIS_BIN = 88;\nexports.TIS620_BIN = 89;\nexports.UCS2_BIN = 90;\nexports.UJIS_BIN = 91;\nexports.GEOSTD8_GENERAL_CI = 92;\nexports.GEOSTD8_BIN = 93;\nexports.LATIN1_SPANISH_CI = 94;\nexports.CP932_JAPANESE_CI = 95;\nexports.CP932_BIN = 96;\nexports.EUCJPMS_JAPANESE_CI = 97;\nexports.EUCJPMS_BIN = 98;\nexports.CP1250_POLISH_CI = 99;\nexports.UTF16_UNICODE_CI = 101;\nexports.UTF16_ICELANDIC_CI = 102;\nexports.UTF16_LATVIAN_CI = 103;\nexports.UTF16_ROMANIAN_CI = 104;\nexports.UTF16_SLOVENIAN_CI = 105;\nexports.UTF16_POLISH_CI = 106;\nexports.UTF16_ESTONIAN_CI = 107;\nexports.UTF16_SPANISH_CI = 108;\nexports.UTF16_SWEDISH_CI = 109;\nexports.UTF16_TURKISH_CI = 110;\nexports.UTF16_CZECH_CI = 111;\nexports.UTF16_DANISH_CI = 112;\nexports.UTF16_LITHUANIAN_CI = 113;\nexports.UTF16_SLOVAK_CI = 114;\nexports.UTF16_SPANISH2_CI = 115;\nexports.UTF16_ROMAN_CI = 116;\nexports.UTF16_PERSIAN_CI = 117;\nexports.UTF16_ESPERANTO_CI = 118;\nexports.UTF16_HUNGARIAN_CI = 119;\nexports.UTF16_SINHALA_CI = 120;\nexports.UTF16_GERMAN2_CI = 121;\nexports.UTF16_CROATIAN_CI = 122;\nexports.UTF16_UNICODE_520_CI = 123;\nexports.UTF16_VIETNAMESE_CI = 124;\nexports.UCS2_UNICODE_CI = 128;\nexports.UCS2_ICELANDIC_CI = 129;\nexports.UCS2_LATVIAN_CI = 130;\nexports.UCS2_ROMANIAN_CI = 131;\nexports.UCS2_SLOVENIAN_CI = 132;\nexports.UCS2_POLISH_CI = 133;\nexports.UCS2_ESTONIAN_CI = 134;\nexports.UCS2_SPANISH_CI = 135;\nexports.UCS2_SWEDISH_CI = 136;\nexports.UCS2_TURKISH_CI = 137;\nexports.UCS2_CZECH_CI = 138;\nexports.UCS2_DANISH_CI = 139;\nexports.UCS2_LITHUANIAN_CI = 140;\nexports.UCS2_SLOVAK_CI = 141;\nexports.UCS2_SPANISH2_CI = 142;\nexports.UCS2_ROMAN_CI = 143;\nexports.UCS2_PERSIAN_CI = 144;\nexports.UCS2_ESPERANTO_CI = 145;\nexports.UCS2_HUNGARIAN_CI = 146;\nexports.UCS2_SINHALA_CI = 147;\nexports.UCS2_GERMAN2_CI = 148;\nexports.UCS2_CROATIAN_CI = 149;\nexports.UCS2_UNICODE_520_CI = 150;\nexports.UCS2_VIETNAMESE_CI = 151;\nexports.UCS2_GENERAL_MYSQL500_CI = 159;\nexports.UTF32_UNICODE_CI = 160;\nexports.UTF32_ICELANDIC_CI = 161;\nexports.UTF32_LATVIAN_CI = 162;\nexports.UTF32_ROMANIAN_CI = 163;\nexports.UTF32_SLOVENIAN_CI = 164;\nexports.UTF32_POLISH_CI = 165;\nexports.UTF32_ESTONIAN_CI = 166;\nexports.UTF32_SPANISH_CI = 167;\nexports.UTF32_SWEDISH_CI = 168;\nexports.UTF32_TURKISH_CI = 169;\nexports.UTF32_CZECH_CI = 170;\nexports.UTF32_DANISH_CI = 171;\nexports.UTF32_LITHUANIAN_CI = 172;\nexports.UTF32_SLOVAK_CI = 173;\nexports.UTF32_SPANISH2_CI = 174;\nexports.UTF32_ROMAN_CI = 175;\nexports.UTF32_PERSIAN_CI = 176;\nexports.UTF32_ESPERANTO_CI = 177;\nexports.UTF32_HUNGARIAN_CI = 178;\nexports.UTF32_SINHALA_CI = 179;\nexports.UTF32_GERMAN2_CI = 180;\nexports.UTF32_CROATIAN_CI = 181;\nexports.UTF32_UNICODE_520_CI = 182;\nexports.UTF32_VIETNAMESE_CI = 183;\nexports.UTF8_UNICODE_CI = 192;\nexports.UTF8_ICELANDIC_CI = 193;\nexports.UTF8_LATVIAN_CI = 194;\nexports.UTF8_ROMANIAN_CI = 195;\nexports.UTF8_SLOVENIAN_CI = 196;\nexports.UTF8_POLISH_CI = 197;\nexports.UTF8_ESTONIAN_CI = 198;\nexports.UTF8_SPANISH_CI = 199;\nexports.UTF8_SWEDISH_CI = 200;\nexports.UTF8_TURKISH_CI = 201;\nexports.UTF8_CZECH_CI = 202;\nexports.UTF8_DANISH_CI = 203;\nexports.UTF8_LITHUANIAN_CI = 204;\nexports.UTF8_SLOVAK_CI = 205;\nexports.UTF8_SPANISH2_CI = 206;\nexports.UTF8_ROMAN_CI = 207;\nexports.UTF8_PERSIAN_CI = 208;\nexports.UTF8_ESPERANTO_CI = 209;\nexports.UTF8_HUNGARIAN_CI = 210;\nexports.UTF8_SINHALA_CI = 211;\nexports.UTF8_GERMAN2_CI = 212;\nexports.UTF8_CROATIAN_CI = 213;\nexports.UTF8_UNICODE_520_CI = 214;\nexports.UTF8_VIETNAMESE_CI = 215;\nexports.UTF8_GENERAL_MYSQL500_CI = 223;\nexports.UTF8MB4_UNICODE_CI = 224;\nexports.UTF8MB4_ICELANDIC_CI = 225;\nexports.UTF8MB4_LATVIAN_CI = 226;\nexports.UTF8MB4_ROMANIAN_CI = 227;\nexports.UTF8MB4_SLOVENIAN_CI = 228;\nexports.UTF8MB4_POLISH_CI = 229;\nexports.UTF8MB4_ESTONIAN_CI = 230;\nexports.UTF8MB4_SPANISH_CI = 231;\nexports.UTF8MB4_SWEDISH_CI = 232;\nexports.UTF8MB4_TURKISH_CI = 233;\nexports.UTF8MB4_CZECH_CI = 234;\nexports.UTF8MB4_DANISH_CI = 235;\nexports.UTF8MB4_LITHUANIAN_CI = 236;\nexports.UTF8MB4_SLOVAK_CI = 237;\nexports.UTF8MB4_SPANISH2_CI = 238;\nexports.UTF8MB4_ROMAN_CI = 239;\nexports.UTF8MB4_PERSIAN_CI = 240;\nexports.UTF8MB4_ESPERANTO_CI = 241;\nexports.UTF8MB4_HUNGARIAN_CI = 242;\nexports.UTF8MB4_SINHALA_CI = 243;\nexports.UTF8MB4_GERMAN2_CI = 244;\nexports.UTF8MB4_CROATIAN_CI = 245;\nexports.UTF8MB4_UNICODE_520_CI = 246;\nexports.UTF8MB4_VIETNAMESE_CI = 247;\nexports.GB18030_CHINESE_CI = 248;\nexports.GB18030_BIN = 249;\nexports.GB18030_UNICODE_520_CI = 250;\nexports.UTF8_GENERAL50_CI = 253;\nexports.UTF8MB4_0900_AI_CI = 255;\nexports.UTF8MB4_CS_0900_AI_CI = 266;\nexports.UTF8MB4_DA_0900_AI_CI = 267;\nexports.UTF8MB4_DE_PB_0900_AI_CI = 256;\nexports.UTF8MB4_EO_0900_AI_CI = 273;\nexports.UTF8MB4_ES_0900_AI_CI = 263;\nexports.UTF8MB4_ES_TRAD_0900_AI_CI = 270;\nexports.UTF8MB4_ET_0900_AI_CI = 262;\nexports.UTF8MB4_HR_0900_AI_CI = 275;\nexports.UTF8MB4_HU_0900_AI_CI = 274;\nexports.UTF8MB4_IS_0900_AI_CI = 257;\nexports.UTF8MB4_LA_0900_AI_CI = 271;\nexports.UTF8MB4_LT_0900_AI_CI = 268;\nexports.UTF8MB4_LV_0900_AI_CI = 258;\nexports.UTF8MB4_PL_0900_AI_CI = 261;\nexports.UTF8MB4_RO_0900_AI_CI = 259;\nexports.UTF8MB4_SK_0900_AI_CI = 269;\nexports.UTF8MB4_SL_0900_AI_CI = 260;\nexports.UTF8MB4_SV_0900_AI_CI = 264;\nexports.UTF8MB4_TR_0900_AI_CI = 265;\nexports.UTF8MB4_VI_0900_AI_CI = 277;\n\n// short aliases\nexports.BIG5 = exports.BIG5_CHINESE_CI;\nexports.DEC8 = exports.DEC8_SWEDISH_CI;\nexports.CP850 = exports.CP850_GENERAL_CI;\nexports.HP8 = exports.HP8_ENGLISH_CI;\nexports.KOI8R = exports.KOI8R_GENERAL_CI;\nexports.LATIN1 = exports.LATIN1_SWEDISH_CI;\nexports.LATIN2 = exports.LATIN2_GENERAL_CI;\nexports.SWE7 = exports.SWE7_SWEDISH_CI;\nexports.ASCII = exports.ASCII_GENERAL_CI;\nexports.UJIS = exports.UJIS_JAPANESE_CI;\nexports.SJIS = exports.SJIS_JAPANESE_CI;\nexports.HEBREW = exports.HEBREW_GENERAL_CI;\nexports.TIS620 = exports.TIS620_THAI_CI;\nexports.EUCKR = exports.EUCKR_KOREAN_CI;\nexports.KOI8U = exports.KOI8U_GENERAL_CI;\nexports.GB2312 = exports.GB2312_CHINESE_CI;\nexports.GREEK = exports.GREEK_GENERAL_CI;\nexports.CP1250 = exports.CP1250_GENERAL_CI;\nexports.GBK = exports.GBK_CHINESE_CI;\nexports.LATIN5 = exports.LATIN5_TURKISH_CI;\nexports.ARMSCII8 = exports.ARMSCII8_GENERAL_CI;\nexports.UTF8 = exports.UTF8_GENERAL_CI;\nexports.UCS2 = exports.UCS2_GENERAL_CI;\nexports.CP866 = exports.CP866_GENERAL_CI;\nexports.KEYBCS2 = exports.KEYBCS2_GENERAL_CI;\nexports.MACCE = exports.MACCE_GENERAL_CI;\nexports.MACROMAN = exports.MACROMAN_GENERAL_CI;\nexports.CP852 = exports.CP852_GENERAL_CI;\nexports.LATIN7 = exports.LATIN7_GENERAL_CI;\nexports.UTF8MB4 = exports.UTF8MB4_GENERAL_CI;\nexports.CP1251 = exports.CP1251_GENERAL_CI;\nexports.UTF16 = exports.UTF16_GENERAL_CI;\nexports.UTF16LE = exports.UTF16LE_GENERAL_CI;\nexports.CP1256 = exports.CP1256_GENERAL_CI;\nexports.CP1257 = exports.CP1257_GENERAL_CI;\nexports.UTF32 = exports.UTF32_GENERAL_CI;\nexports.BINARY = exports.BINARY;\nexports.CP932 = exports.CP932_JAPANESE_CI;\nexports.EUCJPMS = exports.EUCJPMS_JAPANESE_CI;\nexports.GB18030 = exports.GB18030_CHINESE_CI;\nexports.GEOSTD8 = exports.GEOSTD8_GENERAL_CI;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/handshake.js":"var Buffer = require('safe-buffer').Buffer;\nvar Packet = require('../packets/packet');\n\nfunction Handshake (args) {\n  this.protocolVersion = args.protocolVersion;\n  this.serverVersion = args.serverVersion;\n  this.capabilityFlags = args.capabilityFlags;\n  this.connectionId = args.connectionId;\n  this.authPluginData1 = args.authPluginData1;\n  this.authPluginData2 = args.authPluginData2;\n  this.characterSet = args.characterSet;\n  this.statusFlags = args.statusFlags;\n}\n\nHandshake.fromPacket = function (packet)\n{\n  var args = {};\n  args.protocolVersion = packet.readInt8();\n  args.serverVersion = packet.readNullTerminatedString('cesu8');\n  args.connectionId = packet.readInt32();\n  args.authPluginData1 = packet.readBuffer(8);\n  packet.skip(1);\n  var capabilityFlagsBuffer = Buffer.allocUnsafe(4);\n  capabilityFlagsBuffer[0] = packet.readInt8();\n  capabilityFlagsBuffer[1] = packet.readInt8();\n  if (packet.haveMoreData()) {\n    args.characterSet = packet.readInt8();\n    args.statusFlags = packet.readInt16();\n    // upper 2 bytes\n    capabilityFlagsBuffer[2] = packet.readInt8();\n    capabilityFlagsBuffer[3] = packet.readInt8();\n    args.capabilityFlags = capabilityFlagsBuffer.readUInt32LE(0);\n    args.authPluginDataLength = packet.readInt8();\n    packet.skip(10);\n  } else {\n    args.capabilityFlags = capabilityFlagsBuffer.readUInt16LE(0);\n  }\n  // var len = Math.max(12, args.authPluginDataLength - 8);\n  args.authPluginData2 = packet.readBuffer(12);\n\n  // TODO: expose combined authPluginData1 + authPluginData2 as authPluginData\n  //\n  // TODO\n  // if capabilities & CLIENT_PLUGIN_AUTH {\n  //   string[NUL]    auth-plugin name\n  //  }\n  return new Handshake(args);\n};\n\nHandshake.prototype.setScrambleData = function (cb) {\n  var self = this;\n  require('crypto').randomBytes(20, function (err, data) {\n    if (err) {\n      cb(err);\n      return;\n    }\n    self.authPluginData1 = data.slice(0, 8);\n    self.authPluginData2 = data.slice(8, 20);\n    cb();\n  });\n};\n\nHandshake.prototype.toPacket = function (sequenceId) {\n  var buffer, packet;\n  var length = 68 + Buffer.byteLength(this.serverVersion, 'utf8');\n  buffer = Buffer.alloc(length + 4, 0); // zero fill, 10 bytes filler later needs to contain zeros\n  packet = new Packet(sequenceId, buffer, 0, length + 4);\n  packet.offset = 4;\n  packet.writeInt8(this.protocolVersion);\n  packet.writeString(this.serverVersion, 'cesu8');\n  packet.writeInt8(0);\n  packet.writeInt32(this.connectionId);\n  packet.writeBuffer(this.authPluginData1);\n  packet.writeInt8(0);\n  var capabilityFlagsBuffer = Buffer.allocUnsafe(4);\n  capabilityFlagsBuffer.writeUInt32LE(this.capabilityFlags, 0);\n  packet.writeBuffer(capabilityFlagsBuffer.slice(0, 2));\n  packet.writeInt8(this.characterSet);\n  packet.writeInt16(this.statusFlags);\n  packet.writeBuffer(capabilityFlagsBuffer.slice(2, 4));\n  packet.writeInt8(21); // authPluginDataLength\n  packet.skip(10);\n  packet.writeBuffer(this.authPluginData2);\n  packet.writeInt8(0);\n  packet.writeString('mysql_native_password', 'latin1');\n  packet.writeInt8(0);\n  return packet;\n};\n\nmodule.exports = Handshake;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/handshake_response.js":"var Buffer = require('safe-buffer').Buffer;\n\nvar ClientConstants = require('../constants/client.js');\nvar Charsets = require('../constants/charsets.js');\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\nvar Packet = require('../packets/packet.js');\n\nvar auth41 = require('../auth_41.js');\n\nfunction HandshakeResponse (handshake)\n{\n  this.user = handshake.user || '';\n  this.database = handshake.database || '';\n  this.password = handshake.password || '';\n  this.passwordSha1 = handshake.passwordSha1;\n  this.authPluginData1 = handshake.authPluginData1;\n  this.authPluginData2 = handshake.authPluginData2;\n  this.compress = handshake.compress;\n  this.clientFlags = handshake.flags;\n  // TODO: pre-4.1 auth support\n  var authToken;\n  if (this.passwordSha1) {\n    authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, this.authPluginData1, this.authPluginData2);\n  } else {\n    authToken = auth41.calculateToken(this.password, this.authPluginData1, this.authPluginData2);\n  }\n  this.authToken = authToken;\n  this.charsetNumber = handshake.charsetNumber;\n  this.encoding = CharsetToEncoding[handshake.charsetNumber];\n  this.connectAttributes = handshake.connectAttributes;\n}\n\nHandshakeResponse.fromPacket = function (packet)\n{\n  var args = {};\n  args.clientFlags = packet.readInt32();\n\n  function isSet (flag) {\n    return args.clientFlags & ClientConstants[flag];\n  }\n\n  args.maxPacketSize = packet.readInt32();\n  args.charsetNumber = packet.readInt8();\n  var encoding = CharsetToEncoding[args.charsetNumber];\n  args.encoding = encoding;\n  packet.skip(23);\n  args.user = packet.readNullTerminatedString(encoding);\n  var authTokenLength;\n  if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n    authTokenLength = packet.readLengthCodedNumber(encoding);\n    args.authToken = packet.readBuffer(authTokenLength);\n  } else if (isSet('SECURE_CONNECTION')) {\n    authTokenLength = packet.readInt8();\n    args.authToken = packet.readBuffer(authTokenLength);\n  } else {\n    args.authToken = packet.readNullTerminatedString(encoding);\n  } if (isSet('CONNECT_WITH_DB')) {\n    args.database = packet.readNullTerminatedString(encoding);\n  }\n  if (isSet('PLUGIN_AUTH')) {\n    args.authPluginName = packet.readNullTerminatedString(encoding);\n  }\n  if (isSet('CONNECT_ATTRS')) {\n    var keysLength = packet.readLengthCodedNumber(encoding);\n    var keysEnd = packet.offset + keysLength;\n    var attrs = {};\n    while (packet.offset < keysEnd) {\n      attrs[packet.readLengthCodedString(encoding)] = packet.readLengthCodedString(encoding);\n    }\n    args.connectAttributes = attrs;\n  }\n  return args;\n};\n\nHandshakeResponse.prototype.serializeResponse = function (buffer) {\n  var self = this;\n  function isSet (flag) {\n    return self.clientFlags & ClientConstants[flag];\n  }\n\n  var packet = new Packet(0, buffer, 0, buffer.length);\n  packet.offset = 4;\n  packet.writeInt32(this.clientFlags);\n  packet.writeInt32(0); // max packet size. todo: move to config\n  packet.writeInt8(this.charsetNumber);\n  packet.skip(23);\n\n  var encoding = this.encoding;\n  packet.writeNullTerminatedString(this.user, encoding);\n\n  var authTokenLength, k;\n  if (isSet('PLUGIN_AUTH_LENENC_CLIENT_DATA')) {\n    packet.writeLengthCodedNumber(this.authToken.length);\n    packet.writeBuffer(this.authToken);\n  } else if (isSet('SECURE_CONNECTION')) {\n    packet.writeInt8(this.authToken.length);\n    packet.writeBuffer(this.authToken);\n  } else {\n    packet.writeBuffer(this.authToken);\n    packet.writeInt8(0);\n  } if (isSet('CONNECT_WITH_DB')) {\n    packet.writeNullTerminatedString(this.database, encoding);\n  }\n  if (isSet('PLUGIN_AUTH')) {\n    // TODO: pass from config\n    packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n  }\n  if (isSet('CONNECT_ATTRS')) {\n    var connectAttributes = this.connectAttributes || {};\n    var attrNames = Object.keys(connectAttributes);\n    var keysLength = 0;\n    for (k = 0; k < attrNames.length; ++k) {\n      keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n      keysLength += Packet.lengthCodedStringLength(connectAttributes[attrNames[k]], encoding);\n    }\n    packet.writeLengthCodedNumber(keysLength);\n    for (k = 0; k < attrNames.length; ++k) {\n      packet.writeLengthCodedString(attrNames[k], encoding);\n      packet.writeLengthCodedString(connectAttributes[attrNames[k]], encoding);\n    }\n  }\n  return packet;\n};\n\nHandshakeResponse.prototype.toPacket = function ()\n{\n  if (typeof this.user != 'string') {\n    throw new Error('\"user\" connection config prperty must be a string');\n  }\n  if (typeof this.database != 'string') {\n    throw new Error('\"database\" connection config prperty must be a string');\n  }\n  // dry run: calculate resulting packet length\n  var p = this.serializeResponse(Packet.MockBuffer());\n  return this.serializeResponse(Buffer.allocUnsafe(p.offset));\n};\n\nmodule.exports = HandshakeResponse;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/constants/charset_encodings.js":"// see tools/generate-charset-mapping.js\n// basicalliy result of \"SHOW COLLATION\" query\n\nmodule.exports = [\n  null, 'big5', 'latin2', 'dec8', 'cp850', 'latin1', 'hp8', 'koi8r',\n  'latin1', 'latin2', 'swe7', 'ascii', 'ujis', 'sjis', 'cp1251', 'latin1',\n  'hebrew', null, 'tis620', 'euckr', 'latin7', 'latin2', 'koi8u', 'cp1251',\n  'gb2312', 'greek', 'cp1250', 'latin2', 'gbk', 'cp1257', 'latin5', 'latin1',\n  'armscii8', 'cesu8', 'cp1250', 'ucs2', 'cp866', 'keybcs2', 'macintosh', 'macroman',\n  'cp852', 'latin7', 'latin7', 'macintosh', 'cp1250', 'utf8', 'utf8', 'latin1',\n  'latin1', 'latin1', 'cp1251', 'cp1251', 'cp1251', 'macroman', 'utf16', 'utf16',\n  'utf16le', 'cp1256', 'cp1257', 'cp1257', 'utf32', 'utf32', 'utf16le', 'binary',\n  'armscii8', 'ascii', 'cp1250', 'cp1256', 'cp866', 'dec8', 'greek', 'hebrew',\n  'hp8', 'keybcs2', 'koi8r', 'koi8u', null, 'latin2', 'latin5', 'latin7',\n  'cp850', 'cp852', 'swe7', 'cesu8', 'big5', 'euckr', 'gb2312', 'gbk',\n  'sjis', 'tis620', 'ucs2', 'ujis', 'geostd8', 'geostd8', 'latin1', 'cp932',\n  'cp932', 'eucjp', 'eucjp', 'cp1250', null, 'utf16', 'utf16', 'utf16',\n  'utf16', 'utf16', 'utf16', 'utf16', 'utf16', 'utf16', 'utf16', 'utf16',\n  'utf16', 'utf16', 'utf16', 'utf16', 'utf16', 'utf16', 'utf16', 'utf16',\n  'utf16', 'utf16', 'utf16', 'utf16', 'utf16', null, null, null,\n  'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2',\n  'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2',\n  'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2', 'ucs2',\n  null, null, null, null, null, null, null, 'ucs2',\n  'utf32', 'utf32', 'utf32', 'utf32', 'utf32', 'utf32', 'utf32', 'utf32',\n  'utf32', 'utf32', 'utf32', 'utf32', 'utf32', 'utf32', 'utf32', 'utf32',\n  'utf32', 'utf32', 'utf32', 'utf32', 'utf32', 'utf32', 'utf32', 'utf32',\n  null, null, null, null, null, null, null, null,\n  'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8',\n  'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8',\n  'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8', 'cesu8',\n  null, null, null, null, null, null, null, 'cesu8',\n  'utf8', 'utf8', 'utf8', 'utf8', 'utf8', 'utf8', 'utf8', 'utf8',\n  'utf8', 'utf8', 'utf8', 'utf8', 'utf8', 'utf8', 'utf8', 'utf8',\n  'utf8', 'utf8', 'utf8', 'utf8', 'utf8', 'utf8', 'utf8', 'utf8',\n  'gb18030', 'gb18030', 'gb18030'\n];\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/auth_41.js":"/*\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\n\n  SERVER:  public_seed=create_random_string()\n           send(public_seed)\n\n  CLIENT:  recv(public_seed)\n           hash_stage1=sha1(\"password\")\n           hash_stage2=sha1(hash_stage1)\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\n\n           // this three steps are done in scramble()\n\n           send(reply)\n\n\n  SERVER:  recv(reply)\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\n           candidate_hash2=sha1(hash_stage1)\n           check(candidate_hash2==hash_stage2)\n\nserver stores sha1(sha1(password)) ( hash_stag2)\n*/\n\nvar crypto = require('crypto');\nvar Buffer = require('safe-buffer').Buffer;\n\nfunction sha1 (msg, msg1, msg2) {\n  var hash = crypto.createHash('sha1');\n  hash.update(msg);\n  if (msg1) {\n    hash.update(msg1);\n  }\n\n  if (msg2) {\n    hash.update(msg2);\n  }\n\n  return hash.digest();\n}\n\nfunction xor (a, b) {\n  if (!Buffer.isBuffer(a)) {\n    a = Buffer.from(a, 'binary');\n  }\n\n  if (!Buffer.isBuffer(b)) {\n    b = Buffer.from(b, 'binary');\n  }\n\n  var result = Buffer.allocUnsafe(a.length);\n\n  for (var i = 0; i < a.length; i++) {\n    result[i] = (a[i] ^ b[i]);\n  }\n  return result;\n}\n\nfunction token (password, scramble1, scramble2) {\n  // TODO: use buffers (not sure why strings here)\n  if (!password) {\n    return Buffer.alloc(0);\n  }\n  var stage1 = sha1(password);\n  return module.exports.calculateTokenFromPasswordSha(stage1, scramble1, scramble2);\n}\n\nmodule.exports.calculateTokenFromPasswordSha = function (passwordSha, scramble1, scramble2) {\n  var stage2 = sha1(passwordSha);\n  var stage3 = sha1(scramble1, scramble2, stage2);\n  return xor(stage3, passwordSha);\n};\n\nmodule.exports.calculateToken = token;\n\nmodule.exports.verifyToken = function (publicSeed1, publicSeed2, token, doubleSha) {\n  var hashStage1 = xor(token, sha1(publicSeed1, publicSeed2, doubleSha));\n  var candidateHash2 = sha1(hashStage1);\n  // TODO better way to compare buffers?\n  return candidateHash2.toString('hex') == doubleSha.toString('hex');\n};\n\nmodule.exports.doubleSha1 = function (password) {\n  return sha1(sha1(password));\n};\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/query.js":"var Buffer = require('safe-buffer').Buffer;\nvar Packet = require('../packets/packet.js');\nvar CommandCode = require('../constants/commands.js');\nvar StringParser = require('../parsers/string.js');\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\n\nfunction Query (sql, charsetNumber)\n{\n  this.query = sql;\n  this.charsetNumber = charsetNumber;\n  this.encoding = CharsetToEncoding[charsetNumber];\n}\n\nQuery.prototype.toPacket = function ()\n{\n  var buf = StringParser.encode(this.query, this.encoding);\n  var length = 5 + buf.length;\n\n  var buffer = Buffer.allocUnsafe(length);\n  var packet = new Packet(0, buffer, 0, length);\n  packet.offset = 4;\n  packet.writeInt8(CommandCode.QUERY);\n  packet.writeBuffer(buf);\n  return packet;\n};\n\nmodule.exports = Query;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/resultset_header.js":"// TODO: rename to OK packet\n// https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar Packet = require('./packet.js');\nvar ClientConstants = require('../constants/client.js');\nvar ServerSatusFlags = require('../constants/server_status.js');\n\nvar EncodingToCharset = require('../constants/encoding_charset.js');\n\nvar SessionChangeTypeToName = ['systemVariables', 'schema', 'status', 'gtids'];\n\nfunction ResultSetHeader (packet, connection)\n{\n  var bigNumberStrings = connection.config.bigNumberStrings;\n  var encoding = connection.serverEncoding;\n\n  var flags = connection._handshakePacket.capabilityFlags;\n\n  var isSet = function (flag) {\n    return flags & ClientConstants[flag];\n  };\n\n  if (packet.buffer[packet.offset] !== 0) {\n    this.fieldCount = packet.readLengthCodedNumber();\n    if (this.fieldCount === null) {\n      this.infileName = packet.readString(undefined, encoding);\n    }\n    return;\n  }\n\n  this.fieldCount = packet.readInt8(); // skip OK byte\n  this.affectedRows = packet.readLengthCodedNumber(bigNumberStrings);\n  this.insertId = packet.readLengthCodedNumberSigned(bigNumberStrings);\n  this.info = '';\n\n\n  if (isSet('PROTOCOL_41')) {\n    this.serverStatus = packet.readInt16();\n    this.warningStatus = packet.readInt16();\n  } else if (isSet('TRANSACTIONS')) {\n    this.serverStatus = packet.readInt16();\n  }\n\n  var stateChanges = null;\n  if (isSet('SESSION_TRACK') && packet.offset < packet.end) {\n    this.info = packet.readLengthCodedString(encoding);\n    if (this.serverStatus && ServerSatusFlags.SERVER_SESSION_STATE_CHANGED) {\n\n      // session change info record - see\n      // https://dev.mysql.com/doc/internals/en/packet-OK_Packet.html#cs-sect-packet-ok-sessioninfo\n\n      var len = packet.offset < packet.end ? packet.readLengthCodedNumber() : 0;\n      var end = packet.offset + len;\n      var type, len, key, stateEnd;\n\n      if (len > 0) {\n        stateChanges = {\n          systemVariables: {},\n          schema: null,\n          // gtids: {},\n          trackStateChange: null\n        };\n      }\n\n      while (packet.offset < end) {\n        type = packet.readInt8();\n        len = packet.readLengthCodedNumber();\n        stateEnd = packet.offset + len;\n        key = packet.readLengthCodedString(encoding);\n        if (type === 0) {\n          var val = packet.readLengthCodedString(encoding);\n          stateChanges.systemVariables[key] = val;\n          if (key == 'character_set_client') {\n            var charsetNumber = EncodingToCharset[val];\n            connection.config.charsetNumber = charsetNumber;\n          }\n        } else if (type === 1) {\n          // TODO double check it's supposed to be the only value, not a list.\n          stateChanges.schema = key;\n        } else if (type === 2) {\n          stateChanges.trackStateChange = packet.readLengthCodedString(encoding);\n        } else {\n          // GTIDs (type == 3) or unknown type - just skip for now\n        }\n        packet.offset = stateEnd;\n      }\n    }\n  } else {\n    this.info = packet.readString(undefined, encoding);\n  }\n\n  if (stateChanges) {\n    this.stateChanges = stateChanges;\n  }\n\n  var m = this.info.match(/\\schanged:\\s*(\\d+)/i);\n  if (m !== null) {\n    this.changedRows = parseInt(m[1], 10);\n  }\n}\n\n// TODO: should be consistent instance member, but it's just easier here to have just function\nResultSetHeader.toPacket = function (fieldCount, insertId, sequenceId) {\n  var length = 4 + Packet.lengthCodedNumberLength(fieldCount);\n  if (typeof (insertId) != 'undefined') {\n    length += Packet.lengthCodedNumberLength(insertId);\n  }\n  var buffer = Buffer.allocUnsafe(length);\n  var packet = new Packet(0, buffer, 0, length);\n  packet.offset = 4;\n  packet.writeLengthCodedNumber(fieldCount);\n  if (typeof (insertId) != 'undefined') {\n    packet.writeLengthCodedNumber(insertId);\n  }\n  return packet;\n};\n\nmodule.exports = ResultSetHeader;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/constants/server_status.js":"// Manually extracted from mysql-5.5.23/include/mysql_com.h\n\n/**\n  Is raised when a multi-statement transaction\n  has been started, either explicitly, by means\n  of BEGIN or COMMIT AND CHAIN, or\n  implicitly, by the first transactional\n  statement, when autocommit=off.\n*/\nexports.SERVER_STATUS_IN_TRANS = 1;\nexports.SERVER_STATUS_AUTOCOMMIT = 2;  /* Server in auto_commit mode */\nexports.SERVER_MORE_RESULTS_EXISTS = 8;    /* Multi query - next query exists */\nexports.SERVER_QUERY_NO_GOOD_INDEX_USED = 16;\nexports.SERVER_QUERY_NO_INDEX_USED = 32;\n/**\n  The server was able to fulfill the clients request and opened a\n  read-only non-scrollable cursor for a query. This flag comes\n  in reply to COM_STMT_EXECUTE and COM_STMT_FETCH commands.\n*/\nexports.SERVER_STATUS_CURSOR_EXISTS = 64;\n/**\n  This flag is sent when a read-only cursor is exhausted, in reply to\n  COM_STMT_FETCH command.\n*/\nexports.SERVER_STATUS_LAST_ROW_SENT = 128;\nexports.SERVER_STATUS_DB_DROPPED = 256; /* A database was dropped */\nexports.SERVER_STATUS_NO_BACKSLASH_ESCAPES = 512;\n/**\n  Sent to the client if after a prepared statement reprepare\n  we discovered that the new statement returns a different\n  number of result set columns.\n*/\nexports.SERVER_STATUS_METADATA_CHANGED = 1024;\nexports.SERVER_QUERY_WAS_SLOW = 2048;\n\n/**\n  To mark ResultSet containing output parameter values.\n*/\nexports.SERVER_PS_OUT_PARAMS = 4096;\n\nexports.SERVER_STATUS_IN_TRANS_READONLY = 0x2000; // in a read-only transaction\nexports.SERVER_SESSION_STATE_CHANGED = 0x4000;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/constants/encoding_charset.js":"// inverse of charset_encodings\n// given encoding, get matching mysql charset number\n\nmodule.exports = {\n  big5: 1,\n  latin2: 2,\n  dec8: 3,\n  cp850: 4,\n  latin1: 5,\n  hp8: 6,\n  koi8r: 7,\n  swe7: 10,\n  ascii: 11,\n  ujis: 12,\n  sjis: 13,\n  cp1251: 14,\n  hebrew: 16,\n  tis620: 18,\n  euckr: 19,\n  latin7: 20,\n  koi8u: 22,\n  gb2312: 24,\n  greek: 25,\n  cp1250: 26,\n  gbk: 28,\n  cp1257: 29,\n  latin5: 30,\n  armscii8: 32,\n  cesu8: 33,\n  ucs2: 35,\n  cp866: 36,\n  keybcs2: 37,\n  macintosh: 38,\n  macroman: 39,\n  cp852: 40,\n  utf8: 45,\n  utf8mb4: 45,\n  utf16: 54,\n  utf16le: 56,\n  cp1256: 57,\n  utf32: 60,\n  binary: 63,\n  geostd8: 92,\n  cp932: 95,\n  eucjp: 97,\n  gb18030: 248\n};\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/column_definition.js":"var Buffer = require('safe-buffer').Buffer;\nvar Packet = require('../packets/packet');\nvar StringParser = require('../parsers/string');\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\n// creating JS string is relatively expensive (compared to\n// reading few bytes from buffer) because all string properties\n// except for name are unlikely to be used we postpone\n// string conversion until property access\n//\n// TODO: watch for integration benchmarks (one with real network buffer)\n// there could be bad side effect as keeping reference to a buffer makes it\n// sit in the memory longer (usually until final .query() callback)\n// Latest v8 perform much better in regard to bufferer -> string conversion,\n// at some point of time this optimisation might become unnecessary\n// see https://github.com/sidorares/node-mysql2/pull/137\n//\nfunction ColumnDefinition (packet, clientEncoding)\n{\n  this._buf = packet.buffer;\n  this._clientEncoding = clientEncoding;\n\n  this._catalogLength = packet.readLengthCodedNumber();\n  this._catalogStart = packet.offset;\n  packet.offset += this._catalogLength;\n\n  this._schemaLength = packet.readLengthCodedNumber();\n  this._schemaStart = packet.offset;\n  packet.offset += this._schemaLength;\n\n  this._tableLength = packet.readLengthCodedNumber();\n  this._tableStart = packet.offset;\n  packet.offset += this._tableLength;\n\n  this._orgTableLength = packet.readLengthCodedNumber();\n  this._orgTableStart = packet.offset;\n  packet.offset += this._orgTableLength;\n\n  // name is always used, don't make it lazy\n  var _nameLength = packet.readLengthCodedNumber();\n  var _nameStart = packet.offset;\n  packet.offset += _nameLength;\n\n  this._orgNameLength = packet.readLengthCodedNumber();\n  this._orgNameStart = packet.offset;\n  packet.offset += this._orgNameLength;\n\n  packet.skip(1); //  length of the following fields (always 0x0c)\n  this.characterSet = packet.readInt16();\n  this.encoding = CharsetToEncoding[this.characterSet];\n\n  this.name = StringParser.decode(this._buf.slice(_nameStart, _nameStart + _nameLength), this.encoding === 'binary' ? this._clientEncoding : this.encoding);\n\n  this.columnLength = packet.readInt32();\n  this.columnType = packet.readInt8();\n  this.flags = packet.readInt16();\n  this.decimals = packet.readInt8();\n}\n\nvar addString = function (name) {\n  Object.defineProperty(ColumnDefinition.prototype, name, {get: function () {\n    var start = this['_' + name + 'Start'];\n    var end = start + this['_' + name + 'Length'];\n    return StringParser.decode(this._buf.slice(start, end), this.encoding === 'binary' ? this._clientEncoding : this.encoding);\n  }});\n};\n\naddString('catalog');\naddString('schema');\naddString('table');\naddString('orgTable');\naddString('orgName');\n\n// node-mysql compatibility: alias \"db\" to \"schema\"\nObject.defineProperty(ColumnDefinition.prototype, 'db', {get: function () {\n  var start = this._schemaStart;\n  var end = start._shemaLength;\n  return this._buf.utf8Slice(start, end);\n}});\n\n\nColumnDefinition.prototype.inspect = function () {\n  return {\n    catalog     : this.catalog,\n    schema      : this.schema,\n    name        : this.name,\n    orgName     : this.orgName,\n    table       : this.table,\n    orgTable    : this.orgTable,\n    characterSet: this.characterSet,\n    columnLength: this.columnLength,\n    columnType  : this.columnType,\n    flags       : this.flags,\n    decimals    : this.decimals\n  };\n};\n\nvar fields = ['catalog', 'schema', 'table', 'orgTable', 'name', 'orgName'];\n\nColumnDefinition.toPacket = function (column, sequenceId)\n{\n  var length = 17; // = 4 padding + 1 + 12 for the rest\n  fields.forEach(function (field) {\n    length += Packet.lengthCodedStringLength(column[field], CharsetToEncoding[column.characterSet]);\n  });\n\n  var buffer = Buffer.allocUnsafe(length);\n\n  function writeField (name) {\n    packet.writeLengthCodedString(column[name], CharsetToEncoding[column.characterSet]);\n  }\n  var packet = new Packet(sequenceId, buffer, 0, length);\n  packet.offset = 4;\n  fields.forEach(writeField);\n  packet.writeInt8(0x0c);\n  packet.writeInt16(column.characterSet);\n  packet.writeInt32(column.columnLength);\n  packet.writeInt8(column.columnType);\n  packet.writeInt16(column.flags);\n  packet.writeInt8(column.decimals);\n  packet.writeInt16(0); // filler\n  return packet;\n};\n\nmodule.exports = ColumnDefinition;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/text_row.js":"var Buffer = require('safe-buffer').Buffer;\nvar Packet = require('../packets/packet');\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\nfunction TextRow (columns)\n{\n  this.columns = columns || [];\n}\n\nTextRow.fromPacket = function (packet) {\n  // packet.reset(); // set offset to starting point?\n  var columns = [];\n  while (packet.haveMoreData()) {\n    columns.push(packet.readLengthCodedString());\n  }\n  return new TextRow(columns);\n};\n\nTextRow.toPacket = function (columns, encoding) {\n  var sequenceId = 0; // TODO remove, this is calculated now in connecton\n  var buffer, packet;\n  var length = 0;\n  columns.forEach(function (val) {\n    if (val === null || typeof (val) == 'undefined') {\n      ++length;\n      return;\n    }\n    length += Packet.lengthCodedStringLength(val.toString(10), encoding);\n  });\n\n  buffer = Buffer.allocUnsafe(length + 4);\n  packet = new Packet(sequenceId, buffer, 0, length + 4);\n  packet.offset = 4;\n  columns.forEach(function (val) {\n    if (val === null) {\n      packet.writeNull();\n      return;\n    }\n    if (typeof val == 'undefined') {\n      packet.writeInt8(0);\n      return;\n    }\n    packet.writeLengthCodedString(val.toString(10), encoding);\n  });\n  return packet;\n};\n\nmodule.exports = TextRow;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/binary_row.js":"var Types = require('../constants/types');\nvar Packet = require('../packets/packet');\n\nfunction BinaryRow (columns)\n{\n  this.columns = columns || [];\n}\n\nvar binaryReader = new Array(256);\n\n  // TODO: replace with constants.MYSQL_TYPE_*\nbinaryReader[Types.DECIMAL] = Packet.prototype.readLengthCodedString;\nbinaryReader[1] = Packet.prototype.readInt8;   // tiny\nbinaryReader[2] = Packet.prototype.readInt16;  // short\nbinaryReader[3] = Packet.prototype.readInt32;  // long\nbinaryReader[4] = Packet.prototype.readFloat;  // float\nbinaryReader[5] = Packet.prototype.readDouble; // double\nbinaryReader[6] = Packet.prototype.assertInvalid; // null, should be skipped vie null bitmap\nbinaryReader[7] = Packet.prototype.readTimestamp; // timestamp, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIMESTAMP\nbinaryReader[8] = Packet.prototype.readInt64;  // long long\nbinaryReader[9] = Packet.prototype.readInt32;  // int24\nbinaryReader[10] = Packet.prototype.readTimestamp; // date\nbinaryReader[11] = Packet.prototype.readTime;  // time, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIME\nbinaryReader[12] = Packet.prototype.readDateTime;  // datetime, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_DATETIME\nbinaryReader[13] = Packet.prototype.readInt16;  // year\nbinaryReader[Types.VAR_STRING] = Packet.prototype.readLengthCodedString;  // var string\n  // TODO: complete list of types...\n\nBinaryRow.fromPacket = function (fields, packet) {\n  var columns = new Array(fields.length);\n  var ok = packet.readInt8(); // TODO check it's 0\n  var nullBitmapLength = Math.floor((fields.length + 7 + 2) / 8);\n  // TODO: read and interpret null bitmap\n  packet.skip(nullBitmapLength);\n  for (var i = 0; i < columns.length; ++i) {\n    columns[i] = binaryReader[fields[i].columnType].apply(packet);\n  }\n  return new BinaryRow(columns);\n};\n\nBinaryRow.prototype.toPacket = function (sequenceId) {\n  throw 'Not implemented';\n};\n\nmodule.exports = BinaryRow;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/constants/types.js":"// Manually extracted from mysql-5.5.23/include/mysql_com.h\n// some more info here: http://dev.mysql.com/doc/refman/5.5/en/c-api-prepared-statement-type-codes.html\nexports.DECIMAL = 0x00; // aka DECIMAL (http://dev.mysql.com/doc/refman/5.0/en/precision-math-decimal-changes.html)\nexports.TINY = 0x01; // aka TINYINT, 1 byte\nexports.SHORT = 0x02; // aka SMALLINT, 2 bytes\nexports.LONG = 0x03; // aka INT, 4 bytes\nexports.FLOAT = 0x04; // aka FLOAT, 4-8 bytes\nexports.DOUBLE = 0x05; // aka DOUBLE, 8 bytes\nexports.NULL = 0x06; // NULL (used for prepared statements, I think)\nexports.TIMESTAMP = 0x07; // aka TIMESTAMP\nexports.LONGLONG = 0x08; // aka BIGINT, 8 bytes\nexports.INT24 = 0x09; // aka MEDIUMINT, 3 bytes\nexports.DATE = 0x0a; // aka DATE\nexports.TIME = 0x0b; // aka TIME\nexports.DATETIME = 0x0c; // aka DATETIME\nexports.YEAR = 0x0d; // aka YEAR, 1 byte (don't ask)\nexports.NEWDATE = 0x0e; // aka ?\nexports.VARCHAR = 0x0f; // aka VARCHAR (?)\nexports.BIT = 0x10; // aka BIT, 1-8 byte\nexports.JSON = 0xf5;\nexports.NEWDECIMAL = 0xf6; // aka DECIMAL\nexports.ENUM = 0xf7; // aka ENUM\nexports.SET = 0xf8; // aka SET\nexports.TINY_BLOB = 0xf9; // aka TINYBLOB, TINYTEXT\nexports.MEDIUM_BLOB = 0xfa; // aka MEDIUMBLOB, MEDIUMTEXT\nexports.LONG_BLOB = 0xfb; // aka LONGBLOG, LONGTEXT\nexports.BLOB = 0xfc; // aka BLOB, TEXT\nexports.VAR_STRING = 0xfd; // aka VARCHAR, VARBINARY\nexports.STRING = 0xfe; // aka CHAR, BINARY\nexports.GEOMETRY = 0xff; // aka GEOMETRY\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/prepare_statement.js":"var Buffer = require('safe-buffer').Buffer;\nvar Packet = require('../packets/packet');\nvar CommandCodes = require('../constants/commands');\nvar StringParser = require('../parsers/string.js');\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\nfunction PrepareStatement (sql, charsetNumber)\n{\n  this.query = sql;\n  this.charsetNumber = charsetNumber;\n  this.encoding = CharsetToEncoding[charsetNumber];\n}\n\nPrepareStatement.prototype.toPacket = function ()\n{\n  var buf = StringParser.encode(this.query, this.encoding);\n  var length = 5 + buf.length;\n\n  var buffer = Buffer.allocUnsafe(length);\n  var packet = new Packet(0, buffer, 0, length);\n  packet.offset = 4;\n  packet.writeInt8(CommandCodes.STMT_PREPARE);\n  packet.writeBuffer(buf);\n  return packet;\n};\n\nmodule.exports = PrepareStatement;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/close_statement.js":"var Buffer = require('safe-buffer').Buffer;\n\nvar Packet = require('../packets/packet');\nvar CommandCodes = require('../constants/commands');\n\nfunction CloseStatement (id)\n{\n  this.id = id;\n}\n\n// note: no response sent back\nCloseStatement.prototype.toPacket = function ()\n{\n  var packet = new Packet(0, Buffer.allocUnsafe(9), 0, 9);\n  packet.offset = 4;\n  packet.writeInt8(CommandCodes.STMT_CLOSE);\n  packet.writeInt32(this.id);\n  return packet;\n};\n\nmodule.exports = CloseStatement;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/prepared_statement_header.js":"var Packet = require('../packets/packet');\n\nfunction PreparedStatementHeader (packet)\n{\n  packet.skip(1);     // should be 0\n  this.id = packet.readInt32();\n  this.fieldCount = packet.readInt16();\n  this.parameterCount = packet.readInt16();\n  packet.skip(1);     // should be 0\n  this.warningCount = packet.readInt16();\n}\n\n// TODO: toPacket\n\nmodule.exports = PreparedStatementHeader;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/execute.js":"var Buffer = require('safe-buffer').Buffer;\nvar CursorType = require('../constants/cursor');\nvar CommandCodes = require('../constants/commands');\nvar Types = require('../constants/types');\nvar Packet = require('../packets/packet');\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\nfunction Execute (id, parameters, charsetNumber)\n{\n  this.id = id;\n  this.parameters = parameters;\n  this.encoding = CharsetToEncoding[charsetNumber];\n}\n\nExecute.prototype.toPacket = function ()\n{\n\n  // TODO: don't try to calculate packet length in advance, allocate some big buffer in advance (header + 256 bytes?)\n  // and copy + reallocate if not enough\n\n  var i;\n  // 0 + 4 - length, seqId\n  // 4 + 1 - COM_EXECUTE\n  // 5 + 4 - stmtId\n  // 9 + 1 - flags\n  // 10 + 4 - iteration-count (always 1)\n  var length = 14;\n  if (this.parameters && this.parameters.length > 0)\n  {\n    length += Math.floor((this.parameters.length + 7) / 8);\n    length += 1; // new-params-bound-flag\n    length += 2 * this.parameters.length;  // type byte for each parameter if new-params-bound-flag is set\n    for (i = 0; i < this.parameters.length; i++)\n    {\n      if (this.parameters[i] !== null) {\n        if (Object.prototype.toString.call(this.parameters[i]) == '[object Date]') {\n          var d = this.parameters[i];\n          // TODO: move to asMysqlDateTime()\n          this.parameters[i] = [d.getFullYear(), d.getMonth() + 1, d.getDate()].join('-') +\n            ' ' + [d.getHours(), d.getMinutes(), d.getSeconds()].join(':');\n        }\n        if (Buffer.isBuffer(this.parameters[i])) {\n          length += Packet.lengthCodedNumberLength(this.parameters[i].length);\n          length += this.parameters[i].length;\n        }\n        else {\n          var str = this.parameters[i].toString();\n          length += Packet.lengthCodedStringLength(str, this.encoding);\n        }\n      }\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var packet = new Packet(0, buffer, 0, length);\n  packet.offset = 4;\n  packet.writeInt8(CommandCodes.STMT_EXECUTE);\n  packet.writeInt32(this.id);\n  packet.writeInt8(CursorType.NO_CURSOR);  // flags\n  packet.writeInt32(1); // iteration-count, always 1\n  if (this.parameters && this.parameters.length > 0) {\n\n    var bitmap = 0;\n    var bitValue = 1;\n    for (i = 0; i < this.parameters.length; i++)\n    {\n      if (this.parameters[i] === null) {\n        bitmap += bitValue;\n      }\n      bitValue *= 2;\n      if (bitValue == 256) {\n        packet.writeInt8(bitmap);\n        bitmap = 0;\n        bitValue = 1;\n      }\n    }\n    if (bitValue != 1) {\n      packet.writeInt8(bitmap);\n    }\n\n    // TODO: explain meaning of the flag\n    // afaik, if set n*2 bytes with type of parameter are sent before parameters\n    // if not, previous execution types are used (TODO prooflink)\n    packet.writeInt8(1); // new-params-bound-flag\n\n    // TODO: don't typecast always to sting, use parameters type\n    for (i = 0; i < this.parameters.length; i++)\n    {\n      if (this.parameters[i] !== null) {\n        packet.writeInt16(Types.VAR_STRING);\n      } else {\n        packet.writeInt16(Types.NULL);\n      }\n    }\n\n    for (i = 0; i < this.parameters.length; i++)\n    {\n      if (this.parameters[i] !== null) {\n        if (Buffer.isBuffer(this.parameters[i])) {\n          packet.writeLengthCodedBuffer(this.parameters[i]);\n        } else {\n          packet.writeLengthCodedString(this.parameters[i].toString(), this.encoding);\n        }\n      }\n    }\n  }\n  return packet;\n};\n\nmodule.exports = Execute;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/constants/cursor.js":"module.exports = {\n  NO_CURSOR: 0,\n  READ_ONLY: 1,\n  FOR_UPDATE: 2,\n  SCROLLABLE: 3\n};\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/packets/change_user.js":"var Buffer = require('safe-buffer').Buffer;\n\nvar CommandCode = require('../constants/commands.js');\nvar ClientConstants = require('../constants/client.js');\nvar Packet = require('../packets/packet.js');\nvar auth41 = require('../auth_41.js');\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\n\nfunction ChangeUser (opts)\n{\n  this.flags = opts.flags;\n  this.user = opts.user || '';\n  this.database = opts.database || '';\n  this.password = opts.password || '';\n  this.passwordSha1 = opts.passwordSha1;\n  this.authPluginData1 = opts.authPluginData1;\n  this.authPluginData2 = opts.authPluginData2;\n  this.connectAttributes = opts.connectAttrinutes || {};\n  var authToken;\n  if (this.passwordSha1) {\n    authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, this.authPluginData1, this.authPluginData2);\n  } else {\n    authToken = auth41.calculateToken(this.password, this.authPluginData1, this.authPluginData2);\n  }\n  this.authToken = authToken;\n  this.charsetNumber = opts.charsetNumber;\n}\n\n// TODO\n// ChangeUser.fromPacket = function(packet)\n// };\n\nChangeUser.prototype.serializeToBuffer = function (buffer)\n{\n  var self = this;\n  function isSet (flag) {\n    return self.flags & ClientConstants[flag];\n  }\n\n  var packet = new Packet(0, buffer, 0, buffer.length);\n  packet.offset = 4;\n\n  var encoding = CharsetToEncoding[this.charsetNumber];\n\n  packet.writeInt8(CommandCode.CHANGE_USER);\n  packet.writeNullTerminatedString(this.user, encoding);\n  if (isSet('SECURE_CONNECTION')) {\n    packet.writeInt8(this.authToken.length);\n    packet.writeBuffer(this.authToken);\n  } else {\n    packet.writeBuffer(this.authToken);\n    packet.writeInt8(0);\n  }\n  packet.writeNullTerminatedString(this.database, encoding);\n  packet.writeInt16(this.charsetNumber);\n\n  if (isSet('PLUGIN_AUTH')) {\n    packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n  }\n\n  if (isSet('CONNECT_ATTRS')) {\n    var connectAttributes = this.connectAttributes;\n    var attrNames = Object.keys(connectAttributes);\n    var keysLength = 0;\n    for (k = 0; k < attrNames.length; ++k) {\n      keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n      keysLength += Packet.lengthCodedStringLength(connectAttributes[attrNames[k]], encoding);\n    }\n    packet.writeLengthCodedNumber(keysLength);\n    for (k = 0; k < attrNames.length; ++k) {\n      packet.writeLengthCodedString(attrNames[k], encoding);\n      packet.writeLengthCodedString(connectAttributes[attrNames[k]], encoding);\n    }\n  }\n  return packet;\n};\n\nChangeUser.prototype.toPacket = function ()\n{\n  if (typeof this.user != 'string') {\n    throw new Error('\"user\" connection config property must be a string');\n  }\n\n  if (typeof this.database != 'string') {\n    throw new Error('\"database\" connection config property must be a string');\n  }\n\n  // dry run: calculate resulting packet length\n  var p = this.serializeToBuffer(Packet.MockBuffer());\n  return this.serializeToBuffer(Buffer.allocUnsafe(p.offset));\n};\n\nmodule.exports = ChangeUser;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/index.js":"'client_handshake server_handshake query prepare close_statement execute ping register_slave binlog_dump change_user quit'.split(' ').forEach(function (name) {\n  var ctor = require('./' + name + '.js');\n  module.exports[ctor.name] = ctor;\n});\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/client_handshake.js":"var util = require('util');\n\nvar Command = require('./command.js');\nvar Packets = require('../packets/index.js');\nvar ClientConstants = require('../constants/client.js');\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\nfunction ClientHandshake (clientFlags)\n{\n  this.handshake = null;\n  this.clientFlags = clientFlags;\n  Command.call(this);\n}\nutil.inherits(ClientHandshake, Command);\n\nClientHandshake.prototype.start = function () {\n  return ClientHandshake.prototype.handshakeInit;\n};\n\nClientHandshake.prototype.sendSSLRequest = function (connection) {\n  var sslRequest = new Packets.SSLRequest(this.clientFlags, connection.config.charsetNumber);\n  connection.writePacket(sslRequest.toPacket());\n};\n\nfunction flagNames (flags) {\n  var res = [];\n  for (var c in ClientConstants) {\n    if (flags & ClientConstants[c]) {\n      res.push(c.replace(/_/g, ' ').toLowerCase());\n    }\n  }\n  return res;\n}\n\nClientHandshake.prototype.sendCredentials = function (connection) {\n  if (connection.config.debug) {\n    console.log('Sending handshake packet: flags:%d=(%s)', this.clientFlags,\n      flagNames(this.clientFlags).join(', '));\n  }\n\n  this.user = connection.config.user;\n  this.password = connection.config.password;\n  this.passwordSha1 = connection.config.passwordSha1;\n  this.database = connection.config.database;\n\n  var handshakeResponse = new Packets.HandshakeResponse({\n    flags   : this.clientFlags,\n    user    : this.user,\n    database: this.database,\n    password: this.password,\n    passwordSha1   : this.passwordSha1,\n    charsetNumber  : connection.config.charsetNumber,\n    authPluginData1: this.handshake.authPluginData1,\n    authPluginData2: this.handshake.authPluginData2,\n    compress: connection.config.compress,\n    connectAttributes: connection.config.connectAttributes\n  });\n  connection.writePacket(handshakeResponse.toPacket());\n};\n\nvar auth41 = require('../auth_41.js');\nClientHandshake.prototype.calculateNativePasswordAuthToken = function (authPluginData) {\n  // TODO: dont split into authPluginData1 and authPluginData2, instead join when 1 & 2 received\n  var authPluginData1 = authPluginData.slice(0, 8);\n  var authPluginData2 = authPluginData.slice(8, 20);\n  var authToken;\n  if (this.passwordSha1) {\n    authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, authPluginData1, authPluginData2);\n  } else {\n    authToken = auth41.calculateToken(this.password, authPluginData1, authPluginData2);\n  }\n  return authToken;\n};\n\nClientHandshake.prototype.handshakeInit = function (helloPacket, connection) {\n  var command = this;\n\n  this.on('error', function (e) {\n    connection._fatalError = e;\n    connection._protocolError = e;\n  });\n\n  this.handshake = Packets.Handshake.fromPacket(helloPacket);\n  if (connection.config.debug) {\n    console.log('Server hello packet: capability flags:%d=(%s)', this.handshake.capabilityFlags,\n      flagNames(this.handshake.capabilityFlags).join(', '));\n  }\n  connection.serverCapabilityFlags = this.handshake.capabilityFlags;\n  connection.serverEncoding = CharsetToEncoding[this.handshake.characterSet];\n  connection.connectionId = this.handshake.connectionId;\n  var serverSSLSupport = this.handshake.capabilityFlags & ClientConstants.SSL;\n\n  // use compression only if requested by client and supported by server\n  connection.config.compress = connection.config.compress && (this.handshake.capabilityFlags & ClientConstants.COMPRESS);\n  this.clientFlags = this.clientFlags | connection.config.compress;\n\n  if (connection.config.ssl) {\n    // client requires SSL but server does not support it\n    if (!serverSSLSupport) {\n      var err = new Error('Server does not support secure connnection');\n      err.code = 'HANDSHAKE_NO_SSL_SUPPORT';\n      err.fatal = true;\n      command.emit('error', err);\n      return false;\n    }\n    // send ssl upgrade request and immediately upgrade connection to secure\n    this.clientFlags |= ClientConstants.SSL;\n    this.sendSSLRequest(connection);\n    connection.startTLS(function (err) {\n      // after connection is secure\n      if (err) {\n        // SSL negotiation error are fatal\n        err.code = 'HANDSHAKE_SSL_ERROR';\n        err.fatal = true;\n        command.emit('error', err);\n        return;\n      }\n      // rest of communication is encrypted\n      command.sendCredentials(connection);\n    });\n  } else {\n    this.sendCredentials(connection);\n  }\n  return ClientHandshake.prototype.handshakeResult;\n};\n\nClientHandshake.prototype.handshakeResult = function (packet, connection) {\n  var marker = packet.peekByte();\n  if (marker === 0xfe || marker === 1) {\n    var asr, asrmd;\n    var authSwitchHandlerParams = {};\n    if (marker === 1) {\n      asrmd = Packets.AuthSwitchRequestMoreData.fromPacket(packet);\n      authSwitchHandlerParams.pluginData = asrmd.data;\n    } else {\n      asr = Packets.AuthSwitchRequest.fromPacket(packet);\n      authSwitchHandlerParams.pluginName = asr.pluginName;\n      authSwitchHandlerParams.pluginData = asr.pluginData;\n    }\n    if (authSwitchHandlerParams.pluginName == 'mysql_native_password') {\n      var authToken = this.calculateNativePasswordAuthToken(authSwitchHandlerParams.pluginData);\n      connection.writePacket(new Packets.AuthSwitchResponse(authToken).toPacket());\n    } else if (connection.config.authSwitchHandler) {\n      connection.config.authSwitchHandler(authSwitchHandlerParams, function (err, data) {\n        if (err) {\n          connection.emit('error', err);\n          return;\n        }\n        connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n      });\n    } else {\n      connection.emit('error', new Error('Server requires auth switch, but no auth switch handler provided'));\n      return null;\n    }\n    return ClientHandshake.prototype.handshakeResult;\n  }\n\n  if (marker !== 0) {\n    var err = new Error('Unexpected packet during handshake phase');\n    if (this.onResult) {\n      this.onResult(err);\n    } else {\n      connection.emit('error', err);\n    }\n    return null;\n  }\n\n  // this should be called from ClientHandshake command only\n  // and skipped when called from ChangeUser command\n  if (!connection.authorized) {\n    connection.authorized = true;\n    if (connection.config.compress) {\n      var enableCompression = require('../compressed_protocol.js').enableCompression;\n      enableCompression(connection);\n    }\n  }\n\n  if (this.onResult) {\n    this.onResult(null);\n  }\n  return null;\n};\n\nmodule.exports = ClientHandshake;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/command.js":"var EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nfunction Command () {\n  EventEmitter.call(this);\n  this.next = null;\n}\nutil.inherits(Command, EventEmitter);\n\n// slow. debug only\nCommand.prototype.stateName = function () {\n  var state = this.next;\n  for (var i in this) {\n    if (this[i] == state && i != 'next') {\n      return i;\n    }\n  }\n  return 'unknown name';\n};\n\nCommand.prototype.execute = function (packet, connection) {\n\n  if (!this.next) {\n    this.next = this.start;\n    connection._resetSequenceId();\n  }\n\n  if (packet && packet.isError()) {\n    var err = packet.asError(connection.clientEncoding);\n    if (this.onResult) {\n      this.onResult(err);\n    } else {\n      this.emit('error', err);\n    }\n    return true;\n  }\n\n  // TODO: don't return anything from execute, it's ugly and error-prone. Listen for 'end' event in connection\n  this.next = this.next(packet, connection);\n  if (this.next) {\n    return false;\n  } else {\n    this.emit('end');\n    return true;\n  }\n};\n\nmodule.exports = Command;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/server_handshake.js":"var util = require('util');\n\nvar ClientConstants = require('../constants/client.js');\nvar CommandCode = require('../constants/commands.js');\nvar Errors = require('../constants/errors.js');\n\nvar Command = require('./command.js');\nvar Packets = require('../packets/index.js');\nvar auth41 = require('../auth_41.js');\n\nfunction ServerHandshake (args)\n{\n  Command.call(this);\n  this.args = args;\n  /*\n  this.protocolVersion = args.protocolVersion || 10;\n  this.serverVersion   = args.serverVersion;\n  this.connectionId    = args.connectionId,\n  this.statusFlags     = args.statusFlags,\n  this.characterSet    = args.characterSet,\n  this.capabilityFlags = args.capabilityFlags || 512;\n  */\n}\nutil.inherits(ServerHandshake, Command);\n\nServerHandshake.prototype.start = function (packet, connection) {\n  var serverHelloPacket = new Packets.Handshake(this.args);\n  this.serverHello = serverHelloPacket;\n  serverHelloPacket.setScrambleData(function (err) {\n    if (err) {\n      connection.emit('error', new Error('Error generating random bytes'));\n      return;\n    }\n    connection.writePacket(serverHelloPacket.toPacket(0));\n  });\n  return ServerHandshake.prototype.readClientReply;\n};\n\nServerHandshake.prototype.readClientReply = function (packet, connection) {\n  // check auth here\n  var clientHelloReply = new Packets.HandshakeResponse.fromPacket(packet);\n\n  // TODO check we don't have something similar already\n  connection.clientHelloReply = clientHelloReply;\n\n  if (this.args.authCallback) {\n    try {\n      this.args.authCallback({\n        user: clientHelloReply.user,\n        database: clientHelloReply.database,\n        address: connection.stream.remoteAddress,\n        authPluginData1: this.serverHello.authPluginData1,\n        authPluginData2: this.serverHello.authPluginData2,\n        authToken: clientHelloReply.authToken\n      }, function (err, mysqlError) {\n        // if (err)\n        if (!mysqlError) {\n          connection.writeOk();\n        } else {\n          // TODO create constants / errorToCode\n          // 1045 = ER_ACCESS_DENIED_ERROR\n          connection.writeError({message: mysqlError.message || '', code: mysqlError.code || 1045});\n          connection.close();\n        }\n      });\n    } catch (err) {\n      throw err;\n      // TODO\n      // connection.writeError(err)\n    }\n  } else {\n    connection.writeOk();\n  }\n  return ServerHandshake.prototype.dispatchCommands;\n};\n\nServerHandshake.prototype.dispatchCommands = function (packet, connection) {\n  // command from client to server\n  var knownCommand = true;\n  var encoding = connection.clientHelloReply.encoding;\n  var commandCode = packet.readInt8();\n  switch (commandCode) {\n  case CommandCode.QUIT:\n    if (connection.listeners('quit').length) {\n      connection.emit('quit');\n    } else {\n      connection.stream.end();\n    }\n    break;\n\n  case CommandCode.INIT_DB:\n    if (connection.listeners('init_db').length) {\n      var schemaName = packet.readString(encoding);\n      connection.emit('init_db', schemaName);\n    } else {\n      connection.writeOk();\n    }\n    break;\n\n  case CommandCode.QUERY:\n    if (connection.listeners('query').length) {\n      var query = packet.readString(undefined, encoding);\n      connection.emit('query', query);\n    } else {\n      connection.writeError({\n        code: Errors.HA_ERR_INTERNAL_ERROR,\n        message: 'No query handler'\n      });\n    }\n    break;\n\n  case CommandCode.FIELD_LIST:\n    if (connection.listeners('field_list').length) {\n      var table = packet.readNullTerminatedString();\n      var fields = packet.readString(encoding);\n      connection.emit('field_list', table, fields);\n    } else {\n      connection.writeError({\n        code: Errors.ER_WARN_DEPRECATED_SYNTAX,\n        message: 'As of MySQL 5.7.11, COM_FIELD_LIST is deprecated and will be removed in a future version of MySQL.'\n      });\n    }\n    break;\n\n  case CommandCode.PING:\n    if (connection.listeners('ping').length) {\n      connection.emit('ping');\n    } else {\n      connection.writeOk();\n    }\n    break;\n\n  default:\n    knownCommand = false;\n  }\n\n  if (connection.listeners('packet').length) {\n    connection.emit('packet', packet.clone(), knownCommand, commandCode);\n  } else {\n    if (!knownCommand) {\n      console.log('Unknown command:', commandCode);\n    }\n  }\n\n  return ServerHandshake.prototype.dispatchCommands;\n};\n\nmodule.exports = ServerHandshake;\n\n// TODO: implement server-side 4.1 authentication\n/*\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\n\n  SERVER:  public_seed=create_random_string()\n           send(public_seed)\n\n  CLIENT:  recv(public_seed)\n           hash_stage1=sha1(\"password\")\n           hash_stage2=sha1(hash_stage1)\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\n\n           // this three steps are done in scramble()\n\n           send(reply)\n\n\n  SERVER:  recv(reply)\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\n           candidate_hash2=sha1(hash_stage1)\n           check(candidate_hash2==hash_stage2)\n\nserver stores sha1(sha1(password)) ( hash_stag2)\n*/\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/query.js":"var fs = require('fs');\nvar util = require('util');\nvar Buffer = require('safe-buffer').Buffer;\n\nvar Readable = require('readable-stream');\nvar objectAssign = require('object-assign');\n\nvar Command = require('./command.js');\nvar Packets = require('../packets/index.js');\nvar compileParser = require('../compile_text_parser.js');\nvar ServerStatus = require('../constants/server_status.js');\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\nvar EmptyPacket = new Packets.Packet(0, Buffer.allocUnsafe(4), 0, 4);\n\n// http://dev.mysql.com/doc/internals/en/com-query.html\nfunction Query (options, callback)\n{\n  Command.call(this);\n  this.sql = options.sql;\n  this.values = options.values;\n  this._queryOptions = options;\n  this.onResult = callback;\n  this._fieldCount = 0;\n  this._rowParser = null;\n  this._fields = [];\n  this._rows = [];\n  this._receivedFieldsCount = 0;\n  this._resultIndex = 0;\n  this._localStream = null;\n  this._unpipeStream = function () {};\n  this._streamFactory = options.infileStreamFactory;\n  this._connection = null;\n}\nutil.inherits(Query, Command);\n\nQuery.prototype.start = function (packet, connection) {\n  if (connection.config.debug) {\n    console.log('        Sending query command: %s', this.sql);\n  }\n  this._connection = connection;\n  this.options = objectAssign({}, connection.config, this._queryOptions);\n  var cmdPacket = new Packets.Query(this.sql, connection.config.charsetNumber);\n  connection.writePacket(cmdPacket.toPacket(1));\n  return Query.prototype.resultsetHeader;\n};\n\nQuery.prototype.done = function () {\n  var self = this;\n  this._unpipeStream();\n  if (this.onResult) {\n    var rows, fields;\n    if (this._resultIndex === 0) {\n      rows = this._rows[0];\n      fields = this._fields[0];\n    } else {\n      rows = this._rows;\n      fields = this._fields;\n    }\n    if (fields) {\n      process.nextTick(function () {\n        self.onResult(null, rows, fields);\n      });\n    } else {\n      process.nextTick(function () {\n        self.onResult(null, rows);\n      });\n    }\n  }\n  return null;\n};\n\nQuery.prototype.doneInsert = function (rs) {\n  if (this._localStreamError) {\n    if (this.onResult) {\n      this.onResult(this._localStreamError, rs);\n    } else {\n      this.emit('error', this._localStreamError);\n    }\n    return null;\n  }\n  this._rows.push(rs);\n  this._fields.push(void (0));\n  this.emit('fields', void (0));\n  this.emit('result', rs);\n  if (rs.serverStatus & ServerStatus.SERVER_MORE_RESULTS_EXISTS) {\n    this._resultIndex++;\n    return this.resultsetHeader;\n  }\n  return this.done();\n};\n\nQuery.prototype.resultsetHeader = function (packet, connection) {\n  var rs = new Packets.ResultSetHeader(packet, connection);\n  this._fieldCount = rs.fieldCount;\n  if (connection.config.debug) {\n    console.log('        Resultset header received, expecting ' + rs.fieldCount + ' column definition packets');\n  }\n  if (this._fieldCount === 0) {\n    return this.doneInsert(rs);\n  }\n  if (this._fieldCount === null) {\n    this._localStream = this._findOrCreateReadStream(rs.infileName);\n    // start streaming, after last packet expect OK\n    // http://dev.mysql.com/doc/internals/en/com-query-response.html#local-infile-data\n    this._streamLocalInfile(connection);\n    return this.infileOk;\n  }\n\n  this._receivedFieldsCount = 0;\n  this._rows.push([]);\n  this._fields.push([]);\n  return this.readField;\n};\n\n// some code taken from https://github.com/mysqljs/mysql/pull/668\nQuery.prototype._findOrCreateReadStream = function (path) {\n  if (this._streamFactory) {\n    return this._streamFactory(path);\n  }\n  return fs.createReadStream(path, {\n    'flag': 'r',\n    'encoding': null,\n    'autoClose': true\n  });\n};\n\nQuery.prototype._streamLocalInfile = function (connection) {\n  var command = this;\n\n  var onDrain = function () {\n    command._localStream.resume();\n  };\n\n  var onPause = function () {\n    command._localStream.pause();\n  };\n\n  var onData = function (data) {\n    var dataWithHeader = Buffer.allocUnsafe(data.length + 4);\n    data.copy(dataWithHeader, 4);\n    connection.writePacket(new Packets.Packet(0, dataWithHeader, 0, dataWithHeader.length));\n  };\n\n  var onEnd = function () {\n    connection.writePacket(EmptyPacket);\n  };\n\n  var onError = function (err) {\n    command._localStreamError = err;\n    connection.writePacket(EmptyPacket);\n  };\n\n  command._unpipeStream = function () {\n    connection.stream.removeListener('pause', onPause);\n    connection.stream.removeListener('drain', onDrain);\n    command._localStream.removeListener('data', onData);\n    command._localStream.removeListener('end', onEnd);\n    command._localStream.removeListener('error', onError);\n  };\n\n  connection.stream.on('pause', onPause);\n  connection.stream.on('drain', onDrain);\n  command._localStream.on('data', onData);\n  command._localStream.on('end', onEnd);\n  command._localStream.on('error', onError);\n\n  connection.once('error', function (err) {\n    command._unpipeStream();\n  });\n};\n\nQuery.prototype.readField = function (packet, connection) {\n\n  this._receivedFieldsCount++;\n\n  // Often there is much more data in the column definition than in the row itself\n  // If you set manually _fields[0] to array of ColumnDefinition's (from previous call)\n  // you can 'cache' result of parsing. Field packets still received, but ignored in that case\n  // this is the reason _receivedFieldsCount exist (otherwise we could just use current length of fields array)\n\n  if (this._fields[this._resultIndex].length != this._fieldCount) {\n    var field = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n    this._fields[this._resultIndex].push(field);\n    if (connection.config.debug) {\n      console.log('        Column definition:');\n      console.log('          name: ' + field.name);\n      console.log('          type: ' + field.columnType);\n      console.log('         flags: ' + field.flags);\n    }\n  }\n\n  // last field received\n  if (this._receivedFieldsCount == this._fieldCount) {\n    var fields = this._fields[this._resultIndex];\n    this.emit('fields', fields);\n    var parserKey = connection.keyFromFields(fields, this.options);\n    this._rowParser = connection.textProtocolParsers[parserKey];\n    if (!this._rowParser) {\n      this._rowParser = compileParser(fields, this.options, connection.config);\n      connection.textProtocolParsers[parserKey] = this._rowParser;\n    }\n    return Query.prototype.fieldsEOF;\n  }\n  return Query.prototype.readField;\n};\n\nQuery.prototype.fieldsEOF = function (packet, connection) {\n  // check EOF\n  if (!packet.isEOF()) {\n    return connection.protocolError('Expected EOF packet');\n  }\n  return this.row;\n};\n\nQuery.prototype.row = function (packet)\n{\n  if (packet.isEOF()) {\n    var status = packet.eofStatusFlags();\n    var moreResults = status & ServerStatus.SERVER_MORE_RESULTS_EXISTS;\n    if (moreResults) {\n      this._resultIndex++;\n      return Query.prototype.resultsetHeader;\n    }\n    return this.done();\n  }\n\n  var row = new this._rowParser(packet, this._fields[this._resultIndex], this.options, CharsetToEncoding);\n  if (this.onResult) {\n    this._rows[this._resultIndex].push(row);\n  } else {\n    this.emit('result', row);\n  }\n\n  return Query.prototype.row;\n};\n\nQuery.prototype.infileOk = function (packet, connection) {\n  var rs = new Packets.ResultSetHeader(packet, connection);\n  return this.doneInsert(rs);\n};\n\nQuery.prototype.stream = function (options) {\n  var self = this,\n    stream;\n\n  options = options || {};\n  options.objectMode = true;\n  stream = new Readable(options);\n\n  stream._read = function () {\n    self._connection && self._connection.resume();\n  };\n\n  this.on('result', function (row) {\n    if (!stream.push(row)) {\n      self._connection.pause();\n    }\n    stream.emit('result', row);  // replicate old emitter\n  });\n\n  this.on('error', function (err) {\n    stream.emit('error', err);  // Pass on any errors\n  });\n\n  this.on('end', function () {\n    stream.emit('close');  // notify readers that query has completed\n    stream.push(null);  // pushing null, indicating EOF\n  });\n\n  this.on('fields', function (fields) {\n    stream.emit('fields', fields);  // replicate old emitter\n  });\n\n  return stream;\n};\n\nmodule.exports = Query;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/compile_text_parser.js":"var Types = require('./constants/types.js');\nvar Charsets = require('./constants/charsets.js');\nvar CharsetToEncoding = require('./constants/charset_encodings.js');\nvar srcEscape = require('./helpers').srcEscape;\nvar genFunc = require('generate-function');\n\nvar typeNames = [];\nfor (var t in Types) {\n  typeNames[Types[t]] = t;\n}\n\nfunction compile (fields, options, config) {\n\n  // node-mysql typeCast compatibility wrapper\n  // see https://github.com/mysqljs/mysql/blob/96fdd0566b654436624e2375c7b6604b1f50f825/lib/protocol/packets/Field.js\n  function wrap (field, type, packet, encoding) {\n    return {\n      type: type,\n      length: field.columnLength,\n      db: field.schema,\n      table: field.table,\n      name: field.name,\n      string: function () { return packet.readLengthCodedString(encoding); },\n      buffer: function () { return packet.readLengthCodedBuffer(); },\n      geometry: function () { return packet.parseGeometryValue(); }\n    };\n  }\n\n  // use global typeCast if current query doesn't specify one\n  if (typeof config.typeCast === 'function' && typeof options.typeCast !== 'function') {\n    options.typeCast = config.typeCast;\n  }\n\n  var parserFn = genFunc();\n  var i = 0;\n\n  /* eslint-disable no-trailing-spaces */\n  /* eslint-disable no-spaced-func */\n  /* eslint-disable no-unexpected-multiline */\n  parserFn('(function () {')\n              ('return function TextRow(packet, fields, options, CharsetToEncoding) {');\n\n  if (options.rowsAsArray) {\n    parserFn('var result = new Array(' + fields.length + ')');\n  }\n\n  if (typeof options.typeCast === 'function') {\n    parserFn('var wrap = ' + wrap.toString());\n  }\n\n  var resultTables = {};\n  var resultTablesArray = [];\n\n  if (options.nestTables === true) {\n    for (i = 0; i < fields.length; i++) {\n      resultTables[fields[i].table] = 1;\n    }\n    resultTablesArray = Object.keys(resultTables);\n    for (i = 0; i < resultTablesArray.length; i++) {\n      parserFn('this[' + srcEscape(resultTablesArray[i]) + '] = {};');\n    }\n  }\n\n  var lvalue = '';\n  var fieldName = '';\n  for (i = 0; i < fields.length; i++) {\n    fieldName = srcEscape(fields[i].name);\n    parserFn('// ' + fieldName + ': ' + typeNames[fields[i].columnType]);\n    if (typeof options.nestTables == 'string') {\n      lvalue = 'this[' + srcEscape(fields[i].table + options.nestTables + fields[i].name) + ']';\n    } else if (options.nestTables === true) {\n      lvalue = 'this[' + srcEscape(fields[i].table) + '][' + fieldName + ']';\n    } else if (options.rowsAsArray) {\n      lvalue = 'result[' + i.toString(10) + ']';\n    } else {\n      lvalue = 'this[' + fieldName + ']';\n    }\n    var encodingExpr = 'CharsetToEncoding[fields[' + i + '].characterSet]';\n    var readCode = readCodeFor(fields[i].columnType, fields[i].characterSet, encodingExpr, config, options);\n    if (typeof options.typeCast === 'function') {\n      parserFn(lvalue + ' = options.typeCast(wrap(fields[' + i + '], ' + srcEscape(typeNames[fields[i].columnType]) + ', packet, ' + encodingExpr + '), function() { return ' + readCode + ';})');\n    } else if (options.typeCast === false) {\n      parserFn(lvalue + ' = packet.readLengthCodedBuffer();');\n    } else {\n      parserFn(lvalue + ' = ' + readCode + ';');\n    }\n  }\n\n  if (options.rowsAsArray) {\n    parserFn('return result;');\n  }\n\n  parserFn('};')\n      ('})()');\n\n  /* eslint-enable no-trailing-spaces */\n  /* eslint-enable no-spaced-func */\n  /* eslint-enable no-unexpected-multiline */\n\n  if (config.debug) {\n    console.log('\\n\\nCompiled text protocol row parser:\\n');\n    var cardinal = require('cardinal');\n    console.log(cardinal.highlight(parserFn.toString()) + '\\n');\n  }\n  return parserFn.toFunction();\n}\n\nfunction readCodeFor (type, charset, encodingExpr, config, options) {\n  var supportBigNumbers = options.supportBigNumbers || config.supportBigNumbers;\n  var bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;\n\n  switch (type) {\n  case Types.TINY:\n  case Types.SHORT:\n  case Types.LONG:\n  case Types.INT24:\n  case Types.YEAR:\n    return 'packet.parseLengthCodedIntNoBigCheck()';\n  case Types.LONGLONG:\n    if (supportBigNumbers && bigNumberStrings) {\n      return 'packet.parseLengthCodedIntString()';\n    }\n    return 'packet.parseLengthCodedInt(' + supportBigNumbers + ')';\n  case Types.FLOAT:\n  case Types.DOUBLE:\n    return 'packet.parseLengthCodedFloat()';\n  case Types.NULL:\n    return 'null; packet.skip(1)';\n  case Types.DECIMAL:\n  case Types.NEWDECIMAL:\n    if (config.decimalNumbers) {\n      return 'packet.parseLengthCodedFloat()';\n    }\n    return 'packet.readLengthCodedString(\"ascii\")';\n  case Types.DATE:\n    if (config.dateStrings) {\n      return 'packet.readLengthCodedString(\"ascii\")';\n    }\n    return 'packet.parseDate()';\n  case Types.DATETIME:\n  case Types.TIMESTAMP:\n    if (config.dateStrings) {\n      return 'packet.readLengthCodedString(\"ascii\")';\n    }\n    return 'packet.parseDateTime()';\n  case Types.TIME:\n    return 'packet.readLengthCodedString(\"ascii\")';\n  case Types.GEOMETRY:\n    return 'packet.parseGeometryValue()';\n  case Types.JSON:\n    // Since for JSON columns mysql always returns charset 63 (BINARY),\n    // we have to handle it according to JSON specs and use \"utf8\",\n    // see https://github.com/sidorares/node-mysql2/issues/409\n    return 'JSON.parse(packet.readLengthCodedString(\"utf8\"))';\n  default:\n    if (charset == Charsets.BINARY) {\n      return 'packet.readLengthCodedBuffer()';\n    } else {\n      return 'packet.readLengthCodedString(' + encodingExpr + ')';\n    }\n  }\n}\n\nmodule.exports = compile;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/helpers.js":"  /*\n\n  this seems to be not only shorter, but faster than\n  string.replace(/\\\\/g, '\\\\\\\\').\n            replace(/\\u0008/g, '\\\\b').\n            replace(/\\t/g, '\\\\t').\n            replace(/\\n/g, '\\\\n').\n            replace(/\\f/g, '\\\\f').\n            replace(/\\r/g, '\\\\r').\n            replace(/'/g, '\\\\\\'').\n            replace(/\"/g, '\\\\\"');\n  or string.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\")\n  see http://jsperf.com/string-escape-regexp-vs-json-stringify\n  */\n  function srcEscape (str) {\n    var a = {};\n    a[str] = 1;\n    return JSON.stringify(a).slice(1, -3);\n  }\n\n  module.exports.srcEscape = srcEscape;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/prepare.js":"var util = require('util');\n\nvar Packets = require('../packets/index.js');\nvar Command = require('./command.js');\nvar CloseStatement = require('./close_statement.js');\nvar Execute = require('./execute.js');\n\nfunction Prepare (options, callback)\n{\n  Command.call(this);\n  this.query = options.sql;\n  this.onResult = callback;\n\n  this.id = 0;\n  this.fieldCount = 0;\n  this.parameterCount = 0;\n  this.fields = [];\n  this.parameterDefinitions = [];\n  this.options = options;\n}\nutil.inherits(Prepare, Command);\n\nPrepare.prototype.start = function (packet, connection) {\n  var Connection = connection.constructor;\n  this.key = Connection.statementKey(this.options);\n\n  var statement = connection._statements.get(this.key);\n  if (statement) {\n    if (this.onResult) {\n      this.onResult(null, statement);\n    }\n    return null;\n  }\n\n  var cmdPacket = new Packets.PrepareStatement(this.query, connection.config.charsetNumber);\n  connection.writePacket(cmdPacket.toPacket(1));\n  return Prepare.prototype.prepareHeader;\n};\n\nfunction PreparedStatementInfo (query, id, columns, parameters, connection) {\n  this.query = query;\n  this.id = id;\n  this.columns = columns;\n  this.parameters = parameters;\n  this.rowParser = null;\n  this._connection = connection;\n}\n\nPreparedStatementInfo.prototype.close = function () {\n  return this._connection.addCommand(new CloseStatement(this.id));\n};\n\nPreparedStatementInfo.prototype.execute = function (parameters, callback) {\n  if (typeof parameters == 'function') {\n    callback = parameters;\n    parameters = [];\n  }\n  return this._connection.addCommand(new Execute({statement: this, values: parameters}, callback));\n};\n\nPrepare.prototype.prepareHeader = function (packet, connection) {\n  var header = new Packets.PreparedStatementHeader(packet);\n  this.id = header.id;\n  this.fieldCount = header.fieldCount;\n  this.parameterCount = header.parameterCount;\n  if (this.parameterCount > 0) {\n    return Prepare.prototype.readParameter;\n  } else if (this.fieldCount > 0) {\n    return Prepare.prototype.readField;\n  } else {\n    return this.prepareDone(connection);\n  }\n};\n\nPrepare.prototype.readParameter = function (packet, connection) {\n  var def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n  this.parameterDefinitions.push(def);\n  if (this.parameterDefinitions.length == this.parameterCount) {\n    return Prepare.prototype.parametersEOF;\n  }\n  return this.readParameter;\n};\n\nPrepare.prototype.readField = function (packet, connection) {\n  var def = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n  this.fields.push(def);\n  if (this.fields.length == this.fieldCount) {\n    return Prepare.prototype.fieldsEOF;\n  }\n  return Prepare.prototype.readField;\n};\n\nPrepare.prototype.parametersEOF = function (packet, connection) {\n  if (!packet.isEOF()) {\n    return connection.protocolError('Expected EOF packet after parameters');\n  }\n\n  if (this.fieldCount > 0) {\n    return Prepare.prototype.readField;\n  } else {\n    return this.prepareDone(connection);\n  }\n};\n\nPrepare.prototype.fieldsEOF = function (packet, connection) {\n  if (!packet.isEOF()) {\n    return connection.protocolError('Expected EOF packet after fields');\n  }\n  return this.prepareDone(connection);\n};\n\nPrepare.prototype.prepareDone = function (connection)\n{\n  var self = this;\n  var statement = new PreparedStatementInfo(\n    self.query,\n    self.id,\n    self.fields,\n    self.parameterDefinitions,\n    connection\n  );\n\n  connection._statements.set(this.key, statement);\n\n  if (this.onResult) {\n    self.onResult(null, statement);\n  }\n  return null;\n};\n\nmodule.exports = Prepare;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/close_statement.js":"var util = require('util');\n\nvar Command = require('./command');\nvar Packets = require('../packets/index.js');\n\nfunction CloseStatement (id)\n{\n  Command.call(this);\n  this.id = id;\n}\nutil.inherits(CloseStatement, Command);\n\nCloseStatement.prototype.start = function (packet, connection) {\n  connection.writePacket(new Packets.CloseStatement(this.id).toPacket(1));\n  return null;\n};\n\nmodule.exports = CloseStatement;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/execute.js":"var util = require('util');\n\nvar Command = require('./command.js');\nvar Query = require('./query.js');\nvar Packets = require('../packets/index.js');\n\nvar objectAssign = require('object-assign');\n\nvar compileParser = require('../compile_binary_parser.js');\n\nfunction Execute (options, callback)\n{\n  Command.call(this);\n  this.statement = options.statement;\n  this.sql = options.sql;\n  this.values = options.values;\n  this.onResult = callback;\n  this.parameters = options.values;\n\n  this.insertId = 0;\n\n  this._rows = [];\n  this._fields = [];\n  this._result = [];\n  this._fieldCount = 0;\n  this._rowParser = null;\n  this._executeOptions = options;\n  this._resultIndex = 0;\n  this._localStream = null;\n  this._unpipeStream = function () {};\n  this._streamFactory = options.infileStreamFactory;\n  this._connection = null;\n}\nutil.inherits(Execute, Command);\n\nExecute.prototype.buildParserFromFields = function (fields, connection) {\n  var parserKey = connection.keyFromFields(fields, this.options);\n  var parser = connection.binaryProtocolParsers[parserKey];\n  if (!parser) {\n    parser = compileParser(fields, this.options, connection.config);\n    connection.binaryProtocolParsers[parserKey] = parser;\n  }\n  return parser;\n};\n\nExecute.prototype.start = function (packet, connection) {\n  this._connection = connection;\n  this.options = objectAssign({}, connection.config, this._executeOptions);\n  var executePacket = new Packets.Execute(this.statement.id, this.parameters, connection.config.charsetNumber);\n  connection.writePacket(executePacket.toPacket(1));\n  return Execute.prototype.resultsetHeader;\n};\n\nExecute.prototype.done = Query.prototype.done;\nExecute.prototype.doneInsert = Query.prototype.doneInsert;\nExecute.prototype.resultsetHeader = Query.prototype.resultsetHeader;\nExecute.prototype._findOrCreateReadStream = Query.prototype._findOrCreateReadStream;\nExecute.prototype._streamLocalInfile = Query.prototype._streamLocalInfile;\nExecute.prototype.row = Query.prototype.row;\nExecute.prototype.stream = Query.prototype.stream;\n\nExecute.prototype.readField = function (packet, connection) {\n  var def, fields;\n\n  // disabling for now, but would be great to find reliable way to parse fields only once\n  // fields reported by prepare can be empty at all or just incorrect - see #169\n  //\n  // perfomance optimisation: if we already have this field parsed in statement header, use one from header\n  // var field = this.statement.columns.length == this._fieldCount ?\n  //  this.statement.columns[this._receivedFieldsCount] : new Packets.ColumnDefinition(packet);\n\n  var field = new Packets.ColumnDefinition(packet, connection.clientEncoding);\n\n  this._receivedFieldsCount++;\n  this._fields[this._resultIndex].push(field);\n  if (this._receivedFieldsCount == this._fieldCount) {\n    fields = this._fields[this._resultIndex];\n    this.emit('fields', fields, this._resultIndex);\n    return Execute.prototype.fieldsEOF;\n  }\n  return Execute.prototype.readField;\n};\n\nExecute.prototype.fieldsEOF = function (packet, connection) {\n  // check EOF\n  if (!packet.isEOF()) {\n    return connection.protocolError('Expected EOF packet');\n  }\n  this._rowParser = this.buildParserFromFields(this._fields[this._resultIndex], connection);\n  return Execute.prototype.row;\n};\n\nmodule.exports = Execute;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/compile_binary_parser.js":"var FieldFlags = require('./constants/field_flags.js');\nvar Charsets = require('./constants/charsets.js');\nvar CharsetToEncoding = require('./constants/charset_encodings.js');\nvar Types = require('./constants/types.js');\nvar srcEscape = require('./helpers').srcEscape;\nvar genFunc = require('generate-function');\n\nvar typeNames = [];\nfor (var t in Types) {\n  typeNames[Types[t]] = t;\n}\n\nfunction compile (fields, options, config) {\n  var parserFn = genFunc();\n  var i = 0;\n  var nullBitmapLength = Math.floor((fields.length + 7 + 2) / 8);\n\n  /* eslint-disable no-trailing-spaces */\n  /* eslint-disable no-spaced-func */\n  /* eslint-disable no-unexpected-multiline */\n\n  parserFn('(function(){')\n              ('return function BinaryRow(packet, fields, options, CharsetToEncoding) {');\n\n  if (options.rowsAsArray) {\n    parserFn('var result = new Array(' + fields.length + ');');\n  }\n\n  var resultTables = {};\n  var resultTablesArray = [];\n\n  if (options.nestTables === true) {\n    for (i = 0; i < fields.length; i++) {\n      resultTables[fields[i].table] = 1;\n    }\n    resultTablesArray = Object.keys(resultTables);\n    for (i = 0; i < resultTablesArray.length; i++) {\n      parserFn('this[' + srcEscape(resultTablesArray[i]) + '] = {};');\n    }\n  }\n\n  parserFn('var statusByte = packet.readInt8();');\n  for (i = 0; i < nullBitmapLength; ++i) {\n    parserFn('var nullBitmaskByte' + i + ' = packet.readInt8();');\n  }\n\n  var lvalue = '';\n  var currentFieldNullBit = 4;\n  var nullByteIndex = 0;\n  var fieldName = '';\n  var tableName = '';\n\n  for (i = 0; i < fields.length; i++) {\n    fieldName = srcEscape(fields[i].name);\n    parserFn('// ' + fieldName + ': ' + typeNames[fields[i].columnType]);\n\n    if (typeof options.nestTables == 'string') {\n      tableName = srcEscape(fields[i].table);\n      lvalue = 'this[' + srcEscape(fields[i].table + options.nestTables + fields[i].name) + ']';\n    } else if (options.nestTables === true) {\n      tableName = srcEscape(fields[i].table);\n      lvalue = 'this[' + tableName + '][' + fieldName + ']';\n    } else if (options.rowsAsArray) {\n      lvalue = 'result[' + i.toString(10) + ']';\n    } else {\n      lvalue = 'this[' + srcEscape(fields[i].name) + ']';\n    }\n\n    // TODO: this used to be an optimisation ( if column marked as NOT_NULL don't include code to check null\n    // bitmap at all, but it seems that we can't rely on this flag, see #178\n    // TODO: benchmark performance difference\n    //\n    // if (fields[i].flags & FieldFlags.NOT_NULL) { // don't need to check null bitmap if field can't be null.\n    //  result.push(lvalue + ' = ' + readCodeFor(fields[i], config));\n    // } else if (fields[i].columnType == Types.NULL) {\n    //  result.push(lvalue + ' = null;');\n    // } else {\n    parserFn('if (nullBitmaskByte' + nullByteIndex + ' & ' + currentFieldNullBit + ')');\n    parserFn(lvalue + ' = null;');\n    parserFn('else');\n    parserFn(lvalue + ' = ' + readCodeFor(fields[i], config, options, i));\n    // }\n    currentFieldNullBit *= 2;\n    if (currentFieldNullBit == 0x100) {\n      currentFieldNullBit = 1;\n      nullByteIndex++;\n    }\n  }\n\n  if (options.rowsAsArray) {\n    parserFn('return result;');\n  }\n\n  parserFn('};')\n      ('})()');\n\n  /* eslint-enable no-trailing-spaces */\n  /* eslint-enable no-spaced-func */\n  /* eslint-enable no-unexpected-multiline */\n\n  if (config.debug) {\n    console.log('\\n\\nCompiled binary protocol row parser:\\n');\n    var cardinal = require('cardinal');\n    console.log(cardinal.highlight(parserFn.toString()) + '\\n');\n  }\n  return parserFn.toFunction();\n}\n\nfunction readCodeFor (field, config, options, fieldNum) {\n  var supportBigNumbers = options.supportBigNumbers || config.supportBigNumbers;\n  var bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;\n  var unsigned = field.flags & FieldFlags.UNSIGNED;\n  switch (field.columnType) {\n  case Types.TINY:\n    return unsigned ? 'packet.readInt8();' : 'packet.readSInt8();';\n  case Types.SHORT:\n    return unsigned ? 'packet.readInt16();' : 'packet.readSInt16();';\n  case Types.LONG:\n  case Types.INT24: // in binary protocol int24 is encoded in 4 bytes int32\n    return unsigned ? 'packet.readInt32();' : 'packet.readSInt32();';\n  case Types.YEAR:\n    return 'packet.readInt16()';\n  case Types.FLOAT:\n    return 'packet.readFloat();';\n  case Types.DOUBLE:\n    return 'packet.readDouble();';\n  case Types.NULL:\n    return 'null;';\n  case Types.DATE:\n  case Types.DATETIME:\n  case Types.TIMESTAMP:\n  case Types.NEWDATE:\n    if (config.dateStrings) {\n      return 'packet.readDateTimeString();';\n    }\n    return 'packet.readDateTime();';\n  case Types.TIME:\n    return 'packet.readTimeString()';\n  case Types.DECIMAL:\n  case Types.NEWDECIMAL:\n    if (config.decimalNumbers) {\n      return 'packet.parseLengthCodedFloat();';\n    }\n    return 'packet.readLengthCodedString(\"ascii\");';\n  case Types.GEOMETRY:\n    return 'packet.parseGeometryValue();';\n  case Types.JSON:\n    // Since for JSON columns mysql always returns charset 63 (BINARY),\n    // we have to handle it according to JSON specs and use \"utf8\",\n    // see https://github.com/sidorares/node-mysql2/issues/409\n    return 'JSON.parse(packet.readLengthCodedString(\"utf8\"));';\n  case Types.LONGLONG:\n    if (!supportBigNumbers) {\n      return unsigned ? 'packet.readInt64JSNumber();' : 'packet.readSInt64JSNumber();';\n    } else {\n      if (bigNumberStrings) {\n        return unsigned ? 'packet.readInt64String();' : 'packet.readSInt64String();';\n      } else {\n        return unsigned ? 'packet.readInt64();' : 'packet.readSInt64();';\n      }\n    }\n  default:\n    if (field.characterSet == Charsets.BINARY) {\n      return 'packet.readLengthCodedBuffer();';\n    } else {\n      return 'packet.readLengthCodedString(CharsetToEncoding[fields[' + fieldNum + '].characterSet])';\n    }\n  }\n}\n\nmodule.exports = compile;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/constants/field_flags.js":"// Manually extracted from mysql-5.5.23/include/mysql_com.h\nexports.NOT_NULL = 1; /* Field can't be NULL */\nexports.PRI_KEY = 2; /* Field is part of a primary key */\nexports.UNIQUE_KEY = 4; /* Field is part of a unique key */\nexports.MULTIPLE_KEY = 8; /* Field is part of a key */\nexports.BLOB = 16; /* Field is a blob */\nexports.UNSIGNED = 32; /* Field is unsigned */\nexports.ZEROFILL = 64; /* Field is zerofill */\nexports.BINARY = 128; /* Field is binary   */\n\n/* The following are only sent to new clients */\nexports.ENUM = 256; /* field is an enum */\nexports.AUTO_INCREMENT = 512; /* field is a autoincrement field */\nexports.TIMESTAMP = 1024; /* Field is a timestamp */\nexports.SET = 2048; /* field is a set */\nexports.NO_DEFAULT_VALUE = 4096; /* Field doesn't have default value */\nexports.ON_UPDATE_NOW = 8192; /* Field is set to NOW on UPDATE */\nexports.NUM = 32768; /* Field is num (for clients) */\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/ping.js":"var util = require('util');\nvar Buffer = require('safe-buffer').Buffer;\n\nvar Command = require('./command');\nvar CommandCode = require('../constants/commands');\nvar Packet = require('../packets/packet');\n\n// TODO: time statistics?\n// usefull for queue size and network latency monitoring\n// store created,sent,reply timestamps\n\nfunction Ping (callback)\n{\n  Command.call(this);\n  this.onResult = callback;\n}\nutil.inherits(Ping, Command);\n\nPing.prototype.start = function (packet, connection) {\n  var ping = new Packet(0, Buffer.from([1, 0, 0, 0, CommandCode.PING]), 0, 5);\n  connection.writePacket(ping);\n  return Ping.prototype.pingResponse;\n};\n\nPing.prototype.pingResponse = function (packet) {\n  // TODO: check it's OK packet. error check already done in caller\n  if (this.onResult) {\n    process.nextTick(this.onResult.bind(this));\n  }\n  return null;\n};\n\nmodule.exports = Ping;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/register_slave.js":"var Command = require('./command');\nvar util = require('util');\nvar CommandCode = require('../constants/commands');\nvar Packets = require('../packets');\n\nfunction RegisterSlave (opts, callback)\n{\n  Command.call(this);\n  this.onResult = callback;\n  this.opts = opts;\n}\nutil.inherits(RegisterSlave, Command);\n\nRegisterSlave.prototype.start = function (packet, connection) {\n  var packet = new Packets.RegisterSlave(this.opts);\n  connection.writePacket(packet.toPacket(1));\n  return RegisterSlave.prototype.registerResponse;\n};\n\nRegisterSlave.prototype.registerResponse = function (packet) {\n  if (this.onResult) {\n    process.nextTick(this.onResult.bind(this));\n  }\n  return null;\n};\n\nmodule.exports = RegisterSlave;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/binlog_dump.js":"var Command = require('./command');\nvar util = require('util');\nvar CommandCode = require('../constants/commands');\nvar Packets = require('../packets');\n\nfunction BinlogDump (opts)\n{\n  Command.call(this);\n  // this.onResult = callback;\n  this.opts = opts;\n}\nutil.inherits(BinlogDump, Command);\n\nBinlogDump.prototype.start = function (packet, connection) {\n  var packet = new Packets.BinlogDump(this.opts);\n  connection.writePacket(packet.toPacket(1));\n  return BinlogDump.prototype.binlogData;\n};\n\nfunction BinlogEventHeader (packet) {\n  this.timestamp = packet.readInt32();\n  this.eventType = packet.readInt8();\n  this.serverId = packet.readInt32();\n  this.eventSize = packet.readInt32();\n  this.logPos = packet.readInt32();\n  this.flags = packet.readInt16();\n}\n\nfunction RotateEvent (packet) {\n  this.pposition = packet.readInt32();\n  // TODO: read uint64 here\n  var positionDword2 = packet.readInt32();\n  this.nextBinlog = packet.readString();\n  this.name = 'RotateEvent';\n}\n\nfunction FormatDescriptionEvent (packet) {\n  this.binlogVersion = packet.readInt16();\n  this.serverVersion = packet.readString(50).replace(/\\u0000.*/, '');\n  this.createTimestamp = packet.readInt32();\n  this.eventHeaderLength = packet.readInt8(); // should be 19\n  this.eventsLength = packet.readBuffer();\n  this.name = 'FormatDescriptionEvent';\n}\n\nfunction QueryEvent (packet) {\n\n  var parseStatusVars = require('../packets/binlog_query_statusvars.js');\n\n  this.slaveProxyId = packet.readInt32();\n  this.executionTime = packet.readInt32();\n  var schemaLength = packet.readInt8();\n  this.errorCode = packet.readInt16();\n  var statusVarsLength = packet.readInt16();\n  var statusVars = packet.readBuffer(statusVarsLength);\n\n  this.schema = packet.readString(schemaLength);\n  packet.readInt8(); // should be zero\n  this.statusVars = parseStatusVars(statusVars);\n\n  this.query = packet.readString();\n  this.name = 'QueryEvent';\n}\n\nfunction XidEvent (packet) {\n  this.binlogVersion = packet.readInt16();\n  this.xid = packet.readInt64();\n  this.name = 'XidEvent';\n}\n\nvar eventParsers = [];\n\neventParsers[2] = QueryEvent;\neventParsers[4] = RotateEvent;\neventParsers[15] = FormatDescriptionEvent;\neventParsers[16] = XidEvent;\n\nBinlogDump.prototype.binlogData = function (packet) {\n  // ok - continue consuming events\n  // error - error\n  // eof - end of binlog\n  if (packet.isEOF()) {\n    this.emit('eof');\n    return null;\n  }\n\n  // binlog event header\n  var ok = packet.readInt8();\n  var header = new BinlogEventHeader(packet);\n  var EventParser = eventParsers[header.eventType];\n  var event;\n  if (EventParser) {\n    event = new EventParser(packet);\n  } else {\n    event = {\n      name: 'UNKNOWN'\n    };\n  }\n  event.header = header;\n  this.emit('event', event);\n  return BinlogDump.prototype.binlogData;\n};\n\nmodule.exports = BinlogDump;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/change_user.js":"var util = require('util');\n\nvar Command = require('./command.js');\nvar Packets = require('../packets/index.js');\nvar ClientConstants = require('../constants/client.js');\nvar ClientHandshake = require('./client_handshake.js');\nvar CharsetToEncoding = require('../constants/charset_encodings.js');\n\nfunction ChangeUser (options, callback)\n{\n  this.onResult = callback;\n  this.user = options.user;\n  this.password = options.password;\n  this.database = options.database;\n  this.passwordSha1 = options.passwordSha1;\n  this.charsetNumber = options.charsetNumber;\n  this.currentConfig = options.currentConfig;\n  Command.call(this);\n}\nutil.inherits(ChangeUser, Command);\n\nChangeUser.prototype.handshakeResult = ClientHandshake.prototype.handshakeResult;\nChangeUser.prototype.calculateNativePasswordAuthToken = ClientHandshake.prototype.calculateNativePasswordAuthToken;\n\nChangeUser.prototype.start = function (packet, connection) {\n  var packet = new Packets.ChangeUser({\n    flags           : connection.config.clientFlags,\n    user            : this.user,\n    database        : this.database,\n    charsetNumber   : this.charsetNumber,\n    password        : this.password,\n    passwordSha1    : this.passwordSha1,\n    authPluginData1 : connection._handshakePacket.authPluginData1,\n    authPluginData2 : connection._handshakePacket.authPluginData2\n  });\n  this.currentConfig.user = this.user;\n  this.currentConfig.password = this.password;\n  this.currentConfig.database = this.database;\n  this.currentConfig.charsetNumber = this.charsetNumber;\n  connection.clientEncoding = CharsetToEncoding[this.charsetNumber];\n  // reset prepared statements cache as all statements become invalid after changeUser\n  connection._statements.reset();\n  connection.writePacket(packet.toPacket());\n  return ChangeUser.prototype.handshakeResult;\n};\n\nmodule.exports = ChangeUser;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/commands/quit.js":"var util = require('util');\nvar Buffer = require('safe-buffer').Buffer;\n\nvar Command = require('./command.js');\nvar CommandCode = require('../constants/commands.js');\nvar Packet = require('../packets/packet.js');\n\nfunction Quit (callback)\n{\n  this.done = callback;\n  Command.call(this);\n}\nutil.inherits(Quit, Command);\n\nQuit.prototype.start = function (packet, connection) {\n  connection._closing = true;\n  var quit = new Packet(0, Buffer.from([1, 0, 0, 0, CommandCode.QUIT]), 0, 5);\n  if (this.done) {\n    this.done();\n  }\n  connection.writePacket(quit);\n  return null;\n};\n\nmodule.exports = Quit;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/connection_config.js":"var urlParse = require('url').parse;\nvar ClientConstants = require('./constants/client');\nvar Charsets = require('./constants/charsets');\nvar SSLProfiles = null;\n\nmodule.exports = ConnectionConfig;\nfunction ConnectionConfig (options) {\n  if (typeof options === 'string') {\n    options = ConnectionConfig.parseUrl(options);\n  }\n\n  this.isServer = options.isServer;\n  this.stream = options.stream;\n\n  this.host = options.host || 'localhost';\n  this.port = options.port || 3306;\n  this.localAddress = options.localAddress;\n  this.socketPath = options.socketPath;\n  this.user = options.user || undefined;\n  this.password = options.password || undefined;\n  this.passwordSha1 = options.passwordSha1 || undefined;\n  this.database = options.database;\n  this.connectTimeout = (options.connectTimeout === undefined)\n    ? (10 * 1000)\n    : options.connectTimeout;\n  this.insecureAuth = options.insecureAuth || false;\n  this.supportBigNumbers = options.supportBigNumbers || false;\n  this.bigNumberStrings = options.bigNumberStrings || false;\n  this.decimalNumbers = options.decimalNumbers || false;\n  this.dateStrings = options.dateStrings || false;\n  this.debug = options.debug;\n  this.trace = options.trace !== false;\n  this.stringifyObjects = options.stringifyObjects || false;\n  this.timezone = options.timezone || 'local';\n  this.queryFormat = options.queryFormat;\n  this.pool = options.pool || undefined;\n  this.ssl = (typeof options.ssl === 'string')\n    ? ConnectionConfig.getSSLProfile(options.ssl)\n    : (options.ssl || false);\n  this.multipleStatements = options.multipleStatements || false;\n  this.rowsAsArray = options.rowsAsArray || false;\n  this.namedPlaceholders = options.namedPlaceholders || false;\n  this.nestTables = (options.nestTables === undefined) ? undefined : options.nestTables;\n  this.typeCast = (options.typeCast === undefined)\n    ? true\n    : options.typeCast;\n\n  if (this.timezone[0] == ' ') {\n    // \"+\" is a url encoded char for space so it\n    // gets translated to space when giving a\n    // connection string..\n    this.timezone = '+' + this.timezone.substr(1);\n  }\n\n  if (this.ssl) {\n    // Default rejectUnauthorized to true\n    this.ssl.rejectUnauthorized = this.ssl.rejectUnauthorized !== false;\n  }\n\n  this.maxPacketSize = 0;\n  this.charsetNumber = (options.charset)\n    ? ConnectionConfig.getCharsetNumber(options.charset)\n    : options.charsetNumber || Charsets.UTF8MB4_UNICODE_CI;\n\n  this.compress = options.compress || false;\n\n  this.authSwitchHandler = options.authSwitchHandler;\n\n  this.clientFlags = ConnectionConfig.mergeFlags(ConnectionConfig.getDefaultFlags(options),\n                                                 options.flags || '');\n\n  this.connectAttributes = options.connectAttributes;\n  this.maxPreparedStatements = options.maxPreparedStatements || 16000;\n}\n\nConnectionConfig.mergeFlags = function (default_flags, user_flags) {\n  var flags = 0x0, i;\n\n  user_flags = (user_flags || '').toUpperCase().split(/\\s*,+\\s*/);\n\n  // add default flags unless \"blacklisted\"\n  for (i in default_flags) {\n    if (user_flags.indexOf('-' + default_flags[i]) >= 0) {\n      continue;\n    }\n\n    flags |= ClientConstants[default_flags[i]] || 0x0;\n  }\n  // add user flags unless already already added\n  for (i in user_flags) {\n    if (user_flags[i][0] == '-') {\n      continue;\n    }\n\n    if (default_flags.indexOf(user_flags[i]) >= 0) {\n      continue;\n    }\n\n    flags |= ClientConstants[user_flags[i]] || 0x0;\n  }\n\n  return flags;\n};\n\nConnectionConfig.getDefaultFlags = function (options) {\n  var defaultFlags = ['LONG_PASSWORD', 'FOUND_ROWS', 'LONG_FLAG',\n    'CONNECT_WITH_DB', 'ODBC', 'LOCAL_FILES',\n    'IGNORE_SPACE', 'PROTOCOL_41', 'IGNORE_SIGPIPE',\n    'TRANSACTIONS', 'RESERVED', 'SECURE_CONNECTION',\n    'MULTI_RESULTS', 'TRANSACTIONS', 'SESSION_TRACK'];\n\n  if (options && options.multipleStatements) {\n    defaultFlags.push('MULTI_STATEMENTS');\n  }\n\n  if (options && options.authSwitchHandler) {\n    defaultFlags.push('PLUGIN_AUTH');\n    defaultFlags.push('PLUGIN_AUTH_LENENC_CLIENT_DATA');\n  }\n\n  if (options && options.connectAttributes) {\n    defaultFlags.push('CONNECT_ATTRS');\n  }\n\n  return defaultFlags;\n};\n\nConnectionConfig.getCharsetNumber = function getCharsetNumber (charset) {\n  var num = Charsets[charset.toUpperCase()];\n\n  if (num === undefined) {\n    throw new TypeError('Unknown charset \\'' + charset + '\\'');\n  }\n\n  return num;\n};\n\nConnectionConfig.getSSLProfile = function getSSLProfile (name) {\n  if (!SSLProfiles) {\n    SSLProfiles = require('./constants/ssl_profiles.js');\n  }\n\n  var ssl = SSLProfiles[name];\n\n  if (ssl === undefined) {\n    throw new TypeError('Unknown SSL profile \\'' + name + '\\'');\n  }\n\n  return ssl;\n};\n\nConnectionConfig.parseUrl = function (url) {\n  url = urlParse(url, true);\n\n  var options = {\n    host     : url.hostname,\n    port     : url.port,\n    database : url.pathname.substr(1)\n  };\n\n  if (url.auth) {\n    var auth = url.auth.split(':');\n    options.user = auth[0];\n    options.password = auth[1];\n  }\n\n  if (url.query) {\n    for (var key in url.query) {\n      var value = url.query[key];\n\n      try {\n        // Try to parse this as a JSON expression first\n        options[key] = JSON.parse(value);\n      } catch (err) {\n        // Otherwise assume it is a plain string\n        options[key] = value;\n      }\n    }\n  }\n\n  return options;\n};\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/promise.js":"var core = require('./index.js');\n\nfunction createConnection (opts) {\n  var coreConnection = core.createConnection(opts);\n  var Promise = opts.Promise || global.Promise;\n  if (!Promise) {\n    throw new Error('no Promise implementation available.' +\n      'Use promise-enabled node version or pass userland Promise' +\n      ' implementation as parameter, for example: { Promise: require(\\'es6-promise\\').Promise }');\n  }\n  return new Promise(function (resolve, reject) {\n    coreConnection.once('connect', function (connectParams) {\n      resolve(new PromiseConnection(coreConnection, Promise));\n    });\n    coreConnection.once('error', reject);\n  });\n}\n\nfunction PromiseConnection (connection, promiseImpl) {\n  this.connection = connection;\n  this.Promise = promiseImpl;\n}\n\nPromiseConnection.prototype.release = function () {\n  this.connection.release();\n};\n\nfunction makeDoneCb (resolve, reject) {\n  return function (err, rows, fields) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve([rows, fields]);\n    }\n  };\n}\n\nPromiseConnection.prototype.query = function (query, params) {\n  var c = this.connection;\n  return new this.Promise(function (resolve, reject) {\n    var done = makeDoneCb(resolve, reject);\n    if (params) {\n      c.query(query, params, done);\n    } else {\n      c.query(query, done);\n    }\n  });\n};\n\nPromiseConnection.prototype.execute = function (query, params) {\n  var c = this.connection;\n  return new this.Promise(function (resolve, reject) {\n    var done = makeDoneCb(resolve, reject);\n    if (params) {\n      c.execute(query, params, done);\n    } else {\n      c.execute(query, done);\n    }\n  });\n};\n\nPromiseConnection.prototype.end = function () {\n  var c = this.connection;\n  return new this.Promise(function (resolve, reject) {\n    c.end(function () {\n      resolve();\n    });\n  });\n};\n\nfunction createPool (opts) {\n  var corePool = core.createPool(opts);\n  var Promise = opts.Promise || global.Promise || require('es6-promise');\n\n  var promisePool = {\n    getConnection: function () {\n      return new Promise(function (resolve, reject) {\n        corePool.getConnection(function (err, coreConnection) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(new PromiseConnection(coreConnection, Promise));\n          }\n        });\n      });\n    },\n\n    query: function (sql, args) {\n      return new Promise(function (resolve, reject) {\n        var done = makeDoneCb(resolve, reject);\n        if (args) {\n          corePool.query(sql, args, done);\n        } else {\n          corePool.query(sql, done);\n        }\n      });\n    },\n\n    execute: function (sql, values) {\n      return new Promise(function (resolve, reject) {\n        corePool.execute(sql, values, makeDoneCb(resolve, reject));\n      });\n    },\n\n    end: function () {\n      return new Promise(function (resolve, reject) {\n        corePool.end(function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  };\n\n  return promisePool;\n}\n\nmodule.exports.createConnection = createConnection;\nmodule.exports.createPool = createPool;\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/compressed_protocol.js":"var Buffer = require('safe-buffer').Buffer;\n\n// connection mixins\n// implementation of http://dev.mysql.com/doc/internals/en/compression.html\n\nvar zlib = require('zlib');\nvar compressedPacketNum = 0;\nvar PacketParser = require('./packet_parser.js');\n\nfunction enableCompression (connection) {\n  connection._lastWrittenPacketId = 0;\n  connection._lastReceivedPacketId = 0;\n\n  connection._handleCompressedPacket = handleCompressedPacket;\n  connection._inflatedPacketsParser = new PacketParser(function (p) {\n    connection.handlePacket(p);\n  }, 4);\n  connection._inflatedPacketsParser._lastPacket = 0;\n  connection.packetParser = new PacketParser(function (packet) {\n    connection._handleCompressedPacket(packet);\n  }, 7);\n\n  connection.writeUncompressed = connection.write;\n  connection.write = writeCompressed;\n\n  var seqqueue = require('seq-queue');\n  connection.inflateQueue = seqqueue.createQueue();\n  connection.deflateQueue = seqqueue.createQueue();\n}\n\nfunction handleCompressedPacket (packet) {\n  var connection = this;\n  var deflatedLength = packet.readInt24();\n  var body = packet.readBuffer();\n\n\n  if (deflatedLength !== 0) {\n    connection.inflateQueue.push(function (task) {\n      zlib.inflate(body, function (err, data) {\n        if (err) {\n          connection._handleNetworkError(err);\n          return;\n        }\n        connection._bumpCompressedSequenceId(packet.numPackets);\n        connection._inflatedPacketsParser.execute(data);\n        task.done();\n      });\n    });\n  } else {\n    connection.inflateQueue.push(function (task) {\n      connection._bumpCompressedSequenceId(packet.numPackets);\n      connection._inflatedPacketsParser.execute(body);\n      task.done();\n    });\n  }\n}\n\nfunction writeCompressed (buffer) {\n\n  // http://dev.mysql.com/doc/internals/en/example-several-mysql-packets.html\n  // note: sending a MySQL Packet of the size 2^24−5 to 2^24−1 via compression\n  // leads to at least one extra compressed packet.\n  // (this is because \"length of the packet before compression\" need to fit\n  // into 3 byte unsigned int. \"length of the packet before compression\" includes\n  // 4 byte packet header, hence 2^24−5)\n  var MAX_COMPRESSED_LENGTH = 16777210;\n  var start;\n  if (buffer.length > MAX_COMPRESSED_LENGTH) {\n    for (start = 0; start < buffer.length; start += MAX_COMPRESSED_LENGTH) {\n      writeCompressed.call(this, buffer.slice(start, start + MAX_COMPRESSED_LENGTH));\n    }\n    return;\n  }\n\n  var connection = this;\n\n  var packetLen = buffer.length;\n  var compressHeader = Buffer.allocUnsafe(7);\n\n  // seqqueue is used here because zlib async execution is routed via thread pool\n  // internally and when we have multiple compressed packets arriving we need\n  // to assemble uncompressed result sequentially\n  (function (seqId) {\n    connection.deflateQueue.push(function (task) {\n      zlib.deflate(buffer, function (err, compressed) {\n        if (err) {\n          connection._handleFatalError(err);\n          return;\n        }\n        var compressedLength = compressed.length;\n\n        if (compressedLength < packetLen) {\n          compressHeader.writeUInt8(compressedLength & 0xff, 0);\n          compressHeader.writeUInt16LE(compressedLength >> 8, 1);\n          compressHeader.writeUInt8(seqId, 3);\n          compressHeader.writeUInt8(packetLen & 0xff, 4);\n          compressHeader.writeUInt16LE(packetLen >> 8, 5);\n          connection.writeUncompressed(compressHeader);\n          connection.writeUncompressed(compressed);\n        } else {\n          // http://dev.mysql.com/doc/internals/en/uncompressed-payload.html\n          // To send an uncompressed payload:\n          //   - set length of payload before compression to 0\n          //   - the compressed payload contains the uncompressed payload instead.\n          compressedLength = packetLen;\n          packetLen = 0;\n          compressHeader.writeUInt8(compressedLength & 0xff, 0);\n          compressHeader.writeUInt16LE(compressedLength >> 8, 1);\n          compressHeader.writeUInt8(seqId, 3);\n          compressHeader.writeUInt8(packetLen & 0xff, 4);\n          compressHeader.writeUInt16LE(packetLen >> 8, 5);\n          connection.writeUncompressed(compressHeader);\n          connection.writeUncompressed(buffer);\n        }\n        task.done();\n      });\n    });\n  })(connection.compressedSequenceId);\n  connection._bumpCompressedSequenceId(1);\n}\n\nmodule.exports = {\n  enableCompression: enableCompression\n};\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/pool.js":"var mysql = require('../index.js');\n\nvar EventEmitter = require('events').EventEmitter;\nvar Util = require('util');\nvar PoolConnection = require('./pool_connection.js');\nvar Queue = require('denque');\nvar Connection = require('./connection.js');\n\nmodule.exports = Pool;\n\nUtil.inherits(Pool, EventEmitter);\nfunction Pool (options) {\n  EventEmitter.call(this);\n  this.config = options.config;\n  this.config.connectionConfig.pool = this;\n\n  this._allConnections = new Queue();\n  this._freeConnections = new Queue();\n  this._connectionQueue = new Queue();\n  this._closed = false;\n}\n\nPool.prototype.getConnection = function (cb) {\n  if (this._closed) {\n    return process.nextTick(function () {\n      return cb(new Error('Pool is closed.'));\n    });\n  }\n\n  var connection;\n\n  if (this._freeConnections.length > 0) {\n    connection = this._freeConnections.shift();\n\n    return process.nextTick(function () {\n      return cb(null, connection);\n    });\n  }\n\n  if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {\n    connection = new PoolConnection(this, {config: this.config.connectionConfig});\n\n    this._allConnections.push(connection);\n\n    return connection.connect(function (err) {\n      if (this._closed) {\n        return cb(new Error('Pool is closed.'));\n      }\n      if (err) {\n        return cb(err);\n      }\n\n      this.emit('connection', connection);\n      return cb(null, connection);\n    }.bind(this));\n  }\n\n  if (!this.config.waitForConnections) {\n    return process.nextTick(function () {\n      return cb(new Error('No connections available.'));\n    });\n  }\n\n  if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {\n    return cb(new Error('Queue limit reached.'));\n  }\n\n  this.emit('enqueue');\n  return this._connectionQueue.push(cb);\n};\n\nPool.prototype.releaseConnection = function (connection) {\n  var cb;\n\n  if (!connection._pool) {\n    // The connection has been removed from the pool and is no longer good.\n    if (this._connectionQueue.length) {\n      cb = this._connectionQueue.shift();\n\n      process.nextTick(this.getConnection.bind(this, cb));\n    }\n  } else if (this._connectionQueue.length) {\n    cb = this._connectionQueue.shift();\n\n    process.nextTick(cb.bind(null, null, connection));\n  } else {\n    this._freeConnections.push(connection);\n  }\n};\n\nPool.prototype.end = function (cb) {\n  this._closed = true;\n\n  if (typeof cb != 'function') {\n    cb = function (err) {\n      if (err) {\n        throw err;\n      }\n    };\n  }\n\n  var calledBack = false;\n  var closedConnections = 0;\n  var connection;\n\n  var endCB = function (err) {\n    if (calledBack) {\n      return;\n    }\n\n    if (err || ++closedConnections >= this._allConnections.length) {\n      calledBack = true;\n      cb(err);\n      return;\n    }\n  }.bind(this);\n\n  if (this._allConnections.length === 0) {\n    endCB();\n    return;\n  }\n\n  for (var i = 0; i < this._allConnections.length; i++) {\n    connection = this._allConnections.get(i);\n    connection._realEnd(endCB);\n  }\n};\n\nPool.prototype.query = function (sql, values, cb) {\n  var cmdQuery = Connection.createQuery(sql, values, cb, this.config.connectionConfig);\n  cmdQuery.namedPlaceholders = this.config.connectionConfig.namedPlaceholders;\n\n  this.getConnection(function (err, conn) {\n    if (err) {\n      if (typeof cmdQuery.onResult === 'function') {\n        cmdQuery.onResult(err);\n      } else {\n        cmdQuery.emit('error', err);\n      }\n      return;\n    }\n\n    conn.query(cmdQuery).once('end', function () {\n      conn.release();\n    });\n  });\n  return cmdQuery;\n};\n\nPool.prototype.execute = function (sql, values, cb) {\n  var useNamedPlaceholders = this.config.connectionConfig.namedPlaceholders;\n\n  this.getConnection(function (err, conn) {\n    if (err) {\n      return cb(err);\n    }\n\n    conn.config.namedPlaceholders = useNamedPlaceholders;\n    return conn.execute(sql, values, function () {\n      conn.release();\n      cb.apply(this, arguments);\n    });\n  });\n};\n\nPool.prototype._removeConnection = function (connection) {\n\n  // Remove connection from all connections\n  spliceConnection(this._allConnections, connection);\n\n  // Remove connection from free connections\n  spliceConnection(this._freeConnections, connection);\n\n  this.releaseConnection(connection);\n};\n\nPool.prototype.escape = function (value) {\n  return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n};\n\nPool.prototype.escapeId = function escapeId (value) {\n  return mysql.escapeId(value, false);\n};\n\nfunction spliceConnection (queue, connection) {\n  var len = queue.length;\n  if (len) {\n    if (queue.get(len - 1) === connection) {\n      queue.pop();\n    } else {\n      for (; --len;) {\n        if (queue.get(0) === connection) {\n          queue.shift();\n          break;\n        }\n        queue.push(queue.shift());\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/pool_connection.js":"var mysql = require('../index.js');\nvar Connection = mysql.Connection;\n\nvar inherits = require('util').inherits;\n\nmodule.exports = PoolConnection;\ninherits(PoolConnection, Connection);\nPoolConnection.statementKey = Connection.statementKey;\n\nfunction PoolConnection (pool, options) {\n  Connection.call(this, options);\n  this._pool = pool;\n\n  // When a fatal error occurs the connection's protocol ends, which will cause\n  // the connection to end as well, thus we only need to watch for the end event\n  // and we will be notified of disconnects.\n  var connection = this;\n  this.on('end', function (err) { this._removeFromPool(); });\n  this.on('error', function (err) { this._removeFromPool(); });\n}\n\nPoolConnection.prototype.release = function () {\n  if (!this._pool || this._pool._closed) {\n    return;\n  }\n  this._pool.releaseConnection(this);\n};\n\n// TODO: Remove this when we are removing PoolConnection#end\nPoolConnection.prototype._realEnd = Connection.prototype.end;\n\nPoolConnection.prototype.end = function () {\n  console.warn('Calling conn.end() to release a pooled connection is '\n              + 'deprecated. In next version calling conn.end() will be '\n              + 'restored to default conn.end() behavior. Use '\n              + 'conn.release() instead.'\n              );\n  this.release();\n};\n\nPoolConnection.prototype.destroy = function () {\n  this._removeFromPool();\n  return Connection.prototype.destroy.apply(this, arguments);\n};\n\nPoolConnection.prototype._removeFromPool = function () {\n  if (!this._pool || this._pool._closed) {\n    return;\n  }\n\n  var pool = this._pool;\n  this._pool = null;\n\n  pool._removeConnection(this);\n};\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/pool_cluster.js":"var Pool = require('./pool.js');\nvar PoolConfig = require('./pool_config.js');\nvar Util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\nfunction PoolCluster (config) {\n  EventEmitter.call(this);\n\n  config = config || {};\n  this._canRetry = typeof config.canRetry === 'undefined' ? true : config.canRetry;\n  this._removeNodeErrorCount = config.removeNodeErrorCount || 5;\n  this._defaultSelector = config.defaultSelector || 'RR';\n\n  this._closed = false;\n  this._lastId = 0;\n  this._nodes = {};\n  this._serviceableNodeIds = [];\n  this._namespaces = {};\n  this._findCaches = {};\n}\n\nmodule.exports = PoolCluster;\nUtil.inherits(PoolCluster, EventEmitter);\n\nPoolCluster.prototype.of = function (pattern, selector) {\n  pattern = pattern || '*';\n\n  selector = selector || this._defaultSelector;\n  selector = selector.toUpperCase();\n  if (typeof Selector[selector] === 'undefined') {\n    selector = this._defaultSelector;\n  }\n\n  var key = pattern + selector;\n\n  if (typeof this._namespaces[key] === 'undefined') {\n    this._namespaces[key] = new PoolNamespace(this, pattern, selector);\n  }\n\n  return this._namespaces[key];\n};\n\nPoolCluster.prototype.add = function (id, config) {\n  if (typeof id === 'object') {\n    config = id;\n    id = 'CLUSTER::' + (++this._lastId);\n  }\n\n  if (typeof this._nodes[id] === 'undefined') {\n    this._nodes[id] = {\n      id: id,\n      errorCount: 0,\n      pool: new Pool({config: new PoolConfig(config)})\n    };\n\n    this._serviceableNodeIds.push(id);\n\n    this._clearFindCaches();\n  }\n};\n\nPoolCluster.prototype.getConnection = function (pattern, selector, cb) {\n  var namespace;\n  if (typeof pattern === 'function') {\n    cb = pattern;\n    namespace = this.of();\n  } else {\n    if (typeof selector === 'function') {\n      cb = selector;\n      selector = this._defaultSelector;\n    }\n\n    namespace = this.of(pattern, selector);\n  }\n\n  namespace.getConnection(cb);\n};\n\nPoolCluster.prototype.end = function () {\n  if (this._closed) {\n    return;\n  }\n\n  this._closed = true;\n\n  for (var id in this._nodes) {\n    this._nodes[id].pool.end();\n  }\n};\n\nPoolCluster.prototype._findNodeIds = function (pattern) {\n  if (typeof this._findCaches[pattern] !== 'undefined') {\n    return this._findCaches[pattern];\n  }\n\n  var foundNodeIds;\n\n  if (pattern === '*') { // all\n    foundNodeIds = this._serviceableNodeIds;\n  } else if (this._serviceableNodeIds.indexOf(pattern) != -1) { // one\n    foundNodeIds = [pattern];\n  } else { // wild matching\n    var keyword = pattern.substring(pattern.length - 1, 0);\n\n    foundNodeIds = this._serviceableNodeIds.filter(function (id) {\n      return id.indexOf(keyword) === 0;\n    });\n  }\n\n  this._findCaches[pattern] = foundNodeIds;\n\n  return foundNodeIds;\n};\n\nPoolCluster.prototype._getNode = function (id) {\n  return this._nodes[id] || null;\n};\n\nPoolCluster.prototype._increaseErrorCount = function (node) {\n  if (++node.errorCount >= this._removeNodeErrorCount) {\n    var index = this._serviceableNodeIds.indexOf(node.id);\n    if (index !== -1) {\n      this._serviceableNodeIds.splice(index, 1);\n      delete this._nodes[node.id];\n\n      this._clearFindCaches();\n\n      node.pool.end();\n\n      this.emit('remove', node.id);\n    }\n  }\n};\n\nPoolCluster.prototype._decreaseErrorCount = function (node) {\n  if (node.errorCount > 0) {\n    --node.errorCount;\n  }\n};\n\nPoolCluster.prototype._getConnection = function (node, cb) {\n  var self = this;\n\n  node.pool.getConnection(function (err, connection) {\n    if (err) {\n      self._increaseErrorCount(node);\n\n      if (self._canRetry) {\n        console.warn('[Error] PoolCluster : ' + err);\n        return cb(null, 'retry');\n      } else {\n        return cb(err);\n      }\n    } else {\n      self._decreaseErrorCount(node);\n    }\n\n    connection._clusterId = node.id;\n\n    return cb(null, connection);\n  });\n};\n\nPoolCluster.prototype._clearFindCaches = function () {\n  this._findCaches = {};\n};\n\nfunction PoolNamespace (cluster, pattern, selector) {\n  this._cluster = cluster;\n  this._pattern = pattern;\n  this._selector = new Selector[selector]();\n}\n\nPoolNamespace.prototype.getConnection = function (cb) {\n  var clusterNode = this._getClusterNode();\n\n  if (clusterNode === null) {\n    return cb(new Error('Pool does Not exists.'));\n  }\n\n  return this._cluster._getConnection(clusterNode, function (err, connection) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (connection === 'retry') {\n      return this.getConnection(cb);\n    }\n\n    return cb(null, connection);\n  }.bind(this));\n};\n\nPoolNamespace.prototype._getClusterNode = function () {\n  var foundNodeIds = this._cluster._findNodeIds(this._pattern);\n\n  if (foundNodeIds.length === 0) {\n    return null;\n  }\n\n  var nodeId = (foundNodeIds.length === 1) ? foundNodeIds[0] : this._selector(foundNodeIds);\n\n  return this._cluster._getNode(nodeId);\n};\n\n/**\n * Selector\n */\nvar Selector = {};\n\nSelector.RR = function () {\n  var index = 0;\n\n  return function (clusterIds) {\n    if (index >= clusterIds.length) {\n      index = 0;\n    }\n\n    var clusterId = clusterIds[index++];\n\n    return clusterId;\n  };\n};\n\nSelector.RANDOM = function () {\n  return function (clusterIds) {\n    return clusterIds[Math.floor(Math.random() * clusterIds.length)];\n  };\n};\n\nSelector.ORDER = function () {\n  return function (clusterIds) {\n    return clusterIds[0];\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/pool_config.js":"var ConnectionConfig = require('./connection_config.js');\n\nmodule.exports = PoolConfig;\nfunction PoolConfig (options) {\n  if (typeof options === 'string') {\n    options = ConnectionConfig.parseUrl(options);\n  }\n  this.connectionConfig = new ConnectionConfig(options);\n  this.waitForConnections = (options.waitForConnections === undefined)\n    ? true\n    : Boolean(options.waitForConnections);\n  this.connectionLimit = (options.connectionLimit === undefined)\n    ? 10\n    : Number(options.connectionLimit);\n  this.queueLimit = (options.queueLimit === undefined)\n    ? 0\n    : Number(options.queueLimit);\n}\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/results_stream.js":"var Readable = require('stream').Readable;\n\n// copy-paste from https://github.com/mysqljs/mysql/blob/master/lib/protocol/sequences/Query.js\nmodule.exports = function (command, connectionStream) {\n  command.stream = function (options) {\n    var stream;\n\n    options = options || {};\n    options.objectMode = true;\n    stream = new Readable(options),\n\n    stream._read = function () {\n      connectionStream.resume();\n    };\n\n    this.on('result', function (row, i) {\n      if (!stream.push(row)) {\n        connectionStream.pause();\n      }\n      stream.emit('result', row, i);  // replicate old emitter\n    });\n\n    this.on('error', function (err) {\n      stream.emit('error', err);  // Pass on any errors\n    });\n\n    this.on('end', function () {\n      stream.push(null);  // pushing null, indicating EOF\n    });\n\n    this.on('fields', function (fields, i) {\n      stream.emit('fields', fields, i);  // replicate old emitter\n    });\n\n    return stream;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-mysql2/node_modules/mysql2/lib/server.js":"var net = require('net');\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\nvar Connection = require('./connection');\nvar ConnectionConfig = require('./connection_config');\n\n// TODO: inherit Server from net.Server\nfunction Server ()\n{\n  EventEmitter.call(this);\n  this.connections = [];\n  this._server = net.createServer(this._handleConnection.bind(this));\n}\nutil.inherits(Server, EventEmitter);\n\nServer.prototype._handleConnection = function (socket) {\n  var connectionConfig = new ConnectionConfig({stream: socket, isServer: true});\n  var connection = new Connection({config: connectionConfig});\n  this.emit('connection', connection);\n};\n\nServer.prototype.listen = function (port, host, backlog, callback) {\n  this._port = port;\n  this._server.listen.apply(this._server, arguments);\n  return this;\n};\n\nServer.prototype.close = function (cb) {\n  this._server.close(cb);\n};\n\nmodule.exports = Server;\n"}